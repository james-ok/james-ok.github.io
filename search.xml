<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ELK实战</title>
      <link href="/2020/01/09/ELK%E5%AE%9E%E6%88%98/"/>
      <url>/2020/01/09/ELK%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h2 id="ElasticSearch安装"><a href="#ElasticSearch安装" class="headerlink" title="ElasticSearch安装"></a>ElasticSearch安装</h2><ul><li><a href="https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.5.1-linux-x86_64.tar.gz" target="_blank" rel="noopener">下载</a> </li><li>解压：<code>tar -zxvf elasticsearch-7.5.1-linux-x86_64.tar.gz</code></li><li>进入ElasticSearch目录：<code>cd elasticsearch-7.5.1</code></li><li>启动：<code>sh bin/elasticsearch</code></li></ul><h3 id="启动遇到的问题"><a href="#启动遇到的问题" class="headerlink" title="启动遇到的问题"></a>启动遇到的问题</h3><h4 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h4><p>由于ElasticSearch处于安全性考虑，ElasticSearch禁止使用root用户启动，需要新建一个用户和组，并且将ElasticSearch交给该用户和组管理。</p><ol><li>创建组：<code>groupadd elk</code></li><li>创建用户并分配组：<code>useradd -g elk elk</code></li><li>将ElasticSearch分配给新建的用户：<code>chown -R elk:elk ./elasticsearch-7.5.1</code></li><li>切换用户：<code>su elk</code></li><li>启动：<code>sh bin/elasticsearch</code></li></ol><h4 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h4><pre class="line-numbers language-shell"><code class="language-shell">ERROR: [3] bootstrap checks failed[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535][2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144][3]: the default discovery settings are unsuitable for production use; at least one of [discovery.seed_hosts, discovery.seed_providers, cluster.initial_master_nodes] must be configured<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>切换回root用户</p><ol><li>编辑<code>vi /etc/security/limits.conf</code>文件，在倒数第二行添加<br>```shell</li></ol><ul><li>soft    nofile  65536</li><li>hard    nofile  65536<br>```</li></ul><ol start="2"><li>编辑<code>vi /etc/sysctl.conf</code>文件，添加<code>vm.max_map_count=655360</code></li><li>执行<code>sysctl -p</code></li></ol><h4 id="问题四"><a href="#问题四" class="headerlink" title="问题四"></a>问题四</h4><pre class="line-numbers language-shell"><code class="language-shell">ERROR: [1] bootstrap checks failed[1]: the default discovery settings are unsuitable for production use; at least one of [discovery.seed_hosts, discovery.seed_providers, cluster.initial_master_nodes] must be configured<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>修改配置文件<code>vim config/elasticsearch.yml</code>，添加内容<code>cluster.initial_master_nodes: [&quot;node-1&quot;]</code></li></ol><h2 id="Kibana安装"><a href="#Kibana安装" class="headerlink" title="Kibana安装"></a>Kibana安装</h2><ul><li><a href="https://artifacts.elastic.co/downloads/kibana/kibana-7.5.1-linux-x86_64.tar.gz" target="_blank" rel="noopener">下载</a> </li><li>解压：<code>tar -zxvf kibana-7.5.1-linux-x86_64.tar.gz</code></li><li>将Kibana分配给新建的用户：<code>chown -R elk:elk ./kibana-7.5.1-linux-x86_64</code></li><li>修改配置如下<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">server.port</span><span class="token punctuation">:</span> <span class="token number">5601</span><span class="token key atrule">server.host</span><span class="token punctuation">:</span> <span class="token string">"192.168.1.6"</span><span class="token key atrule">elasticsearch.hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"http://192.168.1.6:9200"</span><span class="token punctuation">]</span><span class="token key atrule">i18n.locale</span><span class="token punctuation">:</span> <span class="token string">"zh-CN"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="LogStash安装"><a href="#LogStash安装" class="headerlink" title="LogStash安装"></a>LogStash安装</h2><ul><li><a href="https://artifacts.elastic.co/downloads/logstash/logstash-7.5.1.tar.gz" target="_blank" rel="noopener">下载</a> </li><li>解压：<code>tar -zxvf LogStash-7.5.1.tar.gz</code></li><li>将LogStash分配给新建的用户：<code>chown -R elk:elk ./LogStash-7.5.1</code></li><li>创建LogStash配置文件</li><li>启动LogStash：<code>sh sh/logstash -f config/logstash.conf</code></li></ul><h3 id="LogStash配置"><a href="#LogStash配置" class="headerlink" title="LogStash配置"></a>LogStash配置</h3><p>LogStash可以简单分为三个部分，分别是input、filter、output。input用于输入数据来源，filter用于处理数据，output用于数据数据，一般将output输出到ES中。</p>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
            <tag> Kibana </tag>
            
            <tag> LogStash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络编程三剑客BIO/NIO/AIO</title>
      <link href="/2020/01/01/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B8%89%E5%89%91%E5%AE%A2BIO-NIO-AIO/"/>
      <url>/2020/01/01/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B8%89%E5%89%91%E5%AE%A2BIO-NIO-AIO/</url>
      
        <content type="html"><![CDATA[<p>日常工作中离不开IO，但由于Java中IO包下非常繁杂，很多同学认为IO学起来很难，其实只是没有理清IO包下各个类之间的关系</p><h2 id="Java-IO"><a href="#Java-IO" class="headerlink" title="Java IO"></a>Java IO</h2><p>Java中IO体系大体如下图：<br><img src="/2020/01/01/网络编程三剑客BIO-NIO-AIO/JavaIO.png" alt="JavaIO"><br>从上图可见，Java I/O中主要分为字节操作的输入输出流InputStream/OutputStream和字符输入输出流Reader/Writer，两种类型的区别在于一个是操作字节数据一个是操作字符数据，当然字符数据也可以用字节流进行操作，<br>只是在Java中，为字符数据单独提供一种流为了其操作的便利性。IO操作针对不同的数据来源有以下类型的流：</p><ul><li>文件流操作：FileInputStream、FileOutputStream、FileReader、FileWriter</li><li>内存流操作：ByteArrayInputStream、ByteArrayOutputStream、CharArrayReader、CharArrayWriter</li><li>管道流操作：PipedInputStream、PipedOutputStream、PipedReader、PipedWriter</li><li>缓冲流操作：BufferedInputStream、BufferedOutputStream、BufferedReader、BufferedWriter</li><li>字节流独有的基本数据类型流操作：DataInputStream、DataOutputStream</li><li>字节流独有的对象序列化和反序列化流操作：ObjectInputStream、ObjectOutputStream</li><li>字符流独有的转换流操作：InputStreamReader、OutputStreamWriter</li><li>输出流独有的打印流操作：PrintStream、PrintWriter</li></ul><h2 id="同步异步阻塞非阻塞"><a href="#同步异步阻塞非阻塞" class="headerlink" title="同步异步阻塞非阻塞"></a>同步异步阻塞非阻塞</h2><ul><li><p>同步和异步关注的是消息通信机制，是应用层在调用系统内核时调用的一种方式。<br>  ** 同步调用：同步调用是指当应用程序在调用系统内核请求数据过后，该调用在没有得到结果之前不返回，在系统内核准备好数据过后将数据复制到应用系统过后再返回。<br>  ** 异步调用：异步调用是指当应用系统在调用系统内核过后，该调用立即返回。在内核准备好数据并且复制到应用系统中过后，内核主动通知应用系统并且将其结果返回给应用系统进行处理。</p></li><li><p>阻塞和非阻塞关注的是经过同步或者异步调用过后返回结果之前应用程序所处的状态。<br>  ** 阻塞是指应用程序在调用了系统内核过后，当前线程被挂起，等待其结果返回过后才会被继续执行。<br>  ** 非阻塞是指应用程序在调用了系统内核过后，立即返回，该调用并不会导致当前线程被挂起。</p></li><li><p>同步阻塞I/O：当应用程序需要访问内核空间中的数据时，向内核发送一个IO读的调用，如果需要被访问的数据还没有准备好，那么客户端（应用程序）在没有得到结果之前，调用不会返回，客户端线程会被挂起。</p></li><li><p>同步非阻塞I/O：当应用程序需要访问内核空间中的数据时，应用程序发送一个IO读的调用，内核在收到客户端的调用过后，不管数据是否准备好，都将调用立即返回，如果已经准备好，则返回，如果没有准备好，则告诉客户端没有准备好，<br>这个时候，客户端在收到调用结果过后，根据结果判断是否需要继续询问内核，客户端会通过轮询的方式，直到得到结果。</p></li><li><p>异步阻塞I/O（I/O多路复用）：也就是经典的Reactor设计模式，多个IO注册到一个线程中，该线程不断的去询问内核这多个IO是否有可操作的IO，如果有，则通知客户端某个IO可操作，然后再进行读写操作，NIO中Selector就是这种规模性。</p></li><li><p>异步非阻塞I/O：当应用程序需要访问内核空间中的数据时，应用程序向内核发送一个IO读的调用，该调用立即返回，在内核将数据准备好并且复制到用户空间中，通过回调的方式通知应用程序，由于调用会立即返回，所有在等待结果<br>期间，客户端线程并不会被挂起。</p></li></ul><h2 id="BIO"><a href="#BIO" class="headerlink" title="BIO"></a>BIO</h2><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>Server</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Ignore package import</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChatServer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SERVER_PORT <span class="token operator">=</span> <span class="token number">8888</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUIT <span class="token operator">=</span> <span class="token string">"quit"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> ServerSocket serverSocket<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Writer<span class="token operator">></span> clientsMap<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//线程池</span>    <span class="token keyword">private</span> ExecutorService executorService <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ChatServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        clientsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addClient</span><span class="token punctuation">(</span>Socket socket<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>socket<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>clientsMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                clientsMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeClient</span><span class="token punctuation">(</span>Integer key<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//关闭流</span>            Writer writer <span class="token operator">=</span> clientsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">close</span><span class="token punctuation">(</span>writer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//移除客户端</span>            clientsMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span>Closeable closeable<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>closeable<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                closeable<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">forwordMessage</span><span class="token punctuation">(</span>Writer writer<span class="token punctuation">,</span>String message<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span>SERVER_PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//接受客户端连接</span>                Socket socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//使用线程池的方式</span>                executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProcessHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>socket<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//创建一个新的线程</span>                <span class="token comment" spellcheck="true">//new Thread(new ProcessHandler(this,socket)).start();</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Writer<span class="token operator">></span> <span class="token function">getClientsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> clientsMap<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ChatServer chatServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChatServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chatServer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Client</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Ignore package import</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChatClient</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SERVER_PORT <span class="token operator">=</span> <span class="token number">8888</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String LOCAL_HOST <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUIT <span class="token operator">=</span> <span class="token string">"quit"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Socket socket<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span>Closeable closeable<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>closeable<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                closeable<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        BufferedReader consoleReader <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//创建连接</span>            socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span>LOCAL_HOST<span class="token punctuation">,</span>SERVER_PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建线程用于处理用户发送消息</span>            BufferedReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserInputHandler</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//主线程读取其他用户发送的消息</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                String msg <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">isInputShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> msg <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token function">close</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">close</span><span class="token punctuation">(</span>consoleReader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ChatClient chatClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChatClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chatClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端用户输入线程</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Ignore package import</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInputHandler</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Socket socket<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UserInputHandler</span><span class="token punctuation">(</span>Socket socket<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//等待用户输入</span>            BufferedWriter writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BufferedReader consoleReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                String msg <span class="token operator">=</span> consoleReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>msg <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>ChatClient<span class="token punctuation">.</span>QUIT<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h2><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><p>Server</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Ignore package import</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChatServer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUIT <span class="token operator">=</span> <span class="token string">"quit"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_SERVER_PORT <span class="token operator">=</span> <span class="token number">8888</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> ServerSocketChannel serverSocketChannel<span class="token punctuation">;</span>    <span class="token keyword">private</span> Selector selector<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> BUFFER_LENGTH <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> ByteBuffer rbuf <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>BUFFER_LENGTH<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> ByteBuffer wbuf <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>BUFFER_LENGTH<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Charset charset <span class="token operator">=</span> Charset<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//初始化</span>            serverSocketChannel <span class="token operator">=</span> ServerSocketChannel<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//配置非阻塞channel</span>            serverSocketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//绑定端口</span>            serverSocketChannel<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>DEFAULT_SERVER_PORT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//初始化Selector</span>            selector <span class="token operator">=</span> Selector<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//注册</span>            serverSocketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> SelectionKey<span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"启动服务器， 监听端口："</span> <span class="token operator">+</span> DEFAULT_SERVER_PORT <span class="token operator">+</span> <span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//处理请求</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//该方法会阻塞，只到有新的时间产生</span>                selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//拿到当前selector中所有到达的事件</span>                Set<span class="token operator">&lt;</span>SelectionKey<span class="token operator">></span> selectionKeys <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>SelectionKey key <span class="token operator">:</span> selectionKeys<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//处理</span>                    <span class="token function">handlers</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                selectionKeys<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 处理客户端连接和读取客户端事件     * @param key     * @throws IOException     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handlers</span><span class="token punctuation">(</span>SelectionKey key<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//在Accept事件中拿到客户端channel，然后将其注册到selector中</span>            ServerSocketChannel channel <span class="token operator">=</span> <span class="token punctuation">(</span>ServerSocketChannel<span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            SocketChannel socketChannel <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            socketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//注册</span>            socketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span>SelectionKey<span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getClientName</span><span class="token punctuation">(</span>socketChannel<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"已连接"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            SocketChannel channel <span class="token operator">=</span> <span class="token punctuation">(</span>SocketChannel<span class="token punctuation">)</span>key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//读取客户端消息</span>            String msg <span class="token operator">=</span> <span class="token function">readMsg</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                key<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                selector<span class="token punctuation">.</span><span class="token function">wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getClientName</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//转发客户端的消息</span>                <span class="token function">forwardMsg</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isQuit</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    key<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    selector<span class="token punctuation">.</span><span class="token function">wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getClientName</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"已断开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> String <span class="token function">getClientName</span><span class="token punctuation">(</span>SocketChannel client<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"客户端["</span> <span class="token operator">+</span> client<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 转发消息     * @param socketChannel     * @param msg     * @throws IOException     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">forwardMsg</span><span class="token punctuation">(</span>SocketChannel socketChannel<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>SelectionKey<span class="token operator">></span> keys <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>SelectionKey key <span class="token operator">:</span> keys<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Channel channel <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>channel <span class="token keyword">instanceof</span> <span class="token class-name">ServerSocketChannel</span> <span class="token operator">||</span> channel<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>socketChannel<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                SocketChannel clientChannel <span class="token operator">=</span> <span class="token punctuation">(</span>SocketChannel<span class="token punctuation">)</span> channel<span class="token punctuation">;</span>                wbuf<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                wbuf<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>charset<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token function">getClientName</span><span class="token punctuation">(</span>socketChannel<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                wbuf<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>wbuf<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    clientChannel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>wbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 读取消息     * @param channel     * @return     * @throws IOException     */</span>    <span class="token keyword">private</span> String <span class="token function">readMsg</span><span class="token punctuation">(</span>SocketChannel channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        rbuf<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>rbuf<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rbuf<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>charset<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>rbuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断客户端是否退出     * @param msg     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isQuit</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> QUIT<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 关闭     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>selector<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                selector<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ChatServer chatServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChatServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chatServer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Client</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Ignore package import</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChatClient</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUIT <span class="token operator">=</span> <span class="token string">"quit"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_SERVER_HOST <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_SERVER_PORT <span class="token operator">=</span> <span class="token number">8888</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> SocketChannel socketChannel<span class="token punctuation">;</span>    <span class="token keyword">private</span> Selector selector<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> BUFFER_LENGTH <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> ByteBuffer rbuf <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>BUFFER_LENGTH<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> ByteBuffer wbuf <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>BUFFER_LENGTH<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Charset charset <span class="token operator">=</span> Charset<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 建立连接     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//初始化</span>            socketChannel <span class="token operator">=</span> SocketChannel<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            socketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//初始化Selector</span>            selector <span class="token operator">=</span> Selector<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//注册</span>            socketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> SelectionKey<span class="token punctuation">.</span>OP_CONNECT<span class="token punctuation">)</span><span class="token punctuation">;</span>            socketChannel<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>DEFAULT_SERVER_HOST<span class="token punctuation">,</span>DEFAULT_SERVER_PORT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//如果客户端关闭，则跳出循环</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>selector<span class="token punctuation">.</span><span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                Set<span class="token operator">&lt;</span>SelectionKey<span class="token operator">></span> selectionKeys <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>SelectionKey key <span class="token operator">:</span> selectionKeys<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">handlers</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                selectionKeys<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 处理客户端连接和读取服务器端数据     * @param key     * @throws IOException     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handlers</span><span class="token punctuation">(</span>SelectionKey key<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isConnectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            SocketChannel channel <span class="token operator">=</span> <span class="token punctuation">(</span>SocketChannel<span class="token punctuation">)</span>key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>channel<span class="token punctuation">.</span><span class="token function">isConnectionPending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                channel<span class="token punctuation">.</span><span class="token function">finishConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//创建一个线程去阻塞用户输入</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserInputHandler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            channel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span>SelectionKey<span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            SocketChannel channel <span class="token operator">=</span> <span class="token punctuation">(</span>SocketChannel<span class="token punctuation">)</span>key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//读取服务器数据</span>            String msg <span class="token operator">=</span> <span class="token function">receive</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 读取服务器消息     * @param channel     * @return     * @throws IOException     */</span>    <span class="token keyword">private</span> String <span class="token function">receive</span><span class="token punctuation">(</span>SocketChannel channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        rbuf<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>rbuf<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rbuf<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>charset<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>rbuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断客户端是否退出     * @param msg     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isQuit</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> QUIT<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 关闭资源     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>selector<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                selector<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ChatClient chatClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChatClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chatClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 发送消息     * @param msg     * @throws IOException     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        wbuf<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wbuf<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>charset<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wbuf<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>wbuf<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            socketChannel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>wbuf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isQuit</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>UserInputHandler</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Ignore package import</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInputHandler</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ChatClient chatClient<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UserInputHandler</span><span class="token punctuation">(</span>ChatClient chatClient<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>chatClient <span class="token operator">=</span> chatClient<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            BufferedReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                String line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                chatClient<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//判断是否退出客户端</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>chatClient<span class="token punctuation">.</span><span class="token function">isQuit</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="AIO"><a href="#AIO" class="headerlink" title="AIO"></a>AIO</h2><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><p>Server</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Ignore package import</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChatServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> BUFFER_LENGTH <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_PORT <span class="token operator">=</span> <span class="token number">8888</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> AsynchronousServerSocketChannel asynchronousServerSocketChannel<span class="token punctuation">;</span>    <span class="token keyword">private</span> CountDownLatch countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//初始化</span>            asynchronousServerSocketChannel <span class="token operator">=</span> AsynchronousServerSocketChannel<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//绑定监听端口</span>            asynchronousServerSocketChannel<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>DEFAULT_PORT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//接受客户端请求</span>            asynchronousServerSocketChannel<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">AcceptHandler</span><span class="token punctuation">(</span>asynchronousServerSocketChannel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//阻塞主线程</span>            countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token function">close</span><span class="token punctuation">(</span>asynchronousServerSocketChannel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span>Closeable closeable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>closeable<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                closeable<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ChatServer chatServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChatServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chatServer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接受用户请求Handler</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Ignore package import</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AcceptHandler</span> <span class="token keyword">implements</span> <span class="token class-name">CompletionHandler</span><span class="token operator">&lt;</span>AsynchronousSocketChannel<span class="token punctuation">,</span>Object<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> AsynchronousServerSocketChannel asynchronousServerSocketChannel<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">AcceptHandler</span><span class="token punctuation">(</span>AsynchronousServerSocketChannel asynchronousServerSocketChannel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>asynchronousServerSocketChannel <span class="token operator">=</span> asynchronousServerSocketChannel<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">completed</span><span class="token punctuation">(</span>AsynchronousSocketChannel asynchronousSocketChannel<span class="token punctuation">,</span> Object attachment<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//继续接受客户端请求</span>        asynchronousServerSocketChannel<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//读取数据</span>        ByteBuffer buffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>ChatServer<span class="token punctuation">.</span>BUFFER_LENGTH<span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span><span class="token string">"read"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"buffer"</span><span class="token punctuation">,</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        asynchronousSocketChannel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span>info<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ClientHandler</span><span class="token punctuation">(</span>asynchronousSocketChannel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">failed</span><span class="token punctuation">(</span>Throwable exc<span class="token punctuation">,</span> Object attachment<span class="token punctuation">)</span> <span class="token punctuation">{</span>        exc<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>处理读写请求Handler</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Ignore package import</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientHandler</span> <span class="token keyword">implements</span> <span class="token class-name">CompletionHandler</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>Object<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> AsynchronousSocketChannel asynchronousSocketChannel<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ClientHandler</span><span class="token punctuation">(</span>AsynchronousSocketChannel asynchronousSocketChannel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>asynchronousSocketChannel <span class="token operator">=</span> asynchronousSocketChannel<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">completed</span><span class="token punctuation">(</span>Integer result<span class="token punctuation">,</span> Object attachment<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> info <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">)</span> attachment<span class="token punctuation">;</span>        String type <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> info<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"read"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ByteBuffer buffer <span class="token operator">=</span> <span class="token punctuation">(</span>ByteBuffer<span class="token punctuation">)</span> info<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"buffer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//回写到客户端</span>            info<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span><span class="token string">"write"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            asynchronousSocketChannel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span>info<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"write"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ByteBuffer buffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>ChatServer<span class="token punctuation">.</span>BUFFER_LENGTH<span class="token punctuation">)</span><span class="token punctuation">;</span>            info<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span><span class="token string">"read"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            info<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"buffer"</span><span class="token punctuation">,</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>            asynchronousSocketChannel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span>info<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">failed</span><span class="token punctuation">(</span>Throwable exc<span class="token punctuation">,</span> Object attachment<span class="token punctuation">)</span> <span class="token punctuation">{</span>        exc<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Ignore package import</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChatClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> BUFFER_LENGTH <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_HOST <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_PORT <span class="token operator">=</span> <span class="token number">8888</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> AsynchronousSocketChannel asynchronousSocketChannel<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            asynchronousSocketChannel <span class="token operator">=</span> AsynchronousSocketChannel<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Future<span class="token operator">&lt;</span>Void<span class="token operator">></span> connect <span class="token operator">=</span> asynchronousSocketChannel<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>DEFAULT_HOST<span class="token punctuation">,</span> DEFAULT_PORT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//等待连接返回</span>            connect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BufferedReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                String line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ByteBuffer buffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>BUFFER_LENGTH<span class="token punctuation">)</span><span class="token punctuation">;</span>                buffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Future<span class="token operator">&lt;</span>Integer<span class="token operator">></span> write <span class="token operator">=</span> asynchronousSocketChannel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                write<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Future<span class="token operator">&lt;</span>Integer<span class="token operator">></span> read <span class="token operator">=</span> asynchronousSocketChannel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                read<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token function">close</span><span class="token punctuation">(</span>asynchronousSocketChannel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span>Closeable closeable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>closeable<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                closeable<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ChatClient chatClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChatClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chatClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BIO </tag>
            
            <tag> NIO </tag>
            
            <tag> AIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程基础</title>
      <link href="/2019/12/28/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/12/28/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>高并发一词是每个程序员都耳熟的一个词，但又有多少人接触过，或者说理解其底层原理呢，似乎这个概念已经成为了评判一个程序员等级的标准。今天我们来探索一下Java并发编程中的奥秘</p><h2 id="内存模型的基本概念"><a href="#内存模型的基本概念" class="headerlink" title="内存模型的基本概念"></a>内存模型的基本概念</h2><p>计算机的每一个操作都是由CPU去执行的，而在执行的过程中，难免会有一些数据的读取和写入操作，这些数据是存在于我们的主存（物理内存）中的，然而主存的输入输出速度和CPU执行执行的速度相比要慢得多，<br>如果CPU的每次执行都要从主存中的加载写入数据，那么整个系统的性能就被降低了，所以，CPU就内置了高速缓存。<br>CPU在执行指令之前，会将需要用到的数据提前复制一个副本到高速缓存，然后CPU在运算过程中就可以直接读取和写入高速缓存中的副本数据，最后，运算结束，在退出指令之前将副本数据刷新到主存中。<br>例如：</p><pre class="line-numbers language-java"><code class="language-java">i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在以上操作中，CPU会首先从主存中读取i的值，并且将其复制到CPU的高速缓存中，如果此时i的值为0，那么高速缓存中就存在一个i=0的变量，再执行i+1，得到结果为1，最后在退出指令之前将i的值1刷新到主存中。<br>以上操作在单线程中没有任何问题，但多线程就会出现问题，在多核CPU中，每条线程可能会在不同的CPU中运行，各个CPU有独立的高速缓存，此时两个线程同时执行以上操作，线程1在执行指令之前会将i的值0复制到<br>CPU1的高速缓存中，线程2也同样将i的值0复制到CPU2的高速缓存中，此时两个线程中i的值都为0，然后开始运算，线程1运算完成后得到i的值为1，在其执行完指令退出前，将缓存中的值刷新到主存中；线程2运算完成<br>后得到i的值也为1，将其刷新到主存中，这个时候主存中i的值为1，并不是我们理想中的2。这就是著名的缓存一致性问题，我们通常称多个线程访问的变量为共享变量。也就是说，一个变量存在于多个CPU的高速缓存中<br>就会出现缓存一致性问题。<br>那么为了解决缓存一致性问题，一般有以下两种方案：</p><ul><li>总线锁：早期的CPU都是通过在总线上加锁#Lock来解决的，因为CPU和其他部件都是通过总线来进行的，在总线上加锁，也就保证了CPU的多个核心串行执行，当线程1执行完再执行线程2。这虽然解决了缓存一致性问题<br>但是该种方式带来的效率低下是无法避免的。</li><li>缓存一致性协议：由于总线锁方式的效率低下，所以就出现了缓存一致性协议，最出名的就是Intel的MESI协议，它的核心思想是：当其中一个CPU在写某个变量时，如果发现该变量是共享变量（该变量存在于多个CPU<br>的高速缓存中），则通知其他CPU将该变量的缓存状态设置为失效，当其他CPU需要读取该变量时，发现该变量缓存是失效状态的，所以会重新从主存中读取。</li></ul><h2 id="并发编程的三个概念"><a href="#并发编程的三个概念" class="headerlink" title="并发编程的三个概念"></a>并发编程的三个概念</h2><p>明白了计算机的内存模型，现在来分析一下我们在日常开发过程中，并发编程需要面临的三个问题：可见性问题、原子性问题、有序性问题</p><h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><p>多个线程访问同一个变量，一个线程对该变量的值进行了改变，其他线程能够立即看到该变量的最新数据。<br>当一个变量存在于多个CPU中的高速缓存中，一个线程对该变量进行了变更，其他线程中任然是该变量变更之前的数据，这个时候就出现了可见性问题。</p><h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><p>一个或者多个操作，要么全部执行，执行过程中不会被其他线程打断，要么全部不执行。只有保证了原则性，才能确保得到的结果是正确的。<br>例如：一个32位变量的赋值分为两个步骤，为低16位赋值，为高16位赋值；当将低16位的值写入成功过后，突然中断，此时有一个线程对该变量进行了访问，这个时候得到的结果是不正确的，这就出现了原子性问题</p><h3 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h3><p>程序的执行顺序按照代码的编写先后顺序执行。<br>处理器为了提高程序执行效率，可能会对程序代理进行优化，它不保证每句代理的执行的顺序，但可以保证程序最终执行的结果是一致的。这就是指令重排序，那么它是怎么保证最后结果的一致性的呢？举个例子：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//{1}</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//{2}</span>i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//{3}</span>j <span class="token operator">=</span> j <span class="token operator">+</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//{4}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码执行顺序可以是：{2} -&gt; {1} -&gt; {3} -&gt; {4}，但是绝对不会出现 {2} -&gt; {1} -&gt; {4} -&gt; {3}，因为步骤{4}依赖于步骤{3}的执行结果。<br>从上面的例子可以看出，指令重排序并不会影响单线程的执行结果，但是在多线程就不一定了，例如（伪代码）：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//线程1</span>Object a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//{1}</span>flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//{2}</span><span class="token comment" spellcheck="true">//线程2</span><span class="token keyword">while</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">//{3}</span>    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>a<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//{4}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从以上例子可以看出，线程1中，代码{1}和代码{2}并没有依赖性，所以根据执行重排序的规则，{1}{2}并不保证执行的顺序性，这个时候如果首先执行的是{2}，那么线程2就会终止循环结束线程，执行{4}，然而这个时候a<br>还没有完成初始化，这个时候程序就会抛出异常。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>要想在多线程中程序的正常执行，必须要保证可见性、原子性、有序性。</p><h2 id="Java内存模型（JMM）"><a href="#Java内存模型（JMM）" class="headerlink" title="Java内存模型（JMM）"></a>Java内存模型（JMM）</h2><p>前面两节了解了计算机的内存模型，下面来了解一下Java的内存模型。它为我们提供了哪些保证以及提供了哪些方法或者机制来解决以上问题。<br>JMM主要是为了屏蔽各个硬件平台和操作系统对内存访问的差异，实现JVM在各个平台下能一致的访问内存的功能。他主要定义了程序中变量的访问规则，值得注意的是，JMM为了较好的执行性能，并没有限制CPU使用高速<br>缓存带来的性能优化，也没有限制编译器对指令的重排序，也就是说，在JMM模型中，任然存在缓存一致性和指令重排序问题。<br>JMM模型中，所有的变量都存在于主存（可以看成是物理内存）中，每个线程都有自己的工作内存（可以看成是CPU的高速缓存）中，线程对变量的每个操作都是在自己的工作内存中，不能直接对主存进行操作，并且各个线程<br>不能对其他线程的工作内存中的数据进行操作，如果线程之间需要通信，必须经过主存进行数据传递。</p><h3 id="JMM中主内存和工作内存的交互"><a href="#JMM中主内存和工作内存的交互" class="headerlink" title="JMM中主内存和工作内存的交互"></a>JMM中主内存和工作内存的交互</h3><p>CPU高速缓存和物理内存之间交互有MESI缓存一致性协议，那么JMM中的工作内存和主存之间的交互（主存中的数据如何读取到工作内存中的，工作内存中的数据如何写入到主存中的）也有约定，<br>是通过JVM定义的八种操作来完成的，这八种操作，每一种都是原子性的。这八种操作分别是：</p><ul><li>Lock(锁定):作用于主内存中的变量，一个变量同一时间只能有一个线程锁定，表示这条线程独占这个变量</li><li>UnLock(解锁):作用于主内存，将该条线程锁定的对象解锁，使之其他线程能锁定该变量</li><li>Read(读取):作用于主内存，表示将一个主内存的变量的值传输到线程的工作内存中</li><li>Load(载入):作用于线程的工作内存中，表示把主内存中read操作得到的值放到工作内存的变量副本中</li><li>Use(使用):作用于工作内存，当JVM在执行过程中遇到一个需要使用一个变量的值时会调用该操作</li><li>Assign(赋值):作用于工作内存，当JVM在执行过程中遇到一个需要给一个变量赋值时会调用该操作</li><li>Store(存储):作用于工作内存，把工作内存中的值传输到主内存中</li><li>Write(写入):作用于主内存，将工作内存中Store得到的值放入主内存的变量中<br>以上八种操作需要遵循以下八种规则：</li><li>不允许Read/Load或者Store/Write单独出现，也就是说不允许出现主内存读取了变量工作内存不接受或者工作内存回写了变量主内存不接受的情况。</li><li>不允许线程在自己的工作内存中执行了Assign操作（修改了变量），而不同步（不回写）到主内存的情况</li><li>工作内存中没有做任何变更的变量不允许会写到主内存</li><li>变量只能在主内存中产生，工作内存中不允许直接使用一个未被初始化的变量</li><li>一个变量同一时刻只能被一个线程加锁</li><li>对变量执行Lock操作，就会清空工作空间中该变量的值</li><li>不允许对没有执行Lock操作的变量执行UnLock操作</li><li>对一个操作执行UnLock之前，必须要把工作空间的值回写到主内存中，也就是要执行Store和Write操作</li></ul><h3 id="Volatile修饰的变量的特殊规则"><a href="#Volatile修饰的变量的特殊规则" class="headerlink" title="Volatile修饰的变量的特殊规则"></a>Volatile修饰的变量的特殊规则</h3><p>假设：T表示一个线程，V/W分别是Volatile关键字修饰的变量，那么在进行Read/Load/Use/Assign/Store/Write操作的时候都将遵循以下原则</p><ul><li>线程T对变量V执行Use操作之前，必须先执行Load操作，同时线程T执行了Load操作过后必须执行Use操作；再依照普通变量的规则（Read/Load操作不能单独出现）：则表示Read/Load/Use三个操作必须是连续的。</li><li>线程T对变量V执行Store操作之前，必须先执行Assign操作，同时线程T执行了Assign操作过后必须执行Store操作；再依照普通变量的规则（Store/Write操作不能单独出现）：则表示Assign/Store/Write三个操作必须连续。</li><li>假设动作A代表线程T对变量V执行的Use或者Assign操作，动作B代表动作A相关联的Load或者Store操作，动作C代表动作B向关联的Read或者Write操作；类似的，动作D代表线程T对变量W执行的Use或者Assign操作，<br>动作E代表动作D相关联的Load或者Store操作，动作F代表动作E向关联的Read或者Write操作；如果A先于D，那么C先于F。也就是说，在同一个线程内部，被Volatile修饰的变量不会被指令重排序。<br>总结：前面了两条规则可以归纳为“<strong>Volatile修饰的变量可以保证对所有线程的可见性</strong>”，第三条可以归纳为“<strong>Volatile修饰的变量禁止指令重排序优化</strong>”</li></ul><h2 id="Volatile关键字"><a href="#Volatile关键字" class="headerlink" title="Volatile关键字"></a>Volatile关键字</h2><p>从上一节中可以得知，Volatile修饰关键字具备了以下两层语义</p><ul><li>Volatile修饰的变量可以保证对所有线程的可见性</li><li>Volatile修饰的变量禁止指令重排序优化</li></ul><h3 id="Volatile保证原子性吗？"><a href="#Volatile保证原子性吗？" class="headerlink" title="Volatile保证原子性吗？"></a>Volatile保证原子性吗？</h3><p>Volatile关键字保证了变量在多个线程下的可见性，但是否保证原子性呢，我们先通过一个例子来分析</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VolatileTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">incr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        num<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        VolatileTest test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VolatileTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    test<span class="token punctuation">.</span><span class="token function">incr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//保证前面的线程都执行完毕</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">activeCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码理想的执行结果为1000*100=100000，但其实结果并不一定是100000，它的结果会小于等于100000，为什么呢？我们来一一分析。<br>我们知道<code>num++</code>不是一个原则操作，它包含三个操作 读取x的值，进行加1操作，写入新的值，也就是说这三个操作有可能被分割，我们来假设一下</p><ol><li>假设某一时刻num的值为100，线程1对num进行自增操作，首先线程1从主内存中读取了num的值，这个时候读入到线程1工作内存的num的值为100，就在此时线程1被阻塞。</li><li>线程2对num进行自增操作，首先线程2从主内存中读取了num的值，这个时候读入到线程2工作内存的值任然为100，然后自增1，然后将101的值刷新到主内存中。</li><li>线程1重新获得了CPU时间片，继续执行，在工作内存中的num值任然为100，在100的基础上执行自增，得到101，最后将101刷新到主内存中。<br>由上面的步骤可以看出，两个线程分别对num的值进行了自增，理论上num的值应该增长了2，但实际上只增长了1。到这里，可能会有疑问，为什么线程2修改了值并且将值刷新到主存中，线程1中工作内存的值没有被失效。<br>这里需要注意的是缓存失效是在读取之前的，这里线程1已经将数据读取到工作内存中了，所以线程1中的数据任然是有效的。<br>由以上可以得出结论，Volatile关键字并不能保证原子性。解决办法是，可以在自增的方法上加上<code>synchronized</code>关键字，或者在该方法中加入Lock块，或者使用JUC包下的原则操作类。分别如下：<br>采用synchronized<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">incr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> num<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>采用Lock<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">incr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>     lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     num<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>     lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>采用AtomicInteger<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">volatile</span> AtomicInteger num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">incr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> num<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="Volatile保证有序性吗？"><a href="#Volatile保证有序性吗？" class="headerlink" title="Volatile保证有序性吗？"></a>Volatile保证有序性吗？</h3><p>前面提到了Volatile修饰的变量禁止指令重排序优化，所以Volatile在一定程度上能保证有序性。Volatile禁止指令重排序有两层意思：</p><ul><li>当程序执行到Volatile变量的读或者写操作时，在其前面操作的更改肯定已经全部执行，且结果对后面的操作可见，在其后面的操作肯定还没有执行。</li><li>在进行指令优化时，不能将在对Volatile变量访问的语句放到其后面执行，也不能把Volatile变量后面的语句放到前面执行。<br>说的不太容易理解，举个例子：<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//{1}</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//{2}</span><span class="token keyword">volatile</span> <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//{3}</span><span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//{4}</span><span class="token keyword">int</span> e <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//{5}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>以上声明了五个变量，只有变量c是Volatile修饰的，那么在进行指令重排序的时候，不会将{3}放到{1}、{2}的前面，也不会将{3}放到{4}、{5}的后面，但是{1}、{2}和{4}、{5}的执行顺序不作任何保证。并且，当执行到<br>语句{3}的时候，{1}、{2}必须是执行完毕了的，且{1}、{2}的执行结果对{3}、{4}、{5}都是可见的。</li></ul><h3 id="Volatile原理和实现机制"><a href="#Volatile原理和实现机制" class="headerlink" title="Volatile原理和实现机制"></a>Volatile原理和实现机制</h3><p>Volatile关键字修饰的变量，在生成的汇编指令中，会多出一个lock前缀指令，lock前缀指令相当于一个内存屏障，该内存屏障有三个功能：</p><ol><li>他保证指令重排序时不会将内存屏障之后的指令放到之前，也不会将之前的指令放到内存屏障之后，即在执行内存屏障这块指令时，其之前的指令已经全部执行完成。</li><li>强制将修改操作立即更新到主内存</li><li>如果是写操作，会导致其他CPU中缓存行失效</li></ol><h2 id="Synchronized关键字"><a href="#Synchronized关键字" class="headerlink" title="Synchronized关键字"></a>Synchronized关键字</h2><p>Synchronized关键字可以作用到成员方法上，也可以作用到静态方法上，也可以作用到一个代码块中，当作用在代码块中时，可以指定锁的范围，分别是类对象和实例对象，当作用到实例方法上时，锁的范围是当前实例对象，<br>也就是this，当作用在静态方法上时，锁的范围为类对象；一个线程能否访问被Synchronized关键字修饰的方法，判断依据在于该方法的锁是否被占用，如果被占用，则不能访问，否则能访问。举个例子：一个类中有多个<br>Synchronized关键字修饰的实例方法，多个线程同时访问这些实例方法，访问顺序是同步进行的，因为使用的锁都是实例对象this。</p><blockquote><p>注意：Synchronized关键字是不能被继承的，也就是说父类的<code>synchronized func()</code>方法在子类中会变成<code>func()</code></p></blockquote><h3 id="Synchronized底层原理"><a href="#Synchronized底层原理" class="headerlink" title="Synchronized底层原理"></a>Synchronized底层原理</h3><p>在Java中，对象被创建于堆内存中，一个对象实例我们可以分为三个部分：对象头、实例数据、对齐填充。对象头主要包含两个部分信息：自身运行时数据（锁状态标志，线程持有锁）也称Mark Word、类型指针（JVM通过该指<br>针来只想该对象属于哪个类的）。实例数据用于存放类的属性数据，包括父类的属性数据。对齐填充用于字节对齐，由于JVM中要求对象起始地址必须是8字节的整数倍。<br>Synchronized的对象锁，其指针指向一个Monitor对象（该对象由C++实现）的起始地址，每个对象都会有个Monitor对象，Monitor对象由ObjectMonitor实现，该对象的C++代码如下：</p><pre class="line-numbers language-C++"><code class="language-C++">//openjdk\hotspot\src\share\vm\runtime\objectMonitor.hppObjectMonitor() {    _header       = NULL;//markOop对象头    _count        = 0;    _waiters      = 0,//等待线程数    _recursions   = 0;//重入次数    _object       = NULL;    _owner        = NULL;//指向获得ObjectMonitor对象的线程或基础锁    _WaitSet      = NULL;//处于wait状态的线程，会被加入到wait set；    _WaitSetLock  = 0 ;    _Responsible  = NULL ;    _succ         = NULL ;    _cxq          = NULL ;    FreeNext      = NULL ;    _EntryList    = NULL ;//处于等待锁block状态的线程，会被加入到entry set；    _SpinFreq     = 0 ;    _SpinClock    = 0 ;    OwnerIsThread = 0 ;// _owner is (Thread *) vs SP/BasicLock    _previous_owner_tid = 0;// 监视器前一个拥有者线程的ID}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从以上代码可以看出该对象有两个队列，_WaitSet和_EntryList，其中_WaitSet用来保存等待锁的线程对象，_EntryList用来保存处于阻塞状态的线程。还有一个_owner，该变量用来标志当前获得锁的线程，当多个线程同时<br>访问一段同步块时，会将其存放到_EntryList中，当一个线程获取了Monitor过后，_owner就会被设置为该线程，同时_count+1，当线程调用wait()方法或者线程顺利执行完毕，就会释放当前持有的Monitor，那么Monitor中的<br>_owner就会被设置为null，同时_count-1，并且将该线程放到_WaitSet中，等待下一次被唤醒。</p><blockquote><p>因为这个锁存在于对象头上，这就是为什么Java中每个对象都可以成功锁的原因</p></blockquote><p>下面我们来看一下，加上Synchronized关键字的方法和没有加上Synchronized关键字的同步代码块所生成的字节码<br>在实例方法上加上Synchronized关键字的字节码</p><pre><code>public synchronized void incr();    descriptor: ()V    flags: ACC_PUBLIC, ACC_SYNCHRONIZED    Code:      stack=3, locals=1, args_size=1         0: aload_0         1: dup         2: getfield      #2                  // Field num:I         5: iconst_1         6: iadd         7: putfield      #2                  // Field num:I        10: return      LineNumberTable:        line 11: 0        line 12: 10      LocalVariableTable:        Start  Length  Slot  Name   Signature            0      11     0  this   Lcom/example/demo/VolatileTest;</code></pre><p>在方法内存加上Synchronized关键字的同步代码块的字节码</p><pre><code>public void incr();    descriptor: ()V    flags: ACC_PUBLIC    Code:      stack=3, locals=3, args_size=1         0: aload_0         1: dup         2: astore_1         3: monitorenter         4: aload_0         5: dup         6: getfield      #2                  // Field num:I         9: iconst_1        10: iadd        11: putfield      #2                  // Field num:I        14: aload_1        15: monitorexit        16: goto          24        19: astore_2        20: aload_1        21: monitorexit        22: aload_2        23: athrow        24: return      Exception table:         from    to  target type             4    16    19   any            19    22    19   any      LineNumberTable:        line 11: 0        line 12: 4        line 13: 14        line 14: 24      LocalVariableTable:        Start  Length  Slot  Name   Signature            0      25     0  this   Lcom/example/demo/VolatileTest;      StackMapTable: number_of_entries = 2        frame_type = 255 /* full_frame */          offset_delta = 19          locals = [ class com/example/demo/VolatileTest, class java/lang/Object ]          stack = [ class java/lang/Throwable ]        frame_type = 250 /* chop */          offset_delta = 4</code></pre><p>从以上可以看出，两种方式生成的字节码是不一样的，一个是生成一个<code>ACC_SYNCHRONIZED</code>标志，另外一个是生成三条指令：<code>monitorenter</code>/<code>monitorexit</code>，其中会生成两条<code>monitorexit</code>指令。下面来分析一下这两条执行<br>会干什么事情：</p><ul><li>monitorenter：在执行该指令时，首先会尝试获取对象锁，也就是上面提到的Monitor对象，如果这个对象没有被锁定或者这个线程已经获得了这个对象锁，那么_owner就会被设置为该线程，同时_count+1。</li><li>monitorexit：该指令与monitorenter指令对应，也就是对象锁的释放，那么_owner就会被设置为null，同时_count-1，并且将线程放入_WaitSet中。<br>以上字节码中出现了两个monitorexit指令，但其实只会被执行一次，第二个monitorexit指令是在出现异常时执行，也就是说，通过Synchronized关键字加锁，当程序出现异常，会自动释放锁。<br>再来看<code>ACC_SYNCHRONIZED</code>标志，通过Synchronized关键字标记到方法上时，并没有monitorenter和monitorexit指令，原因是JVM通过<code>ACC_SYNCHRONIZED</code>标志来标记该方法是一个同步方法，进而执行上面_count+1等等这些操作。</li></ul><h3 id="JVM对Synchronized的优化"><a href="#JVM对Synchronized的优化" class="headerlink" title="JVM对Synchronized的优化"></a>JVM对Synchronized的优化</h3><p>锁的状态有四种：无锁状态、偏向锁、轻量级锁、重量级锁，锁可以从偏向锁升级成轻量级锁，也可以从轻量级锁升级成为重量级锁，锁的升级是单向的。</p><ul><li>自旋锁：线程的阻塞和唤醒需要从用户态切换到内核态，这个操作是很消耗资源的，如果切换的时间间隔非常短，那么我们可以采用循环的方式获得锁，不让出CPU时间片。</li><li>自适应自旋锁：在JDK1.6以后引入了自适应自旋锁，是在自旋锁上面再一次的优化，表示循环的时间不在固定了，而是由前一次在同一个锁上的自旋时间和锁拥有者的状态来决定。</li><li>锁消除：JVM在运行时，对一些代码上要求同步执行，但检查出根本不可能存在共享数据竞争的锁进行清除。避免不必要的资源浪费。</li><li>锁粗化：把多个小锁改成一把大锁</li><li>偏向锁：锁并不只是有多个线程竞争，还有可能同一个线程多次获得，这个时候就出现了偏向锁，获得锁的线程不需要做任何同步操作，这样就节省了不必要的资源损耗。</li><li>轻量级锁：如果偏向锁失败，即获得锁的线程和本次竞争锁的线程不是同一个，偏向锁失败以为着不能避免同步操作，这个时候JVM会将偏向锁升级成为轻量级锁。它的本意是没有多线程竞争的情况下。</li><li>重量级锁：Synchronized是通过Monitor来实现的，而Monitor又是依赖底层操作系统的Mutex Lock来实现的，这个时候操作系统会线程的阻塞和唤醒需要从用户态转换为内核态，这个操作非常耗时，这就是为什么Synchronized<br>耗时的原因，这种依赖操作系统Mutex Lock来实现的锁也称之为重量级锁。</li></ul><h2 id="J-U-C-java-util-concurrent"><a href="#J-U-C-java-util-concurrent" class="headerlink" title="J.U.C(java.util.concurrent)"></a>J.U.C(java.util.concurrent)</h2><h3 id="Java并发的分类"><a href="#Java并发的分类" class="headerlink" title="Java并发的分类"></a>Java并发的分类</h3><p>并发由一下三个方面组成</p><ul><li>并发安全：并发安全也可以分为三个部分，互斥同步，非互斥同步，无同步方案</li><li>并发性能：线程池</li><li>线程协作：并发工具</li></ul><h3 id="CAS-Compare-And-Swap"><a href="#CAS-Compare-And-Swap" class="headerlink" title="CAS(Compare And Swap)"></a>CAS(Compare And Swap)</h3><h3 id="AQS-AbstractQueuedSynchronizer"><a href="#AQS-AbstractQueuedSynchronizer" class="headerlink" title="AQS(AbstractQueuedSynchronizer)"></a>AQS(AbstractQueuedSynchronizer)</h3><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><blockquote><p><a href="https://www.cnblogs.com/dolphin0520/p/3920373.html" target="_blank" rel="noopener">https://www.cnblogs.com/dolphin0520/p/3920373.html</a><br><a href="https://baijiahao.baidu.com/s?id=1612142459503895416&amp;wfr=spider&amp;for=pc&amp;isFailFlag=1" target="_blank" rel="noopener">https://baijiahao.baidu.com/s?id=1612142459503895416&amp;wfr=spider&amp;for=pc&amp;isFailFlag=1</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JMM(Java Memory Model) </tag>
            
            <tag> Volatile </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx入门及实战</title>
      <link href="/2019/12/27/Nginx%E5%85%A5%E9%97%A8%E5%8F%8A%E5%AE%9E%E6%88%98/"/>
      <url>/2019/12/27/Nginx%E5%85%A5%E9%97%A8%E5%8F%8A%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<p>一说到Nginx，想到的就是反向代理，负载均衡，动静分离，这些都只是Nginx的一些模块，也是我们经常在生产环境中使用到的主要模块，其实Nginx远远不止这些模块，他还可以做RTMP推拉流服务器，<br>可以做直播服务器等等，还可以自定义扩展。</p><h2 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h2><ul><li><a href="http://nginx.org/download/nginx-1.17.7.tar.gz" target="_blank" rel="noopener">下载</a></li><li>解压：<code>tar -zxvf nginx-1.17.7.tar.gz</code></li><li><code>./configure {--prefix} {--with-xxx-module}</code>:–prefix是可选的，表示指定编译安装目录，默认/usr/local/nginx。以及安装其他模块使用–with-xxx-module</li><li><code>make &amp;&amp; make install</code></li><li>启动和停止：<code>./nginx</code>/<code>./nginx -s stop</code></li></ul><h3 id="安装问题解决"><a href="#安装问题解决" class="headerlink" title="安装问题解决"></a>安装问题解决</h3><ul><li>问题一<pre class="line-numbers language-shell"><code class="language-shell">[root@localhost nginx-1.16.1]# ./configure checking for OS+ Linux 3.10.0-514.el7.x86_64 x86_64checking for C compiler ... not found<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>./configure: error: C compiler cc is not found</p><pre><code>需要安装gcc，`yum -y install gcc`* 问题二```shell./configure: error: the HTTP rewrite module requires the PCRE library.You can either disable the module by using --without-http_rewrite_moduleoption, or install the PCRE library into the system, or build the PCRE librarystatically from the source with nginx by using --with-pcre=&lt;path&gt; option.</code></pre><p>安装<code>yum install pcre-devel</code></p><ul><li>问题三<pre class="line-numbers language-shell"><code class="language-shell">./configure: error: the HTTP gzip module requires the zlib library.You can either disable the module by using --without-http_gzip_moduleoption, or install the zlib library into the system, or build the zlib librarystatically from the source with nginx by using --with-zlib=<path> option.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>安装<code>yum install zlib-devel</code></li></ul><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>Nginx反向代理既可以是IP+PORT也可以是域名，只需要配置proxy_pass就可以实现反向代理。配置如下：</p><pre><code>server {    listen 80;    server_name localhost;    location / {        proxy_pass http://192.168.1.1:8080;        proxy_set_header Host $host;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;    }}</code></pre><p>proxy_set_header：表示设置HTTP Header信息，因为在后端Servlet容器中无法获取客户端的真实IP，只能获取反向代理的IP，所以我们可以在反向代理这一层做一次转发，将客户端的真实IP转发到Servlet容器。</p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>负载均衡是通过一定的算法分配策略将请求分摊到集群中的各个节点上，使得各个节点并行处理客户端请求，以及故障转移等功能，来达到高可用、高性能的一种手段。在Nginx中，配置负载均衡非常简单，<br>直接将反向代理从原来的IP+PORT或者域名代理到upstream上就可以实现负载均衡，配置如下：</p><pre><code>upstream tomcat {    server 192.168.11.161:8080 max_fails=2 fail_timeout=60s;    server 192.168.11.159:8080;}server {    listen 80;    server_name localhost;    location / {        proxy_pass http://tomcat;        proxy_set_header Host $host;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        proxy_next_upstream error timeout http_500 http_503;        proxy_connect_timeout 60s;        proxy_send_timeout 60s;        proxy_read_timeout 60s;        add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39;;        add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET,POST,DELETE&#39;;        add_header &#39;Aceess-Control-Allow-Header&#39; &#39;Content-Type,*&#39;;    }}</code></pre><p>如上，配置一个upstream名为tomcat，将<code>proxy_pass http://tomcat;</code>即可实现负载均衡。<br>proxy_next_upstream：表示当请求的一台服务器出错时，自动切换到下一个节点继续执行客户端的请求，错误类型可以指定，例如:<code>error timeout http_500 http_503</code>，表示错误、超时、500、503<br>proxy_connect_timeout：用于设置Nginx于upstream server连接的超时时间，当超出该时间范围，则会报错。<br>proxy_send_timeout：向后端写数据的超时时间，两次写操作的时间间隔超过该值，连接会被关闭。<br>proxy_read_timeout：从后端服务器读取数据的超时时间，两次读取操作的时间间隔超过该值，连接会被关闭，如果后端处理逻辑较复杂导致请求响应很慢时可以将此值设置大一些。</p><h3 id="负载均衡策略（算法）"><a href="#负载均衡策略（算法）" class="headerlink" title="负载均衡策略（算法）"></a>负载均衡策略（算法）</h3><p>Nginx有三种负载均衡算法，分别是：</p><ul><li>轮询算法（默认）：将客户端请求轮流分配到集群中的节点，当有节点出现宕机时，Nginx会自动将其剔除。</li><li>ip_hash：根据客户端请求的IP进行hash得到一个值，往后该客户端会永远访问同一个节点，除非客户端更换IP</li><li>权重轮询：在轮询的基础上添加权重。</li></ul><h2 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h2><p>我们可以吧静态资源放到Nginx上，把动态资源放到后端服务器上，这样就可以减少后端服务器的请求，减小了服务器的请求压力。实现动静分离配置如下：</p><pre><code>server {    #...    location / {        #...    }    location ~ .*\.(js|css|png|svg|ico|jpg)$ {        root static-resource;        expires 1d;    }}</code></pre><p>把指定后缀的请求转发到指定静态文件目录中就实现了动静分离，其中<code>static-resource</code>就是静态文件的存放路径。<br>动静分离过后我们可以对静态资源做一些特定的优化，例如：</p><ul><li>静态资源缓存：我们可以通过<code>expires 1d;</code>来指定资源在客户端缓存的过期时间。</li><li>压缩：静态资源包含很多html、css、js、图片、视频等文件，这些文件本身就很大，客户端请求要返回这些资源，可能就会影响整个系统的渲染速度。所以我们可以使用压缩，将资源压缩过后再传输<br>到客户端，在浏览器中解压渲染。配置如下:<pre><code>http {  gzip on;                                                    #开启压缩功能  gzip_min_length 5k;                                         #达到最小压缩的条件  gzip_comp_level 3;                                          #压缩级别，该值越大压缩率越高，性能损耗越大，范围[1-9]  gzip_types application/javascript image/jpeg image/svg+xml; #压缩的资源mine-type  gzip_buffers 4 32k;                                         #设置压缩申请内存的大小，作用是按照指定大小的倍数申请内存，4 32k表示按照原始数据大小以32k单位的4倍申请内存  gzip_vary on;                                               #是否传输压缩标志给客户端，避免有的浏览器不支持压缩而造成的资源浪费。}</code></pre></li></ul><h2 id="防盗链"><a href="#防盗链" class="headerlink" title="防盗链"></a>防盗链</h2><p>有的时候我们并不希望静态资源被其他网站使用，例如：图片、视频，那么为这些资源配置防盗链是非常有必要的。防盗链的原理是判断HTTP请求头中的refer，如果refer的值不在我们允许的范围内<br>则进行其他操作。配置如下：</p><pre><code>location ~ .*\.(js|css|png|svg|ico|jpg)$ {    valid_referers none blocked 192.168.1.1 easyjava.xyz;    if ($invalid_referer) {        return 404;    }    root static-resource;    expires 1d;}</code></pre><h2 id="跨域访问"><a href="#跨域访问" class="headerlink" title="跨域访问"></a>跨域访问</h2><p>如果客户端和服务器端的协议、域名、端口、子域名不同，那么所有的请求都是跨域的，是浏览器对跨域资源访问的一种限制手段。我们可以在应用层面去解决跨域问题，也可以在代理层面（Nginx）<br>来解决跨域访问问题，配置也是非常简单：</p><pre><code>location / {    #...    add_header &#39;Access-Control-Allow-Origin&#39; &#39;*&#39;;    add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET,POST,DELETE&#39;;    add_header &#39;Aceess-Control-Allow-Header&#39; &#39;Content-Type,*&#39;;}</code></pre><h2 id="Nginx进程模型"><a href="#Nginx进程模型" class="headerlink" title="Nginx进程模型"></a>Nginx进程模型</h2><p>Nginx采用多进程单线程的方式来运行的，在Nginx中有一个Master进程和多个Worker进程，Master进程管理着多个Worker进程，Worker进程主要处理客户端请求，Master进程Worker进程是通过共享内存的方式<br>和信号量进行通信的，我们可以再ngixn.conf配置文件中配置nginx的Worker进程数和每个Worker进程的最大连接数，通过这两个配置，就可以计算出当前这台Nginx节点就处理最大的连接数，<br>最大连接数 = Worker进程数 * 单个Worker最大连接数。配置如下：</p><pre><code>worker_processes 1;         #尽量设置成CPU的核心数events { worker_connections 1024;   #理论上 processes* connections}</code></pre><h2 id="Nginx高可用方案"><a href="#Nginx高可用方案" class="headerlink" title="Nginx高可用方案"></a>Nginx高可用方案</h2><p>Nginx作为我们系统的入口，所以Nginx本身的可用性也是我们首先考虑的问题。<br>//TODO</p><h2 id="OpenResty"><a href="#OpenResty" class="headerlink" title="OpenResty"></a>OpenResty</h2><p>OpenResty是基于Nginx内核新增了Lua支持的扩展，便于在Nginx的基础上编写Lua脚本达到用户自定义的功能实现，使之更加健壮。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>OpenResty是在Nginx上做的扩展，所以实际上也是一个Nginx，安装方式和Nginx一致。</p><h3 id="Nginx执行阶段和OpenResty"><a href="#Nginx执行阶段和OpenResty" class="headerlink" title="Nginx执行阶段和OpenResty"></a>Nginx执行阶段和OpenResty</h3><p>Nginx把一次请求划分了11个阶段，各个阶段按照顺序执行，顺序是post-read、server-rewrite、find-config、rewrite、post-rewrite、preaccess、access、post-access、try-files、content、log，下面来一一介绍一下这些<br>阶段都是干啥用的，并且在什么时候被调用。</p><ul><li>post-read：Nginx读取并解析完请求头过后立即执行该阶段。</li><li>server-rewrite：URI和Location匹配前，修改URI，可用于重定向，该阶段执行位于Server语句块内，Location块外</li><li>find-config：根据URI匹配Location，该阶段可能会执行多次</li><li>rewrite：匹配到Location过后的URI重写，该阶段可能执行多次</li><li>post-rewrite：检查上个阶段是否有URI重写，根据重写的URI跳转到合适的阶段</li><li>preaccess：访问权限控制的前一阶段，一般用于访问控制</li><li>access：访问权限控制阶段，判断该请求是否允许进入Nginx服务器</li><li>post-access：权限控制的后一阶段，根据前一阶段的执行结果进行相应的处理</li><li>try-files：为访问静态文件资源设定，如果没有配置try-files指令，该阶段会被跳过</li><li>content：处理HTTP请求内容的阶段，该阶段产生响应，并返回到客户端</li><li>log：日志记录阶段，记录请求访问日志<br>OpenResty也有如下阶段</li><li>init_by_lua：Master进程加载conf配置文件时执行该阶段，一般用来注册全局变量和预加载Lua库</li><li>init_worker_by_lua：各个worker进程启动时会执行该阶段，可以用来做健康检查</li><li>ssl_certificate_by_lua：在Nginx和下游服务器进行SSL握手之前执行该阶段</li><li>set_by_lua: 流程分之处理判断变量初始化</li><li>rewrite_by_lua: 转发、重定向、缓存等功能(例如特定请求代理到外网)</li><li>access_by_lua: IP准入、接口权限等情况集中处理(例如配合iptable完成简单防火墙)</li><li>content_by_lua: 内容生成</li><li>balancer_by_lua：实现动态负载均衡</li><li>header_filter_by_lua: 应答HTTP过滤处理(例如添加头部信息)</li><li>body_filter_by_lua: 应答BODY过滤处理(例如完成应答内容统一成大写)</li><li>log_by_lua: 回话完成后本地异步完成日志记录(日志可以记录在本地，还可以同步到其他机器)</li></ul>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> 服务器 </tag>
            
            <tag> 负载均衡 </tag>
            
            <tag> 反向代理 </tag>
            
            <tag> Openresty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis原理及实战</title>
      <link href="/2019/12/23/Redis%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E6%88%98/"/>
      <url>/2019/12/23/Redis%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<p>相信大家对Redis并不陌生，我们在做数据缓存、分布式锁、分布式事务等业务中经常会见到Redis的身影，今天带大家来深入了解一下Redis的原理以及在实际应用场景中的使用。</p><h2 id="初识Redis"><a href="#初识Redis" class="headerlink" title="初识Redis"></a>初识Redis</h2><p>Redis可以看成是NoSQL数据库，也可以看成是缓存中间件，Redis缺省有16（分别是0-15）个库，每个库中包含多个key，每个key对应的数据类型有五种，分别是String、List、Hash、Set、SortSet</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li><a href="http://download.redis.io/releases/redis-5.0.7.tar.gz" target="_blank" rel="noopener">下载</a> 注意：第二位数字为偶数则代表稳定版，奇数为非稳定版</li><li>解压：<code>tar -zxvf redis-5.0.7.tar.gz</code></li><li>进入Redis目录：<code>cd redis-5.0.7</code></li><li>编译：<code>make</code> 注意：这里或许会报错，根据提示安装依赖的库即可解决，例如gcc</li><li>测试编译：<code>make test</code></li><li>安装：<code>make install {PREFIX=/path}</code></li></ul><h2 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h2><p>Redis支持五种数据类型，分别是String、List、Hash、Set、SortSet，五种类型的特性如下：</p><h3 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String(字符串)"></a>String(字符串)</h3><p>字符串是Redis中最基本的数据类型，它能存储任何字符数据，例如JSON，Base64编码的图片等，String最大支持存储512M的字符数据。</p><h4 id="内部数据结构"><a href="#内部数据结构" class="headerlink" title="内部数据结构"></a>内部数据结构</h4><p>String支持三种数据类型，分别是int、浮点数据和字符数据，int数据类型使用int存储，浮点数据和字符数据使用SDS（Simple Dynamic String）存储，SDS是在C的标准字符串结构上作了封装，Redis3.2<br>有五种sdshdr类型，目的是根据存储的字符串长度选择不同的sdshdr，不同的sdshdr占用的内存大小各有不同，这样就达到了节省内存开销的目的。</p><h3 id="List-列表"><a href="#List-列表" class="headerlink" title="List(列表)"></a>List(列表)</h3><p>List列表是一个有序的字符串列表，由于List底层采用的是双向链表的数据结构，所以不管List列表中的数据有多大，向列表的两端存取数据都是很快的，常用操作也是向列表的两端存取数据。</p><h4 id="内部数据结构-1"><a href="#内部数据结构-1" class="headerlink" title="内部数据结构"></a>内部数据结构</h4><p>在3.2之前，List中元素个数较少或者单个元素长度较小的时候，采用ZipList数据接口存储数据，当List中元素个数或者单个元素长度较大的时候，就会采用LinkedList存储。这两种数据结构各有<br>优缺点，LinkedList在两端数据的存储复杂度较低，但是内存开销比较大；ZipList内存开销比较小，但是插入和删除需要频繁申请内存。<br>在3.2之后，Redis在数据存储结构上做了优化，采用QuickList数据结构，QuickList其实是LinkedList和ZipList数据结构的整合，QuickList任然是一个LinkedList，只是每个元素都是一个ZipList，<br>每个元素都能存储多个数据元素；即QuickList是多个ZipList组成的LinkedList</p><h3 id="Hash-可以认为是Java中的Map"><a href="#Hash-可以认为是Java中的Map" class="headerlink" title="Hash(可以认为是Java中的Map)"></a>Hash(可以认为是Java中的Map)</h3><p>Hash可以看成是Java中的Map，由一个Sting类型的key和多个String类型的field和value组成。适合存储对象。</p><h4 id="内部数据结构-2"><a href="#内部数据结构-2" class="headerlink" title="内部数据结构"></a>内部数据结构</h4><p>Hash底层数据结构可以使用ZipList和HashTable，当Hash中field和value的字符串长度都小于64字节，一个Hash的field和value的个数小于512个时，使用ZipList数据结构存储</p><h3 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set(集合)"></a>Set(集合)</h3><p>Set存储一个无序不能重复的元素集合，最多可以存储232-1个元素，集合和列表的最大区别就是唯一性和有序性。</p><h4 id="内部数据结构-3"><a href="#内部数据结构-3" class="headerlink" title="内部数据结构"></a>内部数据结构</h4><p>Set底层数据结构有IntSet和HashTable，当所有元素是int类型时，这使用IntSet，否则使用HashTable（只用Key，Value为null）</p><h3 id="SortSet-有序集合"><a href="#SortSet-有序集合" class="headerlink" title="SortSet(有序集合)"></a>SortSet(有序集合)</h3><p>SortSet和Set的区别就是增加了排序功能，在集合的基础上，有序集合为集合中的每个元素绑定了一个score（分数）。有序集合中的元素和集合一样是唯一的，但是元素的score是可以重复的。<br>我们可以通过score进行排序，查找，删除等操作。</p><h4 id="内部数据结构-4"><a href="#内部数据结构-4" class="headerlink" title="内部数据结构"></a>内部数据结构</h4><p>SortSet采用ZipList或者SkipList+HashTable数据结构存储数据。</p><h2 id="Redis过期时间"><a href="#Redis过期时间" class="headerlink" title="Redis过期时间"></a>Redis过期时间</h2><p>Redis中可以为一个key设置一个过期时间，当设置了过期时间的key到期过后会被删除。<br>在Redis中，为某个key设置过期时间有三种方式：</p><ol><li><code>EXPIRE key seconds</code>:为key设置过期时间，单位为妙，返回值1表示设置成功，0表示失败（例如：键不存在）。</li><li><code>PEXPIRE key millis</code>:为key设置过期时间，单位为毫秒</li><li><code>setex key seconds value</code>:该方式为字符串独有，设置key的过期时间，单位为秒<br>查看一个key的有效期使用<code>TTL key</code>或者<code>PTTL key</code>，两种方式分别对应<code>EXPIRE</code>和<code>PEXPIRE</code>两种方式设置的过期时间。如果<code>TTL</code>或者<code>PTTL</code>返回-2，则表示键不存在，-1则表示没有设置过期时间，其他数字<br>则表示过期剩余时间。<br>如果想让某个设置了过期时间的key恢复成持久的key，可以使用<code>PERSIST key</code>，成功返回1，失败返回0.</li></ol><h3 id="过期删除原理"><a href="#过期删除原理" class="headerlink" title="过期删除原理"></a>过期删除原理</h3><p>在Redis中，对于已经过期的key的删除有两种方式，如下：</p><ol><li>积极方式：采用随机抽取算法，周期性的对已经设置了过期时间的key随机抽取一批key，将已经过期的key进行删除，该方式有一个缺陷，并不能确保所有过期的key被删除。具体流程如下：<ol><li>随机抽取20个带有timeout的key</li><li>将已经过期的key进行删除</li><li>如果被删除（已过期）的key超过抽取总数的25%（5个），则重复执行该操作</li></ol></li><li>消极方式：当key被访问的时候判断是否过期，如果过期则删除它，该方式有一个缺陷，对于没有被查询到的已经过期的key，会常住内存。<br>Redis采用以上两种过期删除方式来互补，达到过期key的删除逻辑。</li></ol><h2 id="发布-订阅（publish-subscribe）"><a href="#发布-订阅（publish-subscribe）" class="headerlink" title="发布/订阅（publish/subscribe）"></a>发布/订阅（publish/subscribe）</h2><p>Redis提供发布/订阅的功能，可以在多个进程之间进行消息通信。<code>PUBLISH channel.1 message</code>表示向channel.1发送了一条消息，内容为message，该命令返回一个数值，表示订阅了当前channel<br>的订阅者数量，当返回0的时候表示该channel没有订阅者；订阅者使用<code>SUBSCRIBE channel.1 channel.2 ...</code>订阅channel.1，一个channel可以有多个订阅者，一个消费者也可以订阅多个消息，当发送者发送一条<br>详细到一个channel，该channel中的所有订阅者都会受到该条消息。需要注意的是：发送到channel中的消息不会持久化，也就是说，订阅者只能收到订阅过后的消息，订阅之前该channel所产生的消息不能收到。<br>channel可以分为两类，普通的channel和Pattern Channel（规则匹配），例如：现在有两个channel，分别是普通channel <code>abc</code>和Pattern Channel <code>*bc</code>，发送者向abc中发送一条消息<code>PUBLISH abc hello</code>,<br>首先<code>abc</code>这个channel能收到一条消息hello，<code>*bc</code>也能匹配到abc这个channel，所以<code>*bc</code>也能收到这条消息hello。</p><h2 id="Redis数据的持久化"><a href="#Redis数据的持久化" class="headerlink" title="Redis数据的持久化"></a>Redis数据的持久化</h2><p>在Redis中，数据的持久化有两种方式</p><ul><li>RDB：Fork一个子进程根据配置的规则定时的将内存中的数据写入到磁盘中。</li><li>AOF(Append Only File)：每次执行过后将命令追加到AOF文件中，类似于MySQL的binlog。</li></ul><h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><p>当符合RDB持久化条件时，Redis会Fork和主进程一样的子进程，先将内存中的所有数据写入到一个临时文件中，当内存中的所有数据都写入完毕过后，再将之前的备份文件替换。该方式的缺点是最后一次持久化<br>过后的数据有可能会丢失，也就是说，两次数据的持久化间隔产生的数据有可能丢失。<br>什么叫符合RDB持久化条件呢？</p><ul><li>当满足配置文件的规则时：在redis.conf文件中配置<code>save 900 1</code>,<code>save 300 10</code>,<code>save 60 10000</code>，以上配置，save后面的第一个参数表示时间（单位秒），第二个表示键的个数，并且满足以上任意<br>一个配置都会执行，以上配置表示的意思就是：当900秒内有一个键发送变动或者300秒内有10个键发生变动或者60秒内有10000个键发生变动都会触发RDB快照。</li><li>客户端发送了SAVE或者BGSAVE命令：当我们需要对Redis服务进行重启的时候，我们可以操作SAVE或者BGSAVE命令手动执行RDB快照，SAVE和BGSAVE命令的区别在于，一个是同步执行，一个是异步执行，<br>同步执行会阻塞其他客户端的请求，而BGSAVE则不会阻塞。我们还可以通过LASTSAVE命令来查看最后一次执行RDB快照的时间。</li><li>客户端发送了FLUSHALL命令：该操作依赖配置规则，如果没有配置RDB的执行规则，该命令也不会触发RDB快照的执行。</li><li>执行复制（Replication）：该操作一般指在主从模式下，Redis会在复制初始时执行RDB快照。</li></ul><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p>当我们的业务需求对Redis的使用不限于缓存时，可能会使用Redis存储一些比较重要的数据，这个时候我们可以开启AOF来降低RDB持久化方式对内存数据的丢失，当然，开启AOF对Redis对外提供服务的性能<br>是有一定的影响的，但是这种影响一般能接受，解决办法可以使用一些写入性能较高的磁盘。默认情况下，Redis并没有开启AOF持久化方式，我们可以在配置文件中配置AOF是否开启。<code>appendonly yes</code>将<br>appendonly属性值改为yes，则表示开启AOF持久化。还可以指定AOF持久化到磁盘的文件名称<code>appendfilename &quot;appendonly.aof&quot;</code>。<br>查看appendonly.aof文件，我们可以发现，里面保存了客户端操作Redis的所有事务操作（增删改）命令，但其实有的时候我们对Redis的操作是针对同一个key的，也就是说，其实真正有用的数据是最新<br>存在于内存中的数据，而AOF持久化文件则保存了各个key的变动轨迹，有很多命令轨迹是没有用的，所以这个时候需要对这样一个问题进行优化。<br>Redis也考虑到了这一点，我们可以通过配置的方式来解决这一问题，在redis.conf配置文件中配置<code>auto-aof-rewrite-percentage 100</code>和<code>auto-aof-rewrite-min-size 64mb</code>。</p><ul><li><code>auto-aof-rewrite-percentage 100</code>:表示当前AOF文件的大小超过上一次重写AOF文件大小的百分之多少时会再次执行重写，如果之前没有重写过，则以启动时AOF文件的大小为准。</li><li><code>auto-aof-rewrite-min-size 64mb</code>:表示限制允许重写最小AOF文件的大小。<br>当然我们也可以通过手动执行<code>BGREWRITEAOF</code>命令的方式让AOF文件重写。<br>AOF方式的数据恢复会一个一个将AOF文件中的命令在Redis服务器上执行，性能上会比RDB方式慢。</li></ul><h4 id="AOF重写原理"><a href="#AOF重写原理" class="headerlink" title="AOF重写原理"></a>AOF重写原理</h4><p>同样的，为了不影响对外提供服务，AOF重写时主进程会Fork一个子进程来执行，该操作并不是和之前AOF追加的方式，而是类似于RDB的方式，将内存中的数据遍历出来，然后解析成set命令保存到AOF文件中，<br>在这期间，由于Redis还持续对外提供服务，那么在期间客户端发送的操作执行该如何保证数据同步呢，Redis的解决方案是在执行AOF重写的过程中，主进程接受到的所有客户端的事务操作会缓存到<br><code>aof_rewrite_buf</code>缓存（单独开辟一块内存空间来存储执行AOF重写期间收到的客户端命令）中，当重写操作执行完成过后，在将<code>aof_rewrite_buf</code>缓存中将所有命令追加到重写过后的文件中，<br>当然这个文件也是一个临时文件，当以上操作都执行完毕过后，Redis会把之前旧的AOF文件替换，这样做的好处在于，就算在AOF重写时失败了，也不会影响之前已经持久化的AOF文件。</p><h2 id="Redis的内存回收策略"><a href="#Redis的内存回收策略" class="headerlink" title="Redis的内存回收策略"></a>Redis的内存回收策略</h2><p>内存是有限且昂贵的，Redis作为一个内存缓存中间件，必须要考虑如何合理有效的使用内存空间。例如：当内存不足时，如何保证Redis程序的正常运行。Redis提供多种内存回收策略，当内存不足时，Redis<br>为了保证持续的对外提供服务，根据不同的策略淘汰一些对象，来达到Redis的可靠性。那么Redis有哪些淘汰策略？</p><ul><li>allkeys-lru:从数据集中挑选最近最少使用的key淘汰，该方式适用于缓冲中的数据都是热点数据</li><li>allkeys-random:随机选择一些key进行淘汰，该方式适用于如果我们应用对缓冲key访问的概率相等</li><li>volatile-lru:从已经设置了过期时间的数据集中挑选最近最少使用的key进行淘汰</li><li>volatile-random:从已经设置了过期时间的数据集中随机挑选一些key进行淘汰</li><li>volatile-ttl:从已经设置了过期时间的数据集中选择快要过期的key进行淘汰<br>注意：Redis中的LRU算法并不是真正意义上的LRU算法，是采用抽样的LRU算法，在一定程度上接近真正LRU算法。</li></ul><h2 id="单线程的Redis在性能上为什么这么突出"><a href="#单线程的Redis在性能上为什么这么突出" class="headerlink" title="单线程的Redis在性能上为什么这么突出"></a>单线程的Redis在性能上为什么这么突出</h2><p>首先来说为什么使用单线程，我们知道多线程主要是对CPU资源的最大化使用，而Redis的性能瓶颈并不在CPU，而是在于内存和网络。为了在单线程模式下性能达到更高，Redis采用IO多路复用的解决方案<br>来解决Redis在单线程下的性能问题。</p><h3 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h3><p>//TODO</p><h2 id="在Redis中使用Lua脚本"><a href="#在Redis中使用Lua脚本" class="headerlink" title="在Redis中使用Lua脚本"></a>在Redis中使用Lua脚本</h2><p>在客户端使用Redis会面临很多问题，例如：原子性问题、性能问题等</p><ul><li>原子性问题：Redis作为数据服务器，多个客户端连接到Redis上，这个时候多个客户端发送的命令可能会因为网络或者其他元素导致Redis服务器收到的命令顺序会被打乱，这样就造成了客户端发送的一批<br>命令没有顺序性的执行，导致数据错乱。</li><li>性能问题：客户端执行一段逻辑可能需要多次访问Redis服务器，这期间的多次网络请求就会成为Redis性能的瓶颈。<br>为了解决以上问题，Redis内嵌了对Lua脚本的支持，客户端可以通过Lua脚本发送一批Redis命令到Redis服务器，这一操作，既解决了Redis的原子性问题又解决了性能问题。使用Lua脚本的好处：</li></ul><ol><li>减少网络开销，可以吧多个Redis命令放到一个Lua脚本中执行</li><li>原子操作：Redis会叫这个Lua脚本作为一个整体执行，中间不会接受客户端的其他请求。</li><li>复用性：Redis可以把一个Lua脚本保存到服务器中，其他客户端都可以使用该脚本。</li></ol><h3 id="在Lua脚本中调用Redis命令"><a href="#在Lua脚本中调用Redis命令" class="headerlink" title="在Lua脚本中调用Redis命令"></a>在Lua脚本中调用Redis命令</h3><pre><code>redis.call(&quot;set&quot;,&quot;key&quot;,&quot;value&quot;)local val = redis.call(&quot;get&quot;,&quot;key&quot;)</code></pre><p>以上脚本是在Lua脚本中调用Redis命令，并且返回结果到Lua脚本中，那么在开发场景中，Lua脚本其实也可以看成是我们封装的一个带有逻辑性的Redis命令，那么是Redis命令就一定会有返回值，应该任何<br>从Lua脚本中获取返回值呢，也就是执行完Lua脚本过后，得到执行结果，其实可以通过在Lua脚本中通过<code>return</code>关键字将结果返回，如果没有<code>return</code>，则默认返回nil。<br>PS:定义一个lua脚本用于设置一个字符串类型的key</p><pre><code># demo.luareturn redis.call(&quot;set&quot;,KEYS[1],ARGS[1])</code></pre><p>执行lua脚本，使用<code>EVAL demo.lua 1 key value</code>，其中1表示一个key，也就是1后面的多少个参数作为key会被放到KEYS变量中，其余的参数都会放到ARGS中。<br>使用Lua脚本可以将一系列的Redis命令封装在脚本中，减少了多次请求网络的开销和原子性问题，但其实当客户端发送一次Lua脚本的时候，Lua脚本本身比较大，对网络开销也很大，所以我们可以将<br>Lua脚本缓存到Redis中并生成SHA1摘要，客户端只需要发送摘要就可以代替对应的Lua脚本。操作命令如下：</p><pre><code>script load demo.luaeavlsha sha摘要 0</code></pre><h2 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis集群</h2><p>在日常开发过程中，我们使用任何中间件都一定会考虑其单点问题，都会使用集群的方式来达到中间件本身的高可用。</p><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><p>Redis支持一主多从的高可用方案，就是一个主节点对应多个从节点，主节点能处理客户端的读写操作，而从节点则只能接受读操作，当主节点出现宕机不可用等情况时，从节点可以升级成为主节点持续<br>对外提供服务。那么主节点和从节点就一定会有数据同步的过程，这个过程是在当主节点中数据发生变更时会触发，该操作是异步的，即数据同步过程中不会影响主节点对外提供服务。<br>实现Redis主从复制也是很简单的，只需要在从节点的redis.conf配置文件中增加配置<code>slaveof masterIp masterPort</code>并且允许所有IP访问（注释掉bindip）即可，主节点不需要修改任何配置。<br>启动主从节点过后，可以通过<code>info replication</code>查看集群状态。</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><ul><li><p>全量复制：全量复制一般发生在初始化过程中，步骤如下：</p><ol><li>从节点启动连接到主节点过后，向主节点发送SYNC命令</li><li>主节点收到SYNC命令过后，执行BGSAVE命令进行RDB快照，并且将从现在开始收到的客户端的增删改操作命令保存到缓冲区中</li><li>主节点执行完BGSAVE命令过后将生成的RDB发送给从节点，发送期间继续保存主节点执行的命令</li><li>从节点收到RDB文件过后，丢弃旧的数据，从RDB文件中恢复数据</li><li>主节点在发送完快照文件过后向从节点发送缓冲区的操作命令</li><li>从节点收到主节点的操作命令过后执行<br>当完成以上操作过后Redis主从的初始化就完成了，从节点这个时候就可以接受客户端发送的读请求了。<br>Redis中主从复制其实是利用RDB快照的方式，然而使用该方式会存在一些问题，例如：<ol><li>当Master为开启RDB快照时，主从复制的初始化任然会执行RDB快照，生成一个文件到响应目录中，当Master下次启动时，会根据这个RDB文件进行数据恢复，由于快照生成的时间可以是任何时间点的<br>所有就会造成数据问题。</li><li>当硬盘性能本身很低时，可能会造成主节点的性能瓶颈<br>为了解决以上问题，Redis2.8.18版本以后，提供了无硬盘复制，也就是说不会生成RDB文件，直接发送数据。我们可以通过<code>repl-diskless-sync yes</code>配置来开启该功能。</li></ol></li></ol></li><li><p>增量复制：增量复制是指当主节点数据发生变更时，主节点将接收到的客户端发送的命令原封不动的发送给从节点，从节点收到主节点发送的命令过后执行来达到数据的同步。</p></li></ul><h4 id="哨兵机制"><a href="#哨兵机制" class="headerlink" title="哨兵机制"></a>哨兵机制</h4><p>前面说到了当Redis集群中的主节点宕机或者不可用时，需要从其他从节点中选举一个作为主节点继续对外提供服务，那么谁去选举Master呢，在Redis中提供了一个角色来专门做Master故障切换和选举。<br>这就是哨兵。在Redis中，哨兵主要干两件事情，一是监控Master和Slave节点是否正常运行，二是当Master出现宕机不可用时，从从节点中选举一个节点作为Master节点。哨兵是一个独立的进程，监控着<br>集群中的Master节点，通过Master节点，哨兵可以找到该集群中的其他从节点，进而监控着整个集群中的所有主从节点。</p><p>虽然这一架构解决了Redis集群中故障切换的问题，但是有引发了另外一个问题，就是哨兵作为集群中故障切换的关键角色，哨兵的单点问题也需要解决。所以，这个时候的架构应该改进为，主从集群和哨兵集群，<br>来达到整个Redis服务集群的高可用。哨兵集群中的所有哨兵节点是相互感知的，原理大概是：所有哨兵节点都监控同一个Master节点，并且订阅同一个channel（名为 channel:sentinel:hello），<br>新加入的哨兵节点会向该channel中发送一条消息（包含自身信息），新加入的哨兵节点和其他哨兵节点建立一个长连接。</p><p>哨兵节点会定期向Master发送心跳包来判断Master节点是否存货，一旦发现Master没有正确相应，哨兵会将该Master节点状态设置为“主观不可用”，然后把这个状态发送给其他哨兵节点进行确认，<br>如果确认的节点超过配置的“quorum”值时，则会认为Master是客观不可用。接着就会进入Master选举流程。这个时候又会出现一个问题，哨兵是一个集群，具体的由哪一个哨兵来执行该操作呢，<br>这里就涉及到了领头哨兵的选举，这里其实使用是Raft算法，具体流程如下：</p><ol><li>发现主库客观下线的哨兵节点（这里称为A）向每个哨兵节点发送命令要求对方选举自己为领头哨兵（leader）</li><li>如果目标哨兵没有选举过其他人，则同意将A选举为领头哨兵</li><li>如果A发现有超过半数且超过quorum参数值的哨兵节点同意选自己成为领头哨兵，则A哨兵成功选举为领头哨兵</li><li>当有多个哨兵节点同时参与领头哨兵选举时，出现没有任何节点当选可能，此时每个参选节点等待一个随机时间进行下一轮选举，直到选出领头哨兵</li></ol><h4 id="哨兵的配置实现"><a href="#哨兵的配置实现" class="headerlink" title="哨兵的配置实现"></a>哨兵的配置实现</h4><p>在运行哨兵节点的服务器上新建一个sentinel.conf文件，添加以下属性：</p><pre><code>port 6040sentinel monitor mymaster 192.168.1.1 6379 1            # name为自定义master名称，1表示最少多少个哨兵节点同意才能执行后面的操作sentinel down-after-milliseconds mymaster 5000          # 表示如果5s内mymaster没响应，就认为SDOWNsentinel failover-timeout mymaster 15000                # 表示如果15秒后,mysater仍没活过来，则启动failover，从剩下的slave中选一个升级为master</code></pre><p>启动哨兵的两种方式<code>./redis-server.sh /path/sentinel.conf --sentinel</code>/<code>./redis-sentinel /path/sentinel.conf</code></p><h3 id="Redis-Cluster"><a href="#Redis-Cluster" class="headerlink" title="Redis-Cluster"></a>Redis-Cluster</h3><p>//TODO</p><h2 id="Redis缓存及数据一致性的问题"><a href="#Redis缓存及数据一致性的问题" class="headerlink" title="Redis缓存及数据一致性的问题"></a>Redis缓存及数据一致性的问题</h2><p>Redis缓存和数据库在事务上是不能达到统一的，那么我们如何保证最终一致性。</p><ul><li>先操作缓存还是先操作数据库？<br>答：如果我们使用缓存失效这种方式来代替缓存数据的更新，那么应该先更新数据库再失效缓存。如果使用更新缓存的方式，我们需要根据业务场景来权衡。</li><li>更新缓存还是让缓存失效？<br>答：如果更新缓存的代价较小，可以更新缓存，如果更新缓存的代价较大，我们可以直接将缓存失效，下一次访问时缓存未命中，则会自动从数据库中获取数据并且将其缓存</li></ul><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p>当大规模的缓存数据同时失效或者说缓存集群不可用时，大量的客户端请求直接性的对DB层造成了重大的冲击，最终导致整个系统瘫痪，这种现象称之为缓存雪崩。那么面对这一现象应该考虑的解决方式如下：</p><ol><li>当缓存中未命中客户端想要的数据，则通过加锁形成排队的方式访问数据库，避免同时并发的访问底层存储系统带来的重大冲击。</li><li>避免大批量缓存数据同时失效，将缓存过期时间点分散。</li><li>保证缓存服务的高可用。</li></ol><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p>当客户端查询一个不存在的数据，缓存和数据库都不会命中，又由于数据库中没有数据，所以不会被缓存。由于底层存储系统往往不具备高并发性，频繁并发的穿透可能会导致存储系统宕机。对于这一现象<br>的解决思路如下：</p><ol><li>将不存在的key也缓存到缓存中</li><li>将key按照规则命名，将不符合规则的key过滤掉</li><li>采用布隆过滤器的方式来判断当前查询的key是否存在于缓存当中，如果不存在，则过滤掉。</li></ol><h3 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h3><p>主要作用是判断一个元素是否存在于集合中，因为它是一个概率算法，所以会存在误差。它的优点在于空间效率和查询时间都比其他算法快。<br>例如：当传入一个元素，结果表示其存在但有可能不存在，但是绝对不会出现结果表示不存在的但实际存在。也就是说，布隆过滤器判断一个元素不存在则绝对不存在，判断一个元素存在则会出现误差。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Jedis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka原理分析</title>
      <link href="/2019/12/12/Kafka%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
      <url>/2019/12/12/Kafka%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>我们都知道Kafka具有很高的吞吐量、数据分片、冗余和容错等优点，一般用于用户行为追踪以及分布式系统日志收集等场景，那么Kafka是如何做到这些优点的呢，今天就让我们来一一分析。</p><h2 id="Kafka入门"><a href="#Kafka入门" class="headerlink" title="Kafka入门"></a>Kafka入门</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li>点击<a href="http://mirror.bit.edu.cn/apache/kafka/2.3.1/kafka_2.11-2.3.1.tgz" target="_blank" rel="noopener">下载</a></li><li>解压:<code>tar -zxvf kafka_2.11-2.3.1.tgz</code></li><li>启动zookeeper:<code>sh ${zookeeperDir}/bin/zkServer.sh start</code>，zookeeper集群则需要将集群中所有节点启动</li><li>配置config目录下的server.properties中:<code>zookeeper.connect=192.168.3.224:2181</code></li><li>启动/停止:<code>sh kafka-server-start.sh -daemon ../config/server.properties</code>/<code>sh kafka-server-stop.sh ../config/server.properties</code></li></ol><h3 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h3><p>配置config目录下server.properties文件</p><ol><li>将<code>broker.id</code>属性配置为当前节点id，集群中的所有节点id不能相同，例如<code>broker.id=0/1/2...</code></li><li>将<code>advertised.listeners</code>属性改为当前节点的主机地址，例如<code>advertised.listeners=PLAINTEXT://192.168.3.224:9092</code><br>这样，当<code>Broker</code>启动的时候，会向zookeeper注册自己的主机及端口，其他<code>Broker</code>就可以通过ip和端口来连接</li></ol><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="命令行操作"><a href="#命令行操作" class="headerlink" title="命令行操作"></a>命令行操作</h3><ul><li>创建Topic:<code>sh kafka-topics.sh --create --zookeeper 192.168.3.224:2181 --replication-factor 1 --partitions 1 --topic test</code></li><li>列出所有Topic:<code>sh kafka-topics.sh --list --zookeeper 192.168.3.224:2181</code></li><li>查看Topic详情:<code>sh kafka-topics.sh --describe --zookeeper localhost:2181 --topic test</code><pre class="line-numbers language-shell"><code class="language-shell">[root@MiWiFi-R3L-srv bin]# sh kafka-topics.sh --describe --zookeeper localhost:2181 --topic testTopic:test    PartitionCount:1    ReplicationFactor:1    Configs:  Topic: test    Partition: 0    Leader: 0    Replicas: 0    Isr: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>发送消息:<code>sh kafka-console-producer.sh --broker-list 192.168.3.224:9092 --topic test</code></li><li>消费消息:<code>sh kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning</code></li></ul><h3 id="Java-API使用"><a href="#Java-API使用" class="headerlink" title="Java API使用"></a>Java API使用</h3><ul><li><p>producer</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>BOOTSTRAP_SERVERS_CONFIG<span class="token punctuation">,</span><span class="token string">"192.168.3.207:9092,192.168.3.9:9092,192.168.3.155:9092"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>ACKS_CONFIG<span class="token punctuation">,</span><span class="token string">"all"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>KEY_SERIALIZER_CLASS_CONFIG<span class="token punctuation">,</span><span class="token string">"org.apache.kafka.common.serialization.IntegerSerializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ProducerConfig<span class="token punctuation">.</span>VALUE_SERIALIZER_CLASS_CONFIG<span class="token punctuation">,</span><span class="token string">"org.apache.kafka.common.serialization.StringSerializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      KafkaProducer producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>String<span class="token operator">></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          ProducerRecord<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>String<span class="token operator">></span> record <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"firstTopic"</span><span class="token punctuation">,</span><span class="token string">"HelloWorld"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>          Future future <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>future<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      producer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>consumer</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>      Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>BOOTSTRAP_SERVERS_CONFIG<span class="token punctuation">,</span><span class="token string">"192.168.3.207:9092,192.168.3.9:9092,192.168.3.155:9092"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>GROUP_ID_CONFIG<span class="token punctuation">,</span><span class="token string">"MrATooConsumer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>ENABLE_AUTO_COMMIT_CONFIG<span class="token punctuation">,</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>KEY_DESERIALIZER_CLASS_CONFIG<span class="token punctuation">,</span><span class="token string">"org.apache.kafka.common.serialization.IntegerDeserializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      properties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ConsumerConfig<span class="token punctuation">.</span>VALUE_DESERIALIZER_CLASS_CONFIG<span class="token punctuation">,</span><span class="token string">"org.apache.kafka.common.serialization.StringDeserializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      KafkaConsumer<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>String<span class="token operator">></span> consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaConsumer</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*TopicPartition partition = new TopicPartition("firstTopic",1);      consumer.assign(Arrays.asList(partition));*/</span>      consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"firstTopic"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ConsumerRecords<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> records <span class="token operator">=</span> consumer<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofDays</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Iterator<span class="token operator">&lt;</span>ConsumerRecord<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">>></span> iterator <span class="token operator">=</span> records<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          ConsumerRecord<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> record <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      consumer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="配置分析"><a href="#配置分析" class="headerlink" title="配置分析"></a>配置分析</h2><h3 id="Producer可选配置"><a href="#Producer可选配置" class="headerlink" title="Producer可选配置"></a>Producer可选配置</h3><ul><li>acks:该配置表示<code>producer</code>发送到<code>Broker</code>上的确认值，该值有三个选项，分别是：<ul><li>0:<code>producer</code>发送消息过后不需要等待<code>Broker</code>确认，该方式延时小但消息容易丢失</li><li>1:<code>producer</code>发送消息过后只需要等待kafka集群的<code>leader</code>节点确认，该方式延时和可靠性适中</li><li>all(-1):<code>producer</code>发送消息过后需要等待ISR列表中的所有节点确认，该方式延时较长，但消息不容易丢失。但ISR可以缩小到1，所以并不能百分之百保证消息不丢失。</li></ul></li><li>batch.size:当生产者发送多个消息到<code>Broker</code>上时，为了节约网络开销，可以通过批量的方式来提交消息，可以通过该配置来设置批量提交消息的大小，默认是16kb。也就是，当一批消息达到了<br>batch.size大小的时候统一发送。<blockquote><p>注意：这里的batch.size大小是针对同一个<code>partition</code></p></blockquote></li><li>linger.ms:消息发送请求的延迟（间隔），即：当消息发送间隔时间较短，并且还没有达到batch.size大小时，这个时候客户端并不会立即发送请求到<code>Broker</code>上，而是延迟<code>linger.ms</code>过后，将多个消息<br>合并成一个消息发送，该配置为0，则代表没有延迟，如果配置成正整数值，则会减少请求数量，但也会有消息发送延迟。如果同时配置了<code>linger.ms</code>和<code>batch.size</code>，则满足一个条件就会发送。</li><li>max.request.size:现在请求数据的最大字节数，默认为1M</li></ul><h3 id="Consumer可选配置"><a href="#Consumer可选配置" class="headerlink" title="Consumer可选配置"></a>Consumer可选配置</h3><ul><li>group.id:kafka中的每个消费者都有一个组，组和消费者是一对多的关系，对于一个Topic而言，如果Topic对应多个组，则类似于ActiveMQ中Topic的概念，如果Topic对应一个组，则类似于ActiveMQ<br>中Queue的概念，同一个组下的多个消费者可以同时消费一个Topic下的多个分区，一个分区只能分配给一个消费者进行消费。</li><li>enable.auto.commit:消息消费后自动提交，只有当消息被提交过后才会确保消息不会再次被消费，可以接口<code>auto.commit.interval.ms</code>来优化自动提交的频率。当然，我们也可以通过<br><code>consumer.commitSync()</code>方法来手动提交消息。</li><li>auto.offset.reset:</li><li>max.poll.records:配置每次poll消息的数量</li></ul><h2 id="Topic和Partition"><a href="#Topic和Partition" class="headerlink" title="Topic和Partition"></a>Topic和Partition</h2><h3 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h3><p>Topic是一个逻辑的概念，可以认为是一个消息集合，不同的Topic是分开存储的，一个Topic可以有多个生产者向它发送消息，也可由有多个消费者消费消息。</p><h3 id="Partition"><a href="#Partition" class="headerlink" title="Partition"></a>Partition</h3><p>一个Topic可以个多个Partition（至少有一个分区），同一个Topic下的不同分区的消息是不同的，每个消息在分配到分区时，都会被分配一个offset（偏移量），kafka通过offset保证消息在同一个<br>分区的顺序，也就是说，同一个分区的消息是有序的。</p><h3 id="Partition存储"><a href="#Partition存储" class="headerlink" title="Partition存储"></a>Partition存储</h3><p>Partition以文件的形式存在于文件系统中，例如：<code>sh kafka-topics.sh --create --zookeeper 192.168.3.224:2181 --replication-factor 1 --partitions 3 --topic test</code>，以上命令会创建一个<br>有三个分区的名称为test的Topic，那么这三个分区会生成三个文件夹均匀分布在不同Broker中，文件夹的命名规则为<code>&lt;topic_name&gt;-&lt;partition_id&gt;</code>，partition_id范围为0~3。</p><h2 id="消息分发策略"><a href="#消息分发策略" class="headerlink" title="消息分发策略"></a>消息分发策略</h2><p>一个消息由key和value组成，发送一条消息之前，我们可以指定消息的key和value，然后kafka会根据指定的key和partition机制来决定当前这条消息应该被存储到那个分区中，默认情况下，kafka采用的消息分发机制<br>是Hash取模算法，如果key为空，则会随机分配一个分区，这个随机分区会在<code>metadata.max.age.ms</code>配置指定的时间内固定选择一个，这个值默认是10分钟，也就是说，每10分钟，随机分区会更新一次。</p><h2 id="消息消费原理"><a href="#消息消费原理" class="headerlink" title="消息消费原理"></a>消息消费原理</h2><p>每个Topic有多个Partition，每个Consumer Group有多个消费者，同一个Partition只允许被一个Consumer Group中的一个消费者消费。那么同一个消费者中的消费者是如何去消费同一个Topic下的<br>多个Partition的呢？这就牵扯到了分区分配策略</p><h3 id="分区分配策略"><a href="#分区分配策略" class="headerlink" title="分区分配策略"></a>分区分配策略</h3><p>kafka中提供两种分区分配策略，分别是Range（范围分区）、RoundRobin（轮询），通过<code>partition.assignment.strategy</code>配置来指定分区分配策略。</p><h4 id="Range（范围分区）"><a href="#Range（范围分区）" class="headerlink" title="Range（范围分区）"></a>Range（范围分区）</h4><p>首先将同一个Topic下的所有Partition通过分区ID进行排序，然后将同一个Consumer Group下的所有Consumer按照一定规则排序，然后用Partition总数除以消费者总数，如果除不尽，则将余数<br>按照顺序分配到排序过后的Consumer上。<br>例如：现在有一个Topic test，10个分区;一个Consumer Group,三个消费者;</p><ul><li>将Partition通过ID排序过后得到<code>test-0,test-1,test-2,test-3,test-4,test-5,test-6,test-7,test-8,test-9</code></li><li>将消费者排序，假如是<code>C0,C1,C2</code></li><li>先计算<code>10/3=3</code>，然后计算<code>10%3=1</code>，最后得到三个组，分别是<code>0,1,2,3</code>/<code>4,5,6</code>/<code>7,8,9</code></li><li>最后得到的结果是：<ul><li>C0消费<code>test-0,test-1,test-2,test-3</code></li><li>C1消费<code>test-4,test-5,test-6</code></li><li>C2消费<code>test-7,test-8,test-9</code><br>通过上面的例子，可以看出，消费者C0多消费了一个分区，这时设想一下，如果该消费组中同时订阅了n个Topic，采用范围分区算法，那么消费者C0将比该组中的其他消费者多消费了n个分区。</li></ul></li></ul><h4 id="RoundRobin（轮询）"><a href="#RoundRobin（轮询）" class="headerlink" title="RoundRobin（轮询）"></a>RoundRobin（轮询）</h4><p>把所有的Partition和Consumer按照HashCode排序，然后通过轮询算法将各个Partition分配给Consumer。<br>例如：现在有一个Topic test，10个分区;一个Consumer Group,三个消费者；</p><ul><li>将Partition通过HashCode排序，假如得到<code>test-5,test-8,test-2,test-4,test-3,test-6,test-7,test-9,test-0,test-1</code></li><li>将消费者通过HashCode排序，假如是<code>C2,C0,C1</code></li><li>最后得到的结果是：<ul><li>C2消费<code>test-5,test-4,test-7,test-1</code></li><li>C0消费<code>test-8,test-3,test-9</code></li><li>C1消费<code>test-2,test-6,test-0</code><br>虽然这里C2消费者比其他消费者多一个，但是如果该消费组订阅了多个Topic，那么将会从C0开始分配，也就是说，消费组中的所有消费者消费的分区差距不会超过1。<br>注意：使用轮询分区分配策略需要满足一下两个条件</li><li>每个主题的消费者实例具有相同数量的流</li><li>每个消费者订阅的主题必须是相同的</li></ul></li></ul><h3 id="什么时候会触发分区分配策略？"><a href="#什么时候会触发分区分配策略？" class="headerlink" title="什么时候会触发分区分配策略？"></a>什么时候会触发分区分配策略？</h3><p>以下几种情况会触发分区分配策略（也可称之为Rebalance），分别是：</p><ul><li>当有新的消费者加入当前Consumer Group</li><li>有消费者离开当前消费组，例如宕机或者主动关闭</li><li>Topic新增了分区</li></ul><h3 id="谁来执行分区分配？"><a href="#谁来执行分区分配？" class="headerlink" title="谁来执行分区分配？"></a>谁来执行分区分配？</h3><p>kafka提供一种角色<code>Coordinator</code>来执行对消费组Consumer Group的管理，当消费者启动的时候，会向<code>Broker</code>确定谁是它们组的Coordinator，之后该组中的所有Consumer都会向Coordinator进行协调通信。</p><h3 id="如何确定Coordinator角色？"><a href="#如何确定Coordinator角色？" class="headerlink" title="如何确定Coordinator角色？"></a>如何确定Coordinator角色？</h3><p>消费者向kafka集群中任意一个Broker发送一个<code>GroupCoordinatorRequest</code>请求，Broker会返回一个负载最小的BrokerID，并且将其设置成为Coordinator。</p><h3 id="Rebalance（重新负载）"><a href="#Rebalance（重新负载）" class="headerlink" title="Rebalance（重新负载）"></a>Rebalance（重新负载）</h3><p>在执行Rebalance之前，需要保证Coordinator是已经确定好了的，整个Rebalance分为两个步骤<br>    1. joinGroup:所有Consumer都会想Coordinator发送<code>JoinGroupRequest</code>请求，请求中带有<code>group_id</code>/<code>member_id</code>/<code>protocol_matedata</code>等信息，Coordinator会从中选择一个Consumer作为Leader，<br>    并且把leader_id、组成员信息members、序列化后的订阅信息protocol_metadata以及generation_id(类似于zookeeper epoch)发送给消费者。<br>    2. syncJoin:Leader Consumer在确定好分区分配方案过后，所有消费者向Coordinator发送一个<code>SyncGroupRequest</code>请求，当然这里只有Leader Consumer会真正发送分区分配方案，其他的Consumer<br>    只是打酱油的，Coordinator在收到Leader Consumer的分区分配方案过后，将其封装成一个<code>SyncGroupResponse</code>响应返回给所有的Consumer，所有的Consumer在收到分区分配方案过后，自行消费<br>    方案中指定的分区。</p><h2 id="Offset"><a href="#Offset" class="headerlink" title="Offset"></a>Offset</h2><p>前面讲到每个Topic有多个Partition，每个Partition中的消息都不一样，并且每个Partition中的消息都会存在一个offset值，在同一个Partition中的offset是有序的，即kafka可以保证同一个Partition<br>中的消息是有序的，但是这一特性并不跨分区，也即kafka不能保证跨分区的消息的有序性。</p><h3 id="Offset在哪里维护？"><a href="#Offset在哪里维护？" class="headerlink" title="Offset在哪里维护？"></a>Offset在哪里维护？</h3><p>kafka提供一个名为<code>__consumer_offsets_*</code>的Topic，该Topic就是来保存每个Consumer Group的消费的每个Partition某一时刻的offset信息，该Topic默认有50个分区，那么，kafka是如何将某个Consumer Group<br>保存到具体的那个分区的呢？其实，kafka是通过这样一个算法来决定该Consumer Group应该保存在那个分区的，公式：<code>Math.abs(&quot;group_id&quot;.hashCode())%groupMetadataTopicPartitionCount</code>。<br>确定了分区过后，我们可以通过如下命令查看当前Consumer Group的offset信息</p><pre class="line-numbers language-shell"><code class="language-shell">sh kafka-simple-consumer-shell.sh --topic __consumer_offsets --partition 35 --broker-list 192.168.3.224:9092 --formatter "kafka.coordinator.group.GroupMetadataManager\$OffsetsMessageFormatter"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="多个分区在集群中的分配"><a href="#多个分区在集群中的分配" class="headerlink" title="多个分区在集群中的分配"></a>多个分区在集群中的分配</h2><p>一个Topic有多个Partition，那么这么多的Partition是如何在Broker中分布的呢？</p><ul><li>将i个Partition和n个Broker排序</li><li>将第1个Partition分配到i%n个Broker上</li></ul><h2 id="消息的存储"><a href="#消息的存储" class="headerlink" title="消息的存储"></a>消息的存储</h2><p>我们都知道在kafka中消息都是以日志文件存储在文件系统中的，由于kafka中一般都存储着海量的数据，所有，kafka中的消息日志分区并不是直接对应一个日志文件，而是对应着一个分区目录，<br>命名为<code>&lt;topic_name&gt;_&lt;partition_id&gt;</code>，例如一个名为test的Topic，有三个分区，那么在集群Broker的<code>/tmp/kafka-log</code>(该目录是一个临时目录，一般线上环境都会更改此目录)中就有三个目录，分别是<code>test-0</code>/<code>test-1</code>/<code>test-2</code></p><h3 id="消息的文件存储机制"><a href="#消息的文件存储机制" class="headerlink" title="消息的文件存储机制"></a>消息的文件存储机制</h3><p>我们知道了Partition的存储是指向一个目录的，其实目录并不具备数据存储的能力，那么kafka中的消息是如何存在于Partition中的呢。kafka为了以后消息的清理以及压缩的便利性和处于性能方面的考虑，<br>引入一个<code>LogSegment</code>的逻辑概念，但实际上消息是以文件的形式存在于Partition目录中的。在一个Partition中可以存在多个<code>LogSegment</code>，一个<code>LogSegment</code>由一下三个文件组成：<br>    1. 00000000000000000000.index:offset索引文件，对应offset和物理位置position<br>    2. 00000000000000000000.timeindex:时间索引文件，映射时间戳和offset的对应关系<br>    3. 00000000000000000000.log:日志文件，存储Topic消息，包含内容有offset、position、timestamp、消息内容等等<br>每个<code>LogSegment</code>分段的大小可以通过server.properties中的<code>log.segment.bytes</code>属性设置，默认是1GB。<br><code>LogSegment</code>命名的规则是由一个最大支持64位long大小的20位数字字符串组成，每个Partition中的第一个<code>LogSegment</code>从0开始，后面的<code>LogSegment</code>命名为上一个<code>LogSegment</code>消息中最后一个offset+1，<br>我们可以通过<code>sh kafka-run-class.sh kafka.tools.DumpLogSegments --files /tmp/kafka-logs/test-0/00000000000000000000.log --print-data-log</code>命令查看分区0的第一个<code>LogSegment</code>。</p><h3 id="LogSegment中index文件和log文件的关联关系"><a href="#LogSegment中index文件和log文件的关联关系" class="headerlink" title="LogSegment中index文件和log文件的关联关系"></a>LogSegment中index文件和log文件的关联关系</h3><p>我们知道每个LogSegment都是由index,timeindex,log三个后缀结尾的文件组成。可以通过以下命令查看索引文件内容：</p><pre class="line-numbers language-shell"><code class="language-shell">sh kafka-run-class.sh kafka.tools.DumpLogSegments --files /tmp/kafka-logs/test-0/00000000000000000000.index --print-data-log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>index和log文件的对应关系如下图：<br><img src="/2019/12/12/Kafka原理分析/KafkaLogSegment.png" alt="KafkaLogSegment"></p><h3 id="通过offset查找Message的原理分析"><a href="#通过offset查找Message的原理分析" class="headerlink" title="通过offset查找Message的原理分析"></a>通过offset查找Message的原理分析</h3><p>通过上一节我们了解到，offset其实是保存的log文件中的简略信息，是log文件中offset和position的跳跃版，也叫稀疏索引，那么消息是如何通过offset查找的呢<br>例如：我们需要查找test Topic中offset为88的message，那么kafka会经过一下步骤查找消息</p><ol><li>分过二分查找法确定该消息存在于那个LogSegment中，那么显然这里offset为88的message肯定存在于00000000000000000000的LogSegment中</li><li>同样通过二分查找法找索引文件中小于等于目标消息（offset为88）offset的记录，以上图为例，很显然是{offset:54,position:4190}，从该条记录中可以知道offset为54的消息的position<br>为4190</li><li>打开log文件，从position为4190的地方顺序查找知道找到offset为88的message，然后返回。</li></ol><h2 id="消息的写入性能"><a href="#消息的写入性能" class="headerlink" title="消息的写入性能"></a>消息的写入性能</h2><p>为什么kafka会有这么高的吞吐量，其原因在于kafka在很多地方做了优化，那么在网络传输和磁盘IO上，有很大的优化空间</p><ul><li>顺序写入：kafka采用顺序写入的方式将消息持久化到磁盘，避免了常规随机写入数据寻址等一系列操作带来的性能损耗。</li><li>零拷贝：一般情况下，我们将文件数据发送到网络上时，需要将文件冲磁盘读取到操作系统内核空间中，然后拷贝到用户空间，最后将数据发送到网卡，通过网络传输，在kafka中，采用零拷贝的方式，直接<br>将数据从内核空间发送到网卡通过网络传输，节省了用户空间这一步骤，在性能上有一定的提升。<ul><li>在linux系统中使用sendFile实现零拷贝</li><li>在Java中使用FileChannel.transfer实现零拷贝</li></ul></li></ul><h2 id="日志清理策略"><a href="#日志清理策略" class="headerlink" title="日志清理策略"></a>日志清理策略</h2><p>kafka日志使用分段存储，一方面方便日志的清理，另一方面能确保单个文件的大小从来提升一定的性能。kafka会起一个后台线程来执行日志的清理工作，kafka的日志清理策略有两种</p><ul><li>根据保留时间：当消息在kafka中存在超过指定的时间，就会触发日志清理，默认时间为7天，可以通过在server.properties中的<code>log.retention.hours</code>属性指定</li><li>根据日志大小：当kafka中消息的大小超过指定大小，就会触发日志清理， 可以通过在server.properties中的<code>log.retention.bytes</code>属性指定<br>以上两种策略只要满足一种则会触发清理。</li></ul><h2 id="日志压缩策略"><a href="#日志压缩策略" class="headerlink" title="日志压缩策略"></a>日志压缩策略</h2><p>我们可以开启kafka的日志压缩功能，开启后，kafka会起一个<code>Cleaner</code>线程，定时的去压缩日志，kafka压缩日志的原理是，只保留各个key对应最新的value，而所有修改之前的value则被删除。<br>类似于数据库中某条数据的更新历史，比如用户1的用户名由张三改为李四再改为王五，那么只保留王五。</p><h2 id="kafka高可用副本机制"><a href="#kafka高可用副本机制" class="headerlink" title="kafka高可用副本机制"></a>kafka高可用副本机制</h2><p>kafka中每个Topic可以有多个Partition，并且各个Partition会均匀分布在各个Broker中，但是对于Partition来说，Partition本身存在单点问题，也就是说，当一个Topic中的某个Partition不可用<br>则代表该Partition中的消息无法被消费，考虑到这一问题，kafka提供了高可用的Partition解决方案，那就是Partition的副本机制。</p><p>每个Partition可以有多个副本，并且存在一个leader副本，所有的读写请求都是由leader副本执行，副本集中的其他Partition作为follower副本存在，follower副本的职责只是从leader副本中同步数据<br>所以，我们可以理解为，在Partition的副本集中存在一主多从的架构模型。</p><p>一般情况下，一个分区的多个副本会均匀分布在各个Broker上，当其中一个Broker宕机或者其中一个Partition不可用时，可以重新选举一个新的leader副本继续对外提供服务，这样就可以保持kafka集群的可用性。</p><h3 id="副本分配算法"><a href="#副本分配算法" class="headerlink" title="副本分配算法"></a>副本分配算法</h3><ol><li>将N个Broker和i个Partition排序</li><li>将i个Partition分配到(i mod n)个Broker上（这是多个分区在Broker的分配算法，可以参考 多个分区在集群中的分配）</li><li>将i个Partition的j个副本分配到((i + j) mod n)个Broker上</li></ol><p>我们可以在zookeeper中查看各个Topic的各个分区的状态信息，通过<code>get /brokers/topics/test/partitions/0/state</code>命令可以得到以下信息：</p><pre class="line-numbers language-shell"><code class="language-shell">{"controller_epoch":1,"leader":0,"version":1,"leader_epoch":0,"isr":[0]}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我这里使用的是单机环境，所以只配置有一个副本（也就是没有副本），这里的ISR只有一个节点，从以上信息可以看出，test Topic中的leader节点也是0。</p><h3 id="副本机制名词解释"><a href="#副本机制名词解释" class="headerlink" title="副本机制名词解释"></a>副本机制名词解释</h3><ul><li>Leader副本：负责处理客户端的读写操作</li><li>Follower副本：被动的从Leader副本中同步数据</li><li>ISR副本集：包含Leader副本和所有和Leader副本保持数据同步的Follower副本</li><li>LEO：日志末端位移</li><li>HW：水位值，当HW的值等于LEO的时候，表示Follower副本中的数据和Leader副本中的数据已经完全同步，HW永远不会大于LEO的值。当消费者拉取消息的时候，只能拉取该值以前的消息，HW值以后的消息<br>对于消费者来说是不可见的，也就是说HW的值取决于ISR副本集中最小的LEO值。每个replica都有HW，各个副本都维护着自己的HW。一条消息只有被所有的Follower副本从Leader同步过后才会被认为已提交。<br>这样有利于避免一条消息还没有来得及同步就宕机，导致消息丢失的情况。当然，我们可以在发送端指定消息的acks模式，该模式在之前讲过。</li></ul><h3 id="副本协同机制"><a href="#副本协同机制" class="headerlink" title="副本协同机制"></a>副本协同机制</h3><p>所有客户端的读写请求都会由Leader副本处理，Follower只负责从Leader副本中同步数据，当Leader副本所在的Broker出现宕机和不可用时，会从Follower副本中重新选举一个成为Leader。<br>写请求首先由Leader副本处理，之后Follower副本同步，这个步骤会有一定的延迟，当这个延迟在预定的阈值范围内则可以容忍，当这个延迟超出了阈值（可能存在的原因有很多，例如：网络，宕机），Leader<br>副本就会将这个Follower副本从ISR中踢出去。</p><h3 id="ISR"><a href="#ISR" class="headerlink" title="ISR"></a>ISR</h3><p>经过前面的协同机制过后，ISR副本集里面存在的Leader副本和Follower就是 Leader副本和当前可用并且消息量与Leader副本差不多的Follower副本，是整个副本集的一个子集（因为整个副本集可能存在宕机的副本，被踢出了），<br>具体来说，ISR中的副本必须满足一下条件：</p><ul><li>副本所在的Broker必须与Zookeeper保持连接</li><li>副本最后一条消息的offset和Leader副本中最后一条消息的offset差距不能大于执行阈值，该阈值可以通过<code>replica.lag.time.max.ms</code>指定<blockquote><p>replica.lag.time.max.ms:如果该Follower在此时间间隔内没有追上Leader副本中的所有消息，则将该副本从ISR副本集中剔除</p></blockquote></li></ul><h3 id="数据同步过程"><a href="#数据同步过程" class="headerlink" title="数据同步过程"></a>数据同步过程</h3><p>Producer在发送消息到某个Partition时，先通过Zookeeper找到该Partition的Leader副本，Leader首先会将消息写入到Log日志文件中，然后Follower会从Leader中pull消息，Follower保存消息的顺序<br>和Leader的顺序一致。Follower在pull消息并且写入Log文件过后，向Leader发送ACK，一旦Leader收到所有Follower的ACk过后，该消息就被认为已经Commit了，最后Leader就会增加HW值并且向Producer发送ACK。</p><h3 id="副本数据同步机制"><a href="#副本数据同步机制" class="headerlink" title="副本数据同步机制"></a>副本数据同步机制</h3><p>初始状态下，Leader和Follower副本的LEO和HW的值都为0，并且Leader中还保存着remoteLEO(表示所有Follower的LEO，初始值也是0)，Follower会不断的向Leader副本发送fetch请求，假如当前没有任何Producer<br>向Leader副本发送消息，则这个请求会被Leader寄存，当超过了指定阈值（通过<code>replica.fetch.wait.max.ms</code>设置）还没有Producer发送消息，则该请求会被强制完成。如果在该阈值指定时间内有新的消息，那么<br>该fetch请求会被唤醒，继续执行。这里可以分为两种情况：</p><ul><li>Follower的fetch请求是在Leader处理了Producer消息过后发送的<ul><li>Producer发送一条消息，Leader在收到消息过后做以下事情：<ol><li>将消息保存到Log文件中，同时更新自己的LEO值</li><li>更新自己的HW值，但是由于当前还没有Follower发送fetch请求，那么Leader副本那种的RemoteLEO值任然是0，Leader将自己的LEO和RemoteLEO值进行比较，发现最小值是0，所以HW的值还是0。</li></ol></li><li>Follower第一次fetch消息<br>Leader的处理逻辑是：<ol><li>读取Log消息，更新RemoteLEO值（RemoteLEO值由fetch请求中的offset来决定，由于是Follower第一次发送fetch请求，所有请求的offset值为0）。</li><li>更新HW值，但是这时自己的LEO和RemoteLEO任然是0，所有HW的值任然为0。</li><li>将消息内容和当前分区的HW值封装成Response返回给Follower<br>Follower的处理逻辑是：</li><li>将消息保存到Log文件中，同时更新LEO值</li><li>更新自己的HW值，将本地的LEO和Leader返回的HW进行比较，取最小值作为自己的HW值，此时最小值为0，所以这时的HW值为0</li></ol></li><li>Follower第二次fetch消息<br>Leader的处理逻辑是：<ol><li>读取Log消息，更新RemoteLEO值（这时fetch请求的offset为1）。</li><li>更新HW值，这时Leader的LEO和RemoteLEO都是1，所有HW的值为1。</li><li>将消息内容和当前分区的HW值封装成Response返回给Follower，这个时候么有消息内容，所以只返回HW值。<br>Follower的处理逻辑是：</li><li>如果有消息则保存消息到Log文件中，如果没有则不执行该操作，同时更新LEO值</li><li>更新自己的HW值，将本地的LEO和Leader返回的HW进行比较，取最小值作为自己的HW值，此时两个值都为1，所以这时的HW值为1<br>到目前为止，数据同步完成。</li></ol></li></ul></li><li>Leader还没有处理Producer消息时Follower发送了fetch请求：<br>当Follower发送fetch请求是，Leader中没有Producer发送消息时，这个fetch请求会被阻塞，当在指定阈值超时时间范围内有新的消息发送过来，Leader处理完成过后，该fetch请求就会被唤醒，继续执行<br>执行的逻辑和上面一样。</li></ul><h3 id="kafka中是如何处理所有的Replica不工作的情况"><a href="#kafka中是如何处理所有的Replica不工作的情况" class="headerlink" title="kafka中是如何处理所有的Replica不工作的情况"></a>kafka中是如何处理所有的Replica不工作的情况</h3><p>在一个分区的ISR中至少有一个副本可用时，kafka就可以保证已经Commit的消息不被丢失，但是当ISR中所有的副本都不可用时，就无法保证了，这时会有两种处理办法</p><ul><li>等待ISR中任意一个Replica活过来，并且将其设置为Leader</li><li>等待任意一个Replica活过来，不过是不是存在于ISR副本集中，并且将其设置为Leader<br>此时就需要在可用性和一致性上做出选择<br>如果选择第一种方式，那么可能等待的时间较长，就意味着不可用的时间会变长；如果选择第二种方式，虽然等待的时间或许没有第一种那么长，但是因为不存在与ISR中的副本数据同步的延迟较大，所以数据<br>的一致性就会体现出来。</li></ul><h3 id="ISR设计所解决的问题"><a href="#ISR设计所解决的问题" class="headerlink" title="ISR设计所解决的问题"></a>ISR设计所解决的问题</h3><p>在分布式系统中，冗余备份是很常见的一种高可用手段，但是也会带来一些性能上的损耗，例如：<br>在kafka中，副本中Leader和Follower副本如果采用同步的方式复制消息，那么所有Follower副本的消息都完成复制才算完成了数据的同步，那么如果个别Follower网络延迟较长或者性能本身不太好导致整个集群出现性能瓶颈甚至阻塞；<br>如果采用异步的方式复制消息，Leader收到消息过后则返回成功，则认为该消息已被提交，Follower异步的从Leader复制消息，如果此时Follower副本复制消息比较慢，此时Leader突然宕机，重新选举Leader<br>过后，Follower副本和Leader副本的消息存在差距，那么这个差距的消息就会被丢失。<br>所以Kafka权衡了两种方式的有点，采用ISR副本集来确保各个Follower副本和Leader副本的延迟在阈值范围内，如果超出阈值范围，则将该Follower剔除，这个时候就可以采用同步的方式来复制消息，当Leader<br>处理的Producer发送的消息过后，kafka只需要等待ISR副本集中的所有Follower同步完成即可认为消息被提交。</p>]]></content>
      
      
      <categories>
          
          <category> Kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息中间件 </tag>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ActiveMQ使用</title>
      <link href="/2019/11/30/ActiveMQ%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/11/30/ActiveMQ%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>相信大家遇到过这样的场景，用户注册这个简单的功能里面集成了太多不是很重要步骤，但又不得不做。比如发送邮件、发放优惠券、发送推销短信、记录日志，这样就导致了我们注册功能特别繁重，<br>极大的拉低了接口性能，给用户带来体验度大大降低，明明就一个注册用户信息持久化的功能居然需要做这么多不是主线流程的事情。当你遇到这样的业务场景的时候就可以考虑使用消息队列来实现<br>解耦，经过优化过后，我们的注册功能就只需要将用户信息持久化到数据库，然后向MQ中间件发送一条消息，然后返回，如果说之前的每个操作需要一秒，那总得就需要5S，但是经过使用MQ解耦过后<br>只需要1S左右，大大提升了用户体验。</p><h2 id="JMS"><a href="#JMS" class="headerlink" title="JMS"></a>JMS</h2><p>JMS(Java Message Service)是Java为各个消息中间件提供的一套统一API规范，其目的是规避各个中间件协议、接口的不同而带来的不便。以下是JMS连接流程图：<br><img src="/2019/11/30/ActiveMQ使用/JMS%E6%B5%81%E7%A8%8B.png" alt="JMS连接流程图"></p><h3 id="消息传递模式"><a href="#消息传递模式" class="headerlink" title="消息传递模式"></a>消息传递模式</h3><p>JMS提供两种常见的消息传递模式或域，分别是：</p><ul><li>P2P(点对点的消息传递模式):一个消息生成者对应一个消费者，两者之间不存在时间上的相关性（即，就算消费者不在线，生产者照样可以发送消息到<code>Broker</code>上，等消费者上线过后继续消费）</li><li>PUB/SUB(发布订阅的消息传递模式):一个消息生产者对应多个消息消费者，两者之间存在时间上的相关性（即，消费者只能收到订阅过后并且在线时生产者发送的消息，但不是绝对，JMS允许<br>消费者创建持久化订阅，持久订阅允许消费者消费他不在线时发送的消息）</li></ul><h3 id="消息类型或结构组成"><a href="#消息类型或结构组成" class="headerlink" title="消息类型或结构组成"></a>消息类型或结构组成</h3><p>消息的结构由消息头、消息体、属性组成</p><ul><li>消息头：消息头包含消息识别和路由信息</li><li>消息体：一般是我们发送的消息内容</li><li>消息属性：属性分为应用设置的属性、标准属性、中间件定义的属性<br>JMS提供六种消息类型，分别是：</li><li>TextMessage:文本消息</li><li>MapMessage:键值对消息，键是String类型，值可以是Java的任何类型</li><li>BytesMessage:字节流消息</li><li>StreamMessage:输入输出流消息</li><li>ObjectMessage:可序列化对象消息</li><li>Message:空消息，不包含有消息体，只有消息头和属性</li></ul><h2 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li><a href="http://www.apache.org/dyn/closer.cgi?filename=/activemq/5.15.10/apache-activemq-5.15.10-bin.tar.gz&action=download" target="_blank" rel="noopener">下载</a></li><li>解压:<code>tar -zxvf apache-activemq-5.15.9-bin.tar.gz</code></li><li>启动:<code>sh activemq start</code></li><li>访问:<a href="http://localhost:8161" target="_blank" rel="noopener">http://localhost:8161</a></li></ul><h3 id="P2P-Queue-消息传递方式"><a href="#P2P-Queue-消息传递方式" class="headerlink" title="P2P(Queue)消息传递方式"></a>P2P(Queue)消息传递方式</h3><ul><li><p>消息生产者</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueueProvider</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> JMSException <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//创建连接工厂</span>      ConnectionFactory connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQConnectionFactory</span><span class="token punctuation">(</span><span class="token string">"tcp://192.168.3.224:61616"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//创建连接</span>      Connection connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//建立连接</span>      connection<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//创建会话</span>      Session session <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createSession</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">,</span> Session<span class="token punctuation">.</span>AUTO_ACKNOWLEDGE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//创建目的地</span>      Destination destination <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQQueue</span><span class="token punctuation">(</span><span class="token string">"testQueue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//创建消息生产者</span>      MessageProducer producer <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createProducer</span><span class="token punctuation">(</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//创建消息</span>      TextMessage message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQTextMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      message<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//发送消息</span>      producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//提交消息事务，该方法只有在事务型会话时使用</span>      session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//关闭会话</span>      session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//关闭连接</span>      connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>消息消费者</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueueConsumer</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> JMSException <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//创建连接工厂</span>      ConnectionFactory connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQConnectionFactory</span><span class="token punctuation">(</span><span class="token string">"tcp://192.168.3.224:61616"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//创建连接</span>      Connection connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//建立连接</span>      connection<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//创建会话</span>      Session session <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createSession</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">,</span> Session<span class="token punctuation">.</span>AUTO_ACKNOWLEDGE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//创建目的地</span>      Destination destination <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQQueue</span><span class="token punctuation">(</span><span class="token string">"testQueue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//创建消费者</span>      MessageConsumer consumer <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createConsumer</span><span class="token punctuation">(</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//消费消息</span>      TextMessage message <span class="token operator">=</span> <span class="token punctuation">(</span>TextMessage<span class="token punctuation">)</span>consumer<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//输出消息（处理消息）</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//确认消息，该方法只有在事务型会话时使用</span>      session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//关闭会话</span>      session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//关闭连接</span>      connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>消息消费还可以使用监听器的方式，代码如下(片段)：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//...</span><span class="token comment" spellcheck="true">//创建消费者</span>MessageConsumer consumer <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createConsumer</span><span class="token punctuation">(</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>MessageListener messageListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span>Message message<span class="token punctuation">)</span> <span class="token punctuation">{</span>      TextMessage textMessage <span class="token operator">=</span> <span class="token punctuation">(</span>TextMessage<span class="token punctuation">)</span> message<span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>textMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置消息监听</span>consumer<span class="token punctuation">.</span><span class="token function">setMessageListener</span><span class="token punctuation">(</span>messageListener<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//确认消息，该方法只有在事务型会话时使用</span>session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="PUB-SUB-发布-订阅-消息传递方式"><a href="#PUB-SUB-发布-订阅-消息传递方式" class="headerlink" title="PUB/SUB(发布/订阅)消息传递方式"></a>PUB/SUB(发布/订阅)消息传递方式</h3><ul><li><p>消息生产者</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopicProvider</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> JMSException <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//创建连接工厂</span>      ConnectionFactory connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQConnectionFactory</span><span class="token punctuation">(</span><span class="token string">"tcp://192.168.3.224:61616"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//创建连接</span>      Connection connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//建立连接</span>      connection<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//创建会话</span>      Session session <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createSession</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">,</span> Session<span class="token punctuation">.</span>AUTO_ACKNOWLEDGE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//创建目的地</span>      Destination destination <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQTopic</span><span class="token punctuation">(</span><span class="token string">"testTopic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//创建消息生产者</span>      MessageProducer producer <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createProducer</span><span class="token punctuation">(</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//创建消息</span>      TextMessage message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQTextMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      message<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//发送消息</span>      producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//提交消息事务，该方法只有在事务型会话时使用</span>      session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//关闭会话</span>      session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//关闭连接</span>      connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>消息消费者</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopicConsumer</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> JMSException <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//创建连接工厂</span>      ConnectionFactory connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQConnectionFactory</span><span class="token punctuation">(</span><span class="token string">"tcp://192.168.3.224:61616"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//创建连接</span>      Connection connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//建立连接</span>      connection<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//创建会话</span>      Session session <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createSession</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">,</span> Session<span class="token punctuation">.</span>AUTO_ACKNOWLEDGE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//创建目的地</span>      Destination destination <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQTopic</span><span class="token punctuation">(</span><span class="token string">"testTopic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//创建消费者</span>      MessageConsumer consumer <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createConsumer</span><span class="token punctuation">(</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//消费消息</span>      TextMessage message <span class="token operator">=</span> <span class="token punctuation">(</span>TextMessage<span class="token punctuation">)</span>consumer<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//输出消息（处理消息）</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//确认消息，该方法只有在事务型会话时使用</span>      session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//关闭会话</span>      session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//关闭连接</span>      connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前面讲到JMS允许消费者创建持久化订阅，持久订阅允许消费者消费他不在线时发送的消息，实现这一需求需要改动消费者三个地方，分别是：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopicConsumer</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> JMSException <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//创建连接工厂</span>      ConnectionFactory connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQConnectionFactory</span><span class="token punctuation">(</span><span class="token string">"tcp://192.168.3.224:61616"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//创建连接</span>      Connection connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//配置客户端ID</span>      connection<span class="token punctuation">.</span><span class="token function">setClientID</span><span class="token punctuation">(</span><span class="token string">"MrAToo-001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1]</span>      <span class="token comment" spellcheck="true">//建立连接</span>      connection<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//创建会话</span>      Session session <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createSession</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">,</span> Session<span class="token punctuation">.</span>AUTO_ACKNOWLEDGE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//创建目的地</span>      Topic destination <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveMQTopic</span><span class="token punctuation">(</span><span class="token string">"testTopic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[2]</span>      <span class="token comment" spellcheck="true">//创建消费者</span>      MessageConsumer consumer <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">createDurableSubscriber</span><span class="token punctuation">(</span>destination<span class="token punctuation">,</span><span class="token string">"MrAToo-001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[3]</span>      <span class="token comment" spellcheck="true">//消费消息</span>      TextMessage message <span class="token operator">=</span> <span class="token punctuation">(</span>TextMessage<span class="token punctuation">)</span>consumer<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//输出消息（处理消息）</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//确认消息，该方法只有在事务型会话时使用</span>      session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//关闭会话</span>      session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//关闭连接</span>      connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>标注[1]:<code>connection.setClientID(&quot;MrAToo-001&quot;);</code>为客户的设置一个ID</p></li><li><p>标注[2]:<code>Topic destination = new ActiveMQTopic(&quot;testTopic&quot;);</code>接受参数使用<code>Destination</code>的子类<code>Topic</code></p></li><li><p>标注[3]:<code>MessageConsumer consumer = session.createDurableSubscriber(destination,&quot;MrAToo-001&quot;);</code>调用<code>session.createDurableSubscriber</code>方法</p></li></ul><p>通过上面的配置，在<code>Broker</code>上会存在一条客户端记录<br><img src="/2019/11/30/ActiveMQ使用/ActiveMQ-Broker.jpg" alt="Broker截图"></p><h2 id="JMS消息的可靠方式"><a href="#JMS消息的可靠方式" class="headerlink" title="JMS消息的可靠方式"></a>JMS消息的可靠方式</h2><p>正常情况下，消息消费有三个阶段：消息接收、消息处理、消息确认，在消息在被收到处理完毕并且确认过后被视为消息被成功消费。</p><h3 id="事务型会话"><a href="#事务型会话" class="headerlink" title="事务型会话"></a>事务型会话</h3><p>在事务型会话中，消息生产者和消息消费者均需要调用<code>session.commit</code>方法，对于生产者而言，<code>commit</code>表示消息提交，只有提交的消息才会存在<code>Broker</code>中，才能被消费者消费<br>对于消费者而言，<code>commit</code>表示消息被确认，只有被确认的消息，<code>Broker</code>才不会再次重发消息，很大程度上能避免消息重发的问题（但是并不能正在意义上解决消息的重复消费）。<br>相反的还有<code>session.rollback</code>，该方法表示对之前做的所有操作进行作废处理，对于生成者而言，已经发送的消息回滚。对于消费者而言，当前消息标记为未接受，<code>Broker</code>会重发消息。</p><blockquote><p>注意：必须保证生产者和消费者都是事务型会话</p></blockquote><h3 id="非事务型会话"><a href="#非事务型会话" class="headerlink" title="非事务型会话"></a>非事务型会话</h3><p>在非事务型会话中，消息何时被确认取决于创建会话时的应答模式(acknowledgement mode)，应答模式有三种：</p><ul><li>Session.AUTO_ACKNOWLEDGE(自动确认):消息在被收到时自动确认消息</li><li>Session.CLIENT_ACKNOWLEDGE(手动确认):消费者在收到消息过后，处理完毕通过手动调用<code>message.acknowledge();</code>进行手动确认，需要注意的是：该方法确认该会话中所有被处理的消息。</li><li>Session.DUPS_ACKNOWLEDGE(消息延迟确认):该选择只是会话迟钝的确认消息的提交</li></ul><h2 id="消息的持久化存储"><a href="#消息的持久化存储" class="headerlink" title="消息的持久化存储"></a>消息的持久化存储</h2><h3 id="非持久化"><a href="#非持久化" class="headerlink" title="非持久化"></a>非持久化</h3><p>该模式不会将消息存储到可靠的存储介质中（例如：磁盘，DB），只会存在于内存中，如果<code>Broker</code>出现宕机，则消息会丢失</p><h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><p>该模式会将生产者发送到<code>Broker</code>的消息持久化到可靠存储介质中，即使是<code>Broker</code>出现宕机，也不会出现消息丢失的情况，但是，由于生产者或者消费者在发送或者确认消息的过程中，<br><code>Broker</code>需要将消息从可靠存储介质中保存或者删除，从而带来了IO开销，性能上比非持久化存储方式相对来说较低</p><h2 id="持久化消息和非持久化消息的发送策略"><a href="#持久化消息和非持久化消息的发送策略" class="headerlink" title="持久化消息和非持久化消息的发送策略"></a>持久化消息和非持久化消息的发送策略</h2><h3 id="消息的同步发送和异步发送"><a href="#消息的同步发送和异步发送" class="headerlink" title="消息的同步发送和异步发送"></a>消息的同步发送和异步发送</h3><p>同步发送：消息生产者发送一条消息到<code>Broker</code>上，会被阻塞直到<code>Broker</code>返回一条确认收到ACK，线程才会被释放，该方式确保了消息的可靠投递，但由于会阻塞，因此会有性能上的损耗。<br>异步发送：消息生产者发送一条消息过后立即返回，当<code>Broker</code>处理完成过后，会回调返回消息确认ACK，这种方式性能相对较高，但丢失消息的可能性相对较高。</p><p>默认情况下：非持久化的消息都是异步发送的。持久化消息在非事务模式下是同步发送的。在开启事务的情况下，消息都是异步发送。</p><p>除了默认的发送策略外，我们可以设置消息发送的策略，通过在连接URL中添加参数<code>tcp://localhost:61616?jms.useAsyncSend=true</code>，也可以调用<code>ActiveMQConnectionFactory</code>的<code>setUseAsyncSend</code>为<code>true</code></p><h2 id="消息发送原理分析"><a href="#消息发送原理分析" class="headerlink" title="消息发送原理分析"></a>消息发送原理分析</h2><p>源码分析我们从<code>producer.send(message);</code>开始，当然前面还有<code>producer</code>的创建过程，先不看。<code>producer.send(message);</code>方法首先会调用到<code>ActiveMQMessageProducer</code>的<code>send</code>方法。该方法如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ActiveMQMessageProducer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span>Destination destination<span class="token punctuation">,</span> Message message<span class="token punctuation">,</span> <span class="token keyword">int</span> deliveryMode<span class="token punctuation">,</span> <span class="token keyword">int</span> priority<span class="token punctuation">,</span> <span class="token keyword">long</span> timeToLive<span class="token punctuation">,</span> AsyncCallback onComplete<span class="token punctuation">)</span> <span class="token keyword">throws</span> JMSException <span class="token punctuation">{</span>        <span class="token function">checkClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>destination <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">getDestination</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"A destination must be specified."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidDestinationException</span><span class="token punctuation">(</span><span class="token string">"Don't understand null destinations"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ActiveMQDestination dest<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>destination<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">getDestination</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dest <span class="token operator">=</span> <span class="token punctuation">(</span>ActiveMQDestination<span class="token punctuation">)</span>destination<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">getDestination</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            dest <span class="token operator">=</span> ActiveMQDestination<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"This producer can only send messages to: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>info<span class="token punctuation">.</span><span class="token function">getDestination</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPhysicalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dest <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JMSException</span><span class="token punctuation">(</span><span class="token string">"No destination specified"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>transformer <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Message transformedMessage <span class="token operator">=</span> transformer<span class="token punctuation">.</span><span class="token function">producerTransform</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>transformedMessage <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                message <span class="token operator">=</span> transformedMessage<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>producerWindow <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                producerWindow<span class="token punctuation">.</span><span class="token function">waitForSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">JMSException</span><span class="token punctuation">(</span><span class="token string">"Send aborted due to thread interrupt."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> dest<span class="token punctuation">,</span> message<span class="token punctuation">,</span> deliveryMode<span class="token punctuation">,</span> priority<span class="token punctuation">,</span> timeToLive<span class="token punctuation">,</span> producerWindow<span class="token punctuation">,</span> sendTimeout<span class="token punctuation">,</span> onComplete<span class="token punctuation">)</span><span class="token punctuation">;</span>        stats<span class="token punctuation">.</span><span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该方法中首先判断当前会话状态是否关闭，然后如果<code>producerWindow</code>不为null则判断当前消息根据发送窗口的大小判断是否阻塞，最后调用<code>ActiveMQSession</code>的<code>send</code>方法，该方法如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ActiveMQSession</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span>ActiveMQMessageProducer producer<span class="token punctuation">,</span> ActiveMQDestination destination<span class="token punctuation">,</span> Message message<span class="token punctuation">,</span> <span class="token keyword">int</span> deliveryMode<span class="token punctuation">,</span> <span class="token keyword">int</span> priority<span class="token punctuation">,</span> <span class="token keyword">long</span> timeToLive<span class="token punctuation">,</span>                        MemoryUsage producerWindow<span class="token punctuation">,</span> <span class="token keyword">int</span> sendTimeout<span class="token punctuation">,</span> AsyncCallback onComplete<span class="token punctuation">)</span> <span class="token keyword">throws</span> JMSException <span class="token punctuation">{</span>        <span class="token function">checkClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>destination<span class="token punctuation">.</span><span class="token function">isTemporary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> connection<span class="token punctuation">.</span><span class="token function">isDeleted</span><span class="token punctuation">(</span>destination<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidDestinationException</span><span class="token punctuation">(</span><span class="token string">"Cannot publish to a deleted Destination: "</span> <span class="token operator">+</span> destination<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>sendMutex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// tell the Broker we are about to start a new transaction</span>            <span class="token function">doStartTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1]</span>            TransactionId txid <span class="token operator">=</span> transactionContext<span class="token punctuation">.</span><span class="token function">getTransactionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> sequenceNumber <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">getMessageSequence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//Set the "JMS" header fields on the original message, see 1.1 spec section 3.4.11</span>            message<span class="token punctuation">.</span><span class="token function">setJMSDeliveryMode</span><span class="token punctuation">(</span>deliveryMode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> expiration <span class="token operator">=</span> 0L<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>producer<span class="token punctuation">.</span><span class="token function">getDisableMessageTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">long</span> timeStamp <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                message<span class="token punctuation">.</span><span class="token function">setJMSTimestamp</span><span class="token punctuation">(</span>timeStamp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>timeToLive <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    expiration <span class="token operator">=</span> timeToLive <span class="token operator">+</span> timeStamp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            message<span class="token punctuation">.</span><span class="token function">setJMSExpiration</span><span class="token punctuation">(</span>expiration<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[2]</span>            message<span class="token punctuation">.</span><span class="token function">setJMSPriority</span><span class="token punctuation">(</span>priority<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[3]</span>            message<span class="token punctuation">.</span><span class="token function">setJMSRedelivered</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[4]</span>            <span class="token comment" spellcheck="true">// transform to our own message format here</span>            ActiveMQMessage msg <span class="token operator">=</span> ActiveMQMessageTransformation<span class="token punctuation">.</span><span class="token function">transformMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span>            msg<span class="token punctuation">.</span><span class="token function">setDestination</span><span class="token punctuation">(</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>            msg<span class="token punctuation">.</span><span class="token function">setMessageId</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageId</span><span class="token punctuation">(</span>producer<span class="token punctuation">.</span><span class="token function">getProducerInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProducerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sequenceNumber<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Set the message id.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>                message<span class="token punctuation">.</span><span class="token function">setJMSMessageID</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getMessageId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Make sure the JMS destination is set on the foreign messages too.</span>                message<span class="token punctuation">.</span><span class="token function">setJMSDestination</span><span class="token punctuation">(</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//clear the brokerPath in case we are re-sending this message</span>            msg<span class="token punctuation">.</span><span class="token function">setBrokerPath</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            msg<span class="token punctuation">.</span><span class="token function">setTransactionId</span><span class="token punctuation">(</span>txid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>connection<span class="token punctuation">.</span><span class="token function">isCopyMessageOnSend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                msg <span class="token operator">=</span> <span class="token punctuation">(</span>ActiveMQMessage<span class="token punctuation">)</span>msg<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            msg<span class="token punctuation">.</span><span class="token function">setConnection</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>            msg<span class="token punctuation">.</span><span class="token function">onSend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            msg<span class="token punctuation">.</span><span class="token function">setProducerId</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getMessageId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProducerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>LOG<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                LOG<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token function">getSessionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" sending message: "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//[5]</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>onComplete<span class="token operator">==</span>null <span class="token operator">&amp;&amp;</span> sendTimeout <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>msg<span class="token punctuation">.</span><span class="token function">isResponseRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>connection<span class="token punctuation">.</span><span class="token function">isAlwaysSyncSend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>msg<span class="token punctuation">.</span><span class="token function">isPersistent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> connection<span class="token punctuation">.</span><span class="token function">isUseAsyncSend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> txid <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">asyncSendPacket</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>producerWindow <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// Since we defer lots of the marshaling till we hit the</span>                    <span class="token comment" spellcheck="true">// wire, this might not</span>                    <span class="token comment" spellcheck="true">// provide and accurate size. We may change over to doing</span>                    <span class="token comment" spellcheck="true">// more aggressive marshaling,</span>                    <span class="token comment" spellcheck="true">// to get more accurate sizes.. this is more important once</span>                    <span class="token comment" spellcheck="true">// users start using producer window</span>                    <span class="token comment" spellcheck="true">// flow control.</span>                    <span class="token comment" spellcheck="true">//[6]</span>                    <span class="token keyword">int</span> size <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    producerWindow<span class="token punctuation">.</span><span class="token function">increaseUsage</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sendTimeout <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> onComplete<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">syncSendPacket</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span>sendTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>connection<span class="token punctuation">.</span><span class="token function">syncSendPacket</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> onComplete<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该方法中也是先判断当前会话，然后采用同步的方式有序的执行.</p><ul><li>标注[1]:这里表示开启一个事务</li><li>标注[2]:设置过期时间</li><li>标注[3]:设置优先级</li><li>标注[4]:设置为非重发消息</li><li>标注[5]:这里的if判断决定消息是异步发送还是同步发送，这里有两种情况：当<code>onComplete</code>没有设置，并且发送超时时间小于0，并且不是必须返回<code>response</code>响应，并且不是同步发送模式，并且消息是非持久化或者连接器是异步发送模式或者存在事务ID时走异步发送，否则走同步发送</li><li>标注[6]:异步发送会设置消息发送的大小</li></ul><h3 id="异步发送"><a href="#异步发送" class="headerlink" title="异步发送"></a>异步发送</h3><p>异步发送会调用<code>ActiveMQConnection</code>中的<code>doAsyncSendPacket</code>方法，该方法中会调用<code>transport.oneway</code>方法，那么这里的<code>transport</code>是什么呢，其实<code>transport</code>在创建<code>ActiveMQConnection</code>链接的时候就已经创建了<br>代码在<code>ActiveMQConnectionFactory.createActiveMQConnection</code>方法中，<code>Transport transport = createTransport();</code>通过<code>createTransport</code>方法创建一个<code>transport</code>，代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ActiveMQConnectionFactory</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> Transport <span class="token function">createTransport</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JMSException <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            URI connectBrokerUL <span class="token operator">=</span> brokerURL<span class="token punctuation">;</span>            String scheme <span class="token operator">=</span> brokerURL<span class="token punctuation">.</span><span class="token function">getScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>scheme <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Transport not scheme specified: ["</span> <span class="token operator">+</span> brokerURL <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>scheme<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"auto"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                connectBrokerUL <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URI</span><span class="token punctuation">(</span>brokerURL<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"auto"</span><span class="token punctuation">,</span> <span class="token string">"tcp"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>scheme<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"auto+ssl"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                connectBrokerUL <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URI</span><span class="token punctuation">(</span>brokerURL<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"auto+ssl"</span><span class="token punctuation">,</span> <span class="token string">"ssl"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>scheme<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"auto+nio"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                connectBrokerUL <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URI</span><span class="token punctuation">(</span>brokerURL<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"auto+nio"</span><span class="token punctuation">,</span> <span class="token string">"nio"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>scheme<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"auto+nio+ssl"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                connectBrokerUL <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URI</span><span class="token punctuation">(</span>brokerURL<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"auto+nio+ssl"</span><span class="token punctuation">,</span> <span class="token string">"nio+ssl"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> TransportFactory<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>connectBrokerUL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> JMSExceptionSupport<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"Could not create Transport. Reason: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过<code>TransportFactory.connect</code>静态方法创建一个<code>Transport</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">TransportFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> FactoryFinder TRANSPORT_FACTORY_FINDER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FactoryFinder</span><span class="token punctuation">(</span><span class="token string">"META-INF/services/org/apache/activemq/transport/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Transport <span class="token function">connect</span><span class="token punctuation">(</span>URI location<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        TransportFactory tf <span class="token operator">=</span> <span class="token function">findTransportFactory</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> tf<span class="token punctuation">.</span><span class="token function">doConnect</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> TransportFactory <span class="token function">findTransportFactory</span><span class="token punctuation">(</span>URI location<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String scheme <span class="token operator">=</span> location<span class="token punctuation">.</span><span class="token function">getScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>scheme <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Transport not scheme specified: ["</span> <span class="token operator">+</span> location <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        TransportFactory tf <span class="token operator">=</span> TRANSPORT_FACTORYS<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>scheme<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tf <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Try to load if from a META-INF property.</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                tf <span class="token operator">=</span> <span class="token punctuation">(</span>TransportFactory<span class="token punctuation">)</span>TRANSPORT_FACTORY_FINDER<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>scheme<span class="token punctuation">)</span><span class="token punctuation">;</span>                TRANSPORT_FACTORYS<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>scheme<span class="token punctuation">,</span> tf<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> IOExceptionSupport<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"Transport scheme NOT recognized: ["</span> <span class="token operator">+</span> scheme <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> tf<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里大概的逻辑是：先从<code>META-INF/services/org/apache/activemq/transport/</code>路径下找到指定<code>scheme</code>(这里的<code>scheme</code>是<code>tcp</code>)然后通过反射加载得到<code>org.apache.activemq.transport.tcp.TcpTransportFactory</code>，<br>然后调用<code>TcpTransportFactory</code>的<code>doConnect</code>(该方法在父类<code>TransportFactory</code>中实现)，在该方法中，有这样一句代码<code>Transport rc = configure(transport, wf, options);</code>，该方法代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">TransportFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Transport <span class="token function">configure</span><span class="token punctuation">(</span>Transport transport<span class="token punctuation">,</span> WireFormat wf<span class="token punctuation">,</span> Map options<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        transport <span class="token operator">=</span> <span class="token function">compositeConfigure</span><span class="token punctuation">(</span>transport<span class="token punctuation">,</span> wf<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>        transport <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutexTransport</span><span class="token punctuation">(</span>transport<span class="token punctuation">)</span><span class="token punctuation">;</span>        transport <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResponseCorrelator</span><span class="token punctuation">(</span>transport<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> transport<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该方法的作用是包装<code>Transport</code>，所以，最终得到的是<code>ResponseCorrelator(MutexTransport(WireFormatNegotiator(InactivityMonitor(TcpTransport))))</code>调用链，这是几个<code>Filter</code>，这几个<code>Filter</code>大致的作用是：</p><ul><li>ResponseCorrelator：用于实现异步请求</li><li>MutexTransport：实现写锁，作用是保证了客户端向<code>Broker</code>发送消息时是按照顺序进行的，即同一时间只允许一个请求</li><li>InactivityMonitor：心跳机制，客户端每10s发送一次心跳，服务端每30s接受一次心跳</li><li>WireFormatNegotiator：实现客户端连接<code>Broker</code>时先发送协议数据信息<br>然后调用<code>TcpTransportFactory</code>的<code>createTransport</code>方法，最终<code>new TcpTransport</code>对象，然后回到<code>ActiveMQConnectionFactory</code>中，在<code>createActiveMQConnection</code>方法中调用了<code>transport.start</code>方法，这里在后面讲。<br>在这里面建立和<code>Broker</code>的连接，然后将该连接的<code>Socket</code>输出流保存到<code>dataOut</code>对象中。</li></ul><p>回到<code>ActiveMQConnection</code>中的<code>doAsyncSendPacket</code>方法中，调用<code>transport.oneway</code>方法，其实是调用的<code>TcpTransport.oneway</code>方法，这里会通过<code>dataOut</code>将消息发送到<code>Broker</code>上。</p><h3 id="同步发送"><a href="#同步发送" class="headerlink" title="同步发送"></a>同步发送</h3><p>在ActiveMQ中，同步发送其实也是调用的异步发送的方法，然后阻塞等待异步结果返回。</p><h2 id="持久化消息和非持久化消息的存储原理"><a href="#持久化消息和非持久化消息的存储原理" class="headerlink" title="持久化消息和非持久化消息的存储原理"></a>持久化消息和非持久化消息的存储原理</h2><p>当我们的应用场景不允许消息的丢失的时候，可以采用消息的持久化存储的方式来达到消息的永久存在，ActiveMQ支持五种消息的持久化机制。</p><h3 id="持久化消息的物种存储方式"><a href="#持久化消息的物种存储方式" class="headerlink" title="持久化消息的物种存储方式"></a>持久化消息的物种存储方式</h3><ul><li>KahaDB：默认ActiveMQ官方推荐的消息持久化方式，配置方式：<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>persistenceAdapter</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>kahaDB</span> <span class="token attr-name">directory</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${activemq.data}/kahadb<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>persistenceAdapter</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>JDBC：将消息持久化到关系型数据库中，支持MySQL，Oracle等主流数据库，该方式会在数据库中生成三张表，分别是：<ul><li>ACTIVEMQ_MSGS:用于存储持久化消息，Queue和Topic消息都在该表中</li><li>ACTIVEMQ_ACKS:存储持久订阅消息和最后一个持久订阅接收的消息ID</li><li>ACTIVEMQ_LOCKS:锁表，用来确保同一时刻只有一个<code>Broker</code>访问数据<br>配置方式：<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>persistenceAdapter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdbcPersistenceAdapter</span> <span class="token attr-name">dataSource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#MySQL-DS <span class="token punctuation">"</span></span> <span class="token attr-name">createTablesOnStartup</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>persistenceAdapter</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li>LevelDB：性能高于KahaDB，并且支持LevelDB+Zookeeper实现数据复制，但是官方不推荐</li><li>Memory：内存，不做消息的持久化时的默认方式</li><li>JDBC With ActiveMQ Journal：该方式是为了优化JDBC的方式，延迟批量将消息持久化到关系型数据库中，<code>ActiveMQ Journal</code>使用高缓存写入技术，大大提示性能，当消费者的消费能力很强的时候能大大减少<br>关系型数据库的事务操作，配置方式：<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>persistenceFactory</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>journalPersistenceAdapterFactory</span> <span class="token attr-name">dataSource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#Mysql-DS<span class="token punctuation">"</span></span> <span class="token attr-name">dataDirectory</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>activemqdata<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>persistenceFactory</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="消息消费原理分析"><a href="#消息消费原理分析" class="headerlink" title="消息消费原理分析"></a>消息消费原理分析</h2><p>消息消费从<code>ActiveMQMessageConsumer</code>的<code>receive</code>开始，该方法首先检查连接，然后检查是否设置了<code>Listener</code>（<code>ActiveMQ</code>消费端只允许一种方式接受消息，原因是多种方式消息消费的事务性不好管控），<br>然后判断<code>prefetchSize</code>和<code>unconsumeMessages</code>是否为空，如果为空则向<code>Broker</code>发送一个拉取消息的<code>pull</code>命令，然后调用<code>dequeue</code>方法，该方法从<code>unConsumeMessages</code>中获取一个消息（如果<code>unConsumeMessages</code><br>中没有消息，则会阻塞当前线程直到<code>Broker</code>push一个消息或者超时释放），<code>unConsumeMessages</code>是一个未消费消息的通道，该通道的作用是每次从<code>Broker</code>上拉取<code>prefetchSize</code>条消息保存到本地，减少了客户端和服务端<br>频繁请求造成的网络开销。<br>继续往下，会调用<code>beforeMessageIsConsumed(md);</code>方法，该方法主要作用是做一些消息消费前的一些准备工作，如果ACK类型不是<code>DUPS_OK_ACKNOWLEDGE</code>或者不是队列类型（也就是除了<code>Topic</code>类型和<code>DUPS_OK_ACKNOWLEDGE</code>）<br>所有的消息先放到<code>deliveredMessages</code>链表的开头，并且如果是事务类型，则判断<code>transactedIndividualAck</code>，如果是true，表示单条消息直接返回ACK，否则，调用<code>ackLater</code>批量应答，消费端在消费<br>消息过后，先不发送ACK(<code>pendingACK</code>)，等到堆积的<code>pendingACK</code>达到一定的阈值过后，通过一个ACK指定将之前的所有全部确认，在性能上，这种方式会高很多。<br>然后继续往下，会调用<code>afterMessageIsConsumed</code>方法，该方法主要作用是执行应答，这里有以下几种情况</p><ul><li><p>如果消息过期，则返回消息过期的ack</p></li><li><p>如果是事务类型的会话，则不做任何处理</p></li><li><p>如果是AUTOACK或者（DUPS_OK_ACK且是队列），并且是优化ack操作，则走批量确认ack</p></li><li><p>如果是DUPS_OK_ACK，则走ackLater逻辑</p></li><li><p>如果是CLIENT_ACK，则执行ackLater<br>代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ActiveMQMessageConsumer</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">afterMessageIsConsumed</span><span class="token punctuation">(</span>MessageDispatch md<span class="token punctuation">,</span> <span class="token keyword">boolean</span> messageExpired<span class="token punctuation">)</span> <span class="token keyword">throws</span> JMSException <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>unconsumedMessages<span class="token punctuation">.</span><span class="token function">isClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>messageExpired<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">acknowledge</span><span class="token punctuation">(</span>md<span class="token punctuation">,</span> MessageAck<span class="token punctuation">.</span>EXPIRED_ACK_TYPE<span class="token punctuation">)</span><span class="token punctuation">;</span>          stats<span class="token punctuation">.</span><span class="token function">getExpiredMessageCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          stats<span class="token punctuation">.</span><span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">getTransacted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// Do nothing.</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isAutoAcknowledgeEach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>deliveryingAcknowledgements<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>deliveredMessages<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>deliveredMessages<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                          <span class="token keyword">if</span> <span class="token punctuation">(</span>optimizeAcknowledge<span class="token punctuation">)</span> <span class="token punctuation">{</span>                              ackCounter<span class="token operator">++</span><span class="token punctuation">;</span>                              <span class="token comment" spellcheck="true">// AMQ-3956 evaluate both expired and normal msgs as</span>                              <span class="token comment" spellcheck="true">// otherwise consumer may get stalled</span>                              <span class="token keyword">if</span> <span class="token punctuation">(</span>ackCounter <span class="token operator">+</span> deliveredCounter <span class="token operator">>=</span> <span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">getPrefetchSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">.</span><span class="token number">65</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>optimizeAcknowledgeTimeOut <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token punctuation">(</span>optimizeAckTimestamp <span class="token operator">+</span> optimizeAcknowledgeTimeOut<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                  MessageAck ack <span class="token operator">=</span> <span class="token function">makeAckForAllDeliveredMessages</span><span class="token punctuation">(</span>MessageAck<span class="token punctuation">.</span>STANDARD_ACK_TYPE<span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token keyword">if</span> <span class="token punctuation">(</span>ack <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                      deliveredMessages<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                      ackCounter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                      session<span class="token punctuation">.</span><span class="token function">sendAck</span><span class="token punctuation">(</span>ack<span class="token punctuation">)</span><span class="token punctuation">;</span>                                      optimizeAckTimestamp <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token punctuation">}</span>                                  <span class="token comment" spellcheck="true">// AMQ-3956 - as further optimization send</span>                                  <span class="token comment" spellcheck="true">// ack for expired msgs when there are any.</span>                                  <span class="token comment" spellcheck="true">// This resets the deliveredCounter to 0 so that</span>                                  <span class="token comment" spellcheck="true">// we won't sent standard acks with every msg just</span>                                  <span class="token comment" spellcheck="true">// because the deliveredCounter just below</span>                                  <span class="token comment" spellcheck="true">// 0.5 * prefetch as used in ackLater()</span>                                  <span class="token keyword">if</span> <span class="token punctuation">(</span>pendingAck <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> deliveredCounter <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                      session<span class="token punctuation">.</span><span class="token function">sendAck</span><span class="token punctuation">(</span>pendingAck<span class="token punctuation">)</span><span class="token punctuation">;</span>                                      pendingAck <span class="token operator">=</span> null<span class="token punctuation">;</span>                                      deliveredCounter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                  <span class="token punctuation">}</span>                              <span class="token punctuation">}</span>                          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                              MessageAck ack <span class="token operator">=</span> <span class="token function">makeAckForAllDeliveredMessages</span><span class="token punctuation">(</span>MessageAck<span class="token punctuation">.</span>STANDARD_ACK_TYPE<span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token keyword">if</span> <span class="token punctuation">(</span>ack<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                  deliveredMessages<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                  session<span class="token punctuation">.</span><span class="token function">sendAck</span><span class="token punctuation">(</span>ack<span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token punctuation">}</span>                          <span class="token punctuation">}</span>                      <span class="token punctuation">}</span>                  <span class="token punctuation">}</span>                  deliveryingAcknowledgements<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isAutoAcknowledgeBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">ackLater</span><span class="token punctuation">(</span>md<span class="token punctuation">,</span> MessageAck<span class="token punctuation">.</span>STANDARD_ACK_TYPE<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">isClientAcknowledge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">||</span>session<span class="token punctuation">.</span><span class="token function">isIndividualAcknowledge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">boolean</span> messageUnackedByConsumer <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>              <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>deliveredMessages<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  messageUnackedByConsumer <span class="token operator">=</span> deliveredMessages<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>md<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>messageUnackedByConsumer<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token function">ackLater</span><span class="token punctuation">(</span>md<span class="token punctuation">,</span> MessageAck<span class="token punctuation">.</span>DELIVERED_ACK_TYPE<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token keyword">else</span> <span class="token punctuation">{</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Invalid session state."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="unconsumedMessages数据获取过程"><a href="#unconsumedMessages数据获取过程" class="headerlink" title="unconsumedMessages数据获取过程"></a>unconsumedMessages数据获取过程</h2><p><code>unconsumedMessages</code>未消费的消息通道是在什么时候被赋值的，这应该从连接的创建过程说起，在<code>ActiveMQConnectionFactory#createActiveMQConnection</code>连接创建是调用了<code>TcpTransport#start</code>方法（实际上是<code>ServiceSupport#start</code>），该方法中<br>调用<code>TcpTransport#doStart</code>，在该方法中通过<code>connect</code>方法和<code>Broker</code>创建连接，然后调用<code>TransportThreadSupport#doStart</code>，该方法中创建了一个线程，线程的内容在<code>TcpTransport</code>中，也就是<code>TcpTransport#run</code>，然后在<br>该方法中，只要<code>TcpTransport</code>没有停止，则一直调用<code>TcpTransport#doRun</code>，然后调用<code>Object command = readCommand();</code>从<code>Broker</code>上读取一个<code>command</code>，最后调用<code>TransportSupport#doConsume</code>消费消息。<br>整个过程调用链如下：</p><pre><code>ActiveMQConnectionFactory#createConnection -&gt; ActiveMQConnectionFactory#createActiveMQConnection -&gt; ServiceSupper#start -&gt; TcpTransport#doStart -&gt; TransportThreadSupport#doStart-&gt; TcpTransport#run -&gt; TcpTransport#doRun -&gt; TransportSupport#doConsume -&gt; ActiveMQConnection#onCommand</code></pre><h3 id="ActiveMQConnection-onCommand"><a href="#ActiveMQConnection-onCommand" class="headerlink" title="ActiveMQConnection#onCommand"></a>ActiveMQConnection#onCommand</h3><p>该方法中所有消息都会调用<code>visit</code>方法，该方法接受一个<code>CommandVisitor</code>，针对不同的消息做不同的处理，代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ActiveMQConnection</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCommand</span><span class="token punctuation">(</span><span class="token keyword">final</span> Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Command command <span class="token operator">=</span> <span class="token punctuation">(</span>Command<span class="token punctuation">)</span>o<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>closed<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> command <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                command<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CommandVisitorAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> Response <span class="token function">processMessageDispatch</span><span class="token punctuation">(</span>MessageDispatch md<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                        <span class="token function">waitForTransportInterruptionProcessingToComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        ActiveMQDispatcher dispatcher <span class="token operator">=</span> dispatchers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>md<span class="token punctuation">.</span><span class="token function">getConsumerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>dispatcher <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// Copy in case a embedded broker is dispatching via</span>                            <span class="token comment" spellcheck="true">// vm://</span>                            <span class="token comment" spellcheck="true">// md.getMessage() == null to signal end of queue</span>                            <span class="token comment" spellcheck="true">// browse.</span>                            Message msg <span class="token operator">=</span> md<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                msg <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                msg<span class="token punctuation">.</span><span class="token function">setReadOnlyBody</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                msg<span class="token punctuation">.</span><span class="token function">setReadOnlyProperties</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                msg<span class="token punctuation">.</span><span class="token function">setRedeliveryCounter</span><span class="token punctuation">(</span>md<span class="token punctuation">.</span><span class="token function">getRedeliveryCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                msg<span class="token punctuation">.</span><span class="token function">setConnection</span><span class="token punctuation">(</span>ActiveMQConnection<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                msg<span class="token punctuation">.</span><span class="token function">setMemoryUsage</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>                                md<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            dispatcher<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span>md<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            LOG<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"{} no dispatcher for {} in {}"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> md<span class="token punctuation">,</span> dispatchers<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">return</span> null<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> Response <span class="token function">processProducerAck</span><span class="token punctuation">(</span>ProducerAck pa<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>pa <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> pa<span class="token punctuation">.</span><span class="token function">getProducerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            ActiveMQMessageProducer producer <span class="token operator">=</span> producers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pa<span class="token punctuation">.</span><span class="token function">getProducerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>producer <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                producer<span class="token punctuation">.</span><span class="token function">onProducerAck</span><span class="token punctuation">(</span>pa<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">return</span> null<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> Response <span class="token function">processBrokerInfo</span><span class="token punctuation">(</span>BrokerInfo info<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                        brokerInfo <span class="token operator">=</span> info<span class="token punctuation">;</span>                        brokerInfoReceived<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        optimizeAcknowledge <span class="token operator">&amp;=</span> <span class="token operator">!</span>brokerInfo<span class="token punctuation">.</span><span class="token function">isFaultTolerantConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">getBlobTransferPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBrokerUploadUrl</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">getBrokerUploadUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> null<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> Response <span class="token function">processConnectionError</span><span class="token punctuation">(</span><span class="token keyword">final</span> ConnectionError error<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                        executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token annotation punctuation">@Override</span>                            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token function">onAsyncException</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span><span class="token function">getException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> null<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> Response <span class="token function">processControlCommand</span><span class="token punctuation">(</span>ControlCommand command<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                        <span class="token keyword">return</span> null<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> Response <span class="token function">processConnectionControl</span><span class="token punctuation">(</span>ConnectionControl control<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                        <span class="token function">onConnectionControl</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ConnectionControl<span class="token punctuation">)</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> null<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> Response <span class="token function">processConsumerControl</span><span class="token punctuation">(</span>ConsumerControl control<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                        <span class="token function">onConsumerControl</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ConsumerControl<span class="token punctuation">)</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> null<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> Response <span class="token function">processWireFormat</span><span class="token punctuation">(</span>WireFormatInfo info<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                        <span class="token function">onWireFormatInfo</span><span class="token punctuation">(</span><span class="token punctuation">(</span>WireFormatInfo<span class="token punctuation">)</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> null<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">onClientInternalException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Iterator<span class="token operator">&lt;</span>TransportListener<span class="token operator">></span> iter <span class="token operator">=</span> transportListeners<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> iter<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            TransportListener listener <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            listener<span class="token punctuation">.</span><span class="token function">onCommand</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果传入的消息是<code>MessageDispatch</code>，则会调用<code>processMessageDispatch</code>方法，在该方法中最终会调用<code>ActiveMQMessageConsumer</code>中的<code>dispatch</code>方法，<code>unConsumedMessages</code>的值就是在该方法中<code>enqueue</code>的。</p><p>总结：消费者在启动的时候会创建一个线程不断的从客户端和<code>Broker</code>的<code>Socket</code>连接中读取数据，然后交给<code>TransportListener</code>（这里的实现是<code>ActiveMQConnection</code>）处理，<br>消息的消费其实是从一个未消费的消息通道<code>unConsumedMessages</code>里面拿的，拿消息之前会判断当前<code>unConsumedMessages</code>中是否存在未消费的消息，如果不存在消息并且<code>prefetchSize</code>等于0，<br>则向<code>Broker</code>发送一条<code>pullCommand</code>指令，然后调用<code>dequeue</code>方法（该方法会被阻塞知道拿到消息后返回），然后<code>Broker</code>会向客户端<code>push</code>指定条数（prefetchSize）的消息（这里是异步实现，消息会<br>被<code>Transport</code>线程读取，然后交给<code>ActiveMQConnection#onCommand</code>监听器分发消息，最终会把消息<code>enqueue</code>到<code>unConsumedMessages</code>中），当<code>unConsumedMessages</code>有消息过后，<code>dequeue</code>方法解除<br>阻塞，返回消息，然后执行消息确认过程。</p><h2 id="prefetchSize与optimizeAcknowledge"><a href="#prefetchSize与optimizeAcknowledge" class="headerlink" title="prefetchSize与optimizeAcknowledge"></a>prefetchSize与optimizeAcknowledge</h2><ul><li>prefetchSize:窗口机制（消息的批量拉取）<br>不同的类型的队列，prefetchSize 的默认值也是不一样的，如下：<ol><li>持久化队列和非持久化Queue（队列），prefetchSize默认值为1000；</li><li>持久化 topic ，prefetchSize 默认值为100；</li><li>非持久化消息，prefetchSize 默认值为 Short.MAX_VALUE -1</li></ol></li></ul><p>配置方式：</p><pre><code>Destination destination = session.createQueue(&quot;myQueue?consumer.prefetchSize=88&quot;);</code></pre><ul><li>optimizeAcknowledge:消息优化确认，优化ACK，只有<code>optimizeAcknowledge</code>为true时，<code>prefetchSize</code>和<code>optimizeAcknowledgeTimeout</code>才有意义。消息的批量确认，也是一种减少网络开销的一种手段，<br>如果我们不开启优化ACK，那么<code>Broker</code>push一批消息到客户端过后，客户端消费一条消息向<code>Broker</code>确认一次，<code>Broker</code>向客户端push一条消息，这样达不到批量的效果（假批量），所以一般情况下，这两个<br>配置是同事存在的，默认消息消费超过<code>65%</code>会发送一次批量确认（也就是1000*.65=650）。</li></ul><p>配置方式：</p><pre><code>ConnectionFactory connectionFactory= new ActiveMQConnectionFactory(&quot;tcp://localhost:61616?jms.optimizeAcknowledge=true&amp;jms.optimizeAcknowledgeTimeOut=10000&quot;);</code></pre><h2 id="消息的重发机制"><a href="#消息的重发机制" class="headerlink" title="消息的重发机制"></a>消息的重发机制</h2><p>正常情况下，触发消息重发的有两种情况</p><ul><li>事务性会话中，没有调用<code>session.commit</code>或者调用<code>session.rollback</code></li><li>非事务性会话中，没有调用<code>acknowledge</code>或者调用<code>recover</code></li></ul><p>一个消息被<code>redelivedred</code>超过6次，客户端会给<code>Broker</code>发送一个<code>poisonACK</code>，告诉<code>Broker</code>不要再重发消息了，然后<code>Broker</code>会将该条消息放入到DLQ（死信队列）中。</p><h2 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h2><p>ActiveMQ中默认的死信队列是<code>ActiveMQ.DLQ</code>，没有特殊的的配置，重发超过6次的消息都会被放到该队列中，默认情况下，如果持久消息过期后，也会被放到该死信队列中。<br>默认所有队列的死信队列都是<code>ActiveMQ.DLQ</code>，不便于管理，可以通过配置来针对某个队列配置特定的私信队列，配置如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>destinationPolicy</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>policyMap</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>policyEntries</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>policyEntry</span> <span class="token attr-name">topic</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pendingMessageLimitStrategy</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constantPendingMessageLimitStrategy</span> <span class="token attr-name">limit</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pendingMessageLimitStrategy</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>policyEntry</span><span class="token punctuation">></span></span>              <span class="token comment" spellcheck="true">&lt;!-->:表示对所有队列生效，指定队列直接写队列名称--></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>policyEntry</span> <span class="token attr-name">queue</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>deadLetterStrategy</span><span class="token punctuation">></span></span>                     <span class="token comment" spellcheck="true">&lt;!--queuePrefix:设置死信队列前缀--></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>individualDeadLetterStrategy</span> <span class="token attr-name">queuePrefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DLQ.<span class="token punctuation">"</span></span> <span class="token attr-name">useQueueForQueueMessages</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">processExpired</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                     <span class="token comment" spellcheck="true">&lt;!--是否丢弃过期消息--></span>                    <span class="token comment" spellcheck="true">&lt;!--&lt;sharedDeadLetterStrategy processExpired="false" />--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>deadLetterStrategy</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>policyEntry</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>policyEntries</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>policyMap</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>destinationPolicy</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="死信队列的再次消费"><a href="#死信队列的再次消费" class="headerlink" title="死信队列的再次消费"></a>死信队列的再次消费</h3><p>死信队列也是一个队列，在定位到问题原因过后，可以手动消费死信队列的消息。</p><h2 id="ActiveMQ静态网络配置"><a href="#ActiveMQ静态网络配置" class="headerlink" title="ActiveMQ静态网络配置"></a>ActiveMQ静态网络配置</h2><p>ActiveMQ支持使用网络配置的方式来达到集群的效果，ActiveMQ中的网络配置方式有两种，静态网络配置和动态网络配置。</p><ul><li>静态网络配置，配置方式如下</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>networkConnectors</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>networkConnector</span> <span class="token attr-name">uri</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>static://(tcp://192.168.10.1:61616,tcp://192.168.10.2:61616)<span class="token punctuation">"</span></span> <span class="token attr-name">duplex</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>networkConnectors</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>动态网络配置，该方式使用广播协议将其他的<code>Broker</code>连接起来，可以自动发现其他的<code>Broker</code>节点，这种方式替代了静态网络连接配置方式。</li></ul><p>消息回流：从5.6版本开始，ActiveMQ的网络配置方式集群支持消息回流，该功能解决了当<code>Broker1</code>上有需要转发的消息未消费时，将消息回流到原来的<code>Broker</code>上。需要配置如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>policyEntry</span> <span class="token attr-name">queue</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">enableAudit</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>networkBridgeFilterFactory</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>conditionalNetworkBridgeFilterFactory</span> <span class="token attr-name">replayWhenNoConsumers</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>networkBridgeFilterFactory</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>policyEntry</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置消息回流需要配置<code>networkConnector</code>节点的<code>duplex</code>的属性为true。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><blockquote><p><a href="https://blog.csdn.net/lzb348110175/article/details/100132006" target="_blank" rel="noopener">https://blog.csdn.net/lzb348110175/article/details/100132006</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ActiveMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ActiveMQ </tag>
            
            <tag> JMS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo源码分析</title>
      <link href="/2019/11/21/Dubbo%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2019/11/21/Dubbo%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="Dubbo-SPI"><a href="#Dubbo-SPI" class="headerlink" title="Dubbo SPI"></a>Dubbo SPI</h2><h3 id="Dubbo-SPI使用以及规范"><a href="#Dubbo-SPI使用以及规范" class="headerlink" title="Dubbo SPI使用以及规范"></a>Dubbo SPI使用以及规范</h3><ul><li>创建接口并且加上@SPI注解表示该接口是一个Dubbo扩展点，将该扩展点打成一个jar包发布<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SPI</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IHelloService</span> <span class="token punctuation">{</span>  String <span class="token function">sayHello</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>在需要实现的扩展插件项目中依赖以上接口扩展点，并且实现该接口扩展点<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IHelloService</span> <span class="token punctuation">{</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">"Dubbo SPI Hello:"</span> <span class="token operator">+</span> msg<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>并且在resources目录先创建META-INF/dubbo/(META-INF/dubbo/;META-INF/dubbo/internal/;META-INF/services/;任选一个)目录，并且在该目录下创建以扩展点接口为名称的文件：xyz.easyjava.dubbo.spi.extend.service.IHelloService<br>在该文件中填写该扩展点实现的名称以及实现类的全路径，例如：<pre class="line-numbers language-java"><code class="language-java">hello<span class="token operator">=</span>xyz<span class="token punctuation">.</span>easyjava<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>spi<span class="token punctuation">.</span>achieve<span class="token punctuation">.</span>service<span class="token punctuation">.</span>HelloServiceImplhello2<span class="token operator">=</span>xyz<span class="token punctuation">.</span>easyjava<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>spi<span class="token punctuation">.</span>achieve<span class="token punctuation">.</span>service<span class="token punctuation">.</span>HelloServiceImpl2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>现在就可以在需要使用该扩展的地方使用了，方式如下：<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DubboSpiTest</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      IHelloService extension <span class="token operator">=</span> ExtensionLoader<span class="token punctuation">.</span><span class="token function">getExtensionLoader</span><span class="token punctuation">(</span>IHelloService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExtension</span><span class="token punctuation">(</span><span class="token string">"hello2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>extension<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">"MrAToo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      IHelloService adaptiveExtension <span class="token operator">=</span> ExtensionLoader<span class="token punctuation">.</span><span class="token function">getExtensionLoader</span><span class="token punctuation">(</span>IHelloService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAdaptiveExtension</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>adaptiveExtension<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">"MrAToo2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>先从<code>ExtensionLoader.getExtensionLoader(IHelloService.class).getAdaptiveExtension();</code>开始</p><ol><li><p>首先是调用了<code>ExtensionLoader</code>类的静态方法<code>getExtensionLoader(IHelloService.class)</code>，在该方法中除了校验，主要是实例化了一个<code>ExtensionLoader</code>实例，<br>并且在<code>ExtensionLoader</code>的构造方法中通过<code>objectFactory = (type == ExtensionFactory.class ? null : ExtensionLoader.getExtensionLoader(ExtensionFactory.class).getAdaptiveExtension());</code><br>创建了一个<code>objectFactory</code>对象，该对象是一个<code>ExtensionFactory</code></p></li><li><p>得到<code>ExtensionLoader</code>实例对象过后，调用了该对象的<code>getAdaptiveExtension()</code>方法，在该方法中调用<code>createAdaptiveExtension()</code>创建实例，在<code>createAdaptiveExtension()</code>里面调用<br><code>injectExtension((T) getAdaptiveExtensionClass().newInstance());</code>，该方法是一个注入的方法，先不看<code>injectExtension()</code>方法是如何注入的，我们先看实例是如何创建的，很显然，实例作为<code>injectExtension()</code><br>方法的参数传入，那么<code>getAdaptiveExtensionClass().newInstance()</code>这句代码中的<code>getAdaptiveExtensionClass()</code>方法返回的Class<t>中T是如何确定的。在<code>getAdaptiveExtensionClass()</code>方法中，首先调用了<code>getExtensionClasses();</code><br>然后判断<code>cachedAdaptiveClass</code>是否为null，如果不为null，则直接返回<code>cachedAdaptiveClass</code>，那么再看看<code>getExtensionClasses();</code>方法中又干了什么，在该方法中又调用了<code>loadExtensionClasses()</code>，下面来看看该方法的代码：</t></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> <span class="token function">loadExtensionClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">final</span> SPI defaultAnnotation <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>SPI<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>defaultAnnotation <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>     String value <span class="token operator">=</span> defaultAnnotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         String<span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> NAME_SEPARATOR<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>names<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"more than 1 default extension name on extension "</span> <span class="token operator">+</span> type<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                     <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>names<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             cachedDefaultName <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> extensionClasses <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">loadDirectory</span><span class="token punctuation">(</span>extensionClasses<span class="token punctuation">,</span> DUBBO_INTERNAL_DIRECTORY<span class="token punctuation">,</span> type<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">loadDirectory</span><span class="token punctuation">(</span>extensionClasses<span class="token punctuation">,</span> DUBBO_INTERNAL_DIRECTORY<span class="token punctuation">,</span> type<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"org.apache"</span><span class="token punctuation">,</span> <span class="token string">"com.alibaba"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">loadDirectory</span><span class="token punctuation">(</span>extensionClasses<span class="token punctuation">,</span> DUBBO_DIRECTORY<span class="token punctuation">,</span> type<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">loadDirectory</span><span class="token punctuation">(</span>extensionClasses<span class="token punctuation">,</span> DUBBO_DIRECTORY<span class="token punctuation">,</span> type<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"org.apache"</span><span class="token punctuation">,</span> <span class="token string">"com.alibaba"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">loadDirectory</span><span class="token punctuation">(</span>extensionClasses<span class="token punctuation">,</span> SERVICES_DIRECTORY<span class="token punctuation">,</span> type<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">loadDirectory</span><span class="token punctuation">(</span>extensionClasses<span class="token punctuation">,</span> SERVICES_DIRECTORY<span class="token punctuation">,</span> type<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"org.apache"</span><span class="token punctuation">,</span> <span class="token string">"com.alibaba"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> extensionClasses<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先是判断<code>type</code>的类对象是否包含@SPI注解，如果包含该注解，则将该注解的value值放到<code>cachedDefaultName</code>属性中（该属性在<code>createAdaptiveExtensionClassCode</code>方法中使用到，可以通过<code>getDefaultExtensionName</code>方法获取默认扩展点，如果自适应扩展点中URL协议为空该值可以作为默认协议），<br>最后调用<code>loadDirectory(extensionClasses, DUBBO_DIRECTORY, type.getName());</code>分别加载<code>META-INF/dubbo/;META-INF/dubbo/internal/;META-INF/services/;</code>三个目录下的文件，最终会调用一下方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** extensionClasses: 扩展类集合* resourceURL: 资源URL* clazz: 扩展类Class（实现了扩展接口的类，配置在接口文件中的Class）* name: 名称*/</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">loadClass</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> extensionClasses<span class="token punctuation">,</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL resourceURL<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchMethodException <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>type<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Error when load extension class(interface: "</span> <span class="token operator">+</span>             type <span class="token operator">+</span> <span class="token string">", class line: "</span> <span class="token operator">+</span> clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"), class "</span>             <span class="token operator">+</span> clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"is not subtype of interface."</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>Adaptive<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedAdaptiveClass <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         cachedAdaptiveClass <span class="token operator">=</span> clazz<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cachedAdaptiveClass<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"More than 1 adaptive class found: "</span>                 <span class="token operator">+</span> cachedAdaptiveClass<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> clazz<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isWrapperClass</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> wrappers <span class="token operator">=</span> cachedWrapperClasses<span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>wrappers <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         cachedWrapperClasses <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashSet</span><span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         wrappers <span class="token operator">=</span> cachedWrapperClasses<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     wrappers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>     clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> null <span class="token operator">||</span> name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         name <span class="token operator">=</span> <span class="token function">findAnnotationName</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"No such extension name for the class "</span> <span class="token operator">+</span> clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" in the config "</span> <span class="token operator">+</span> resourceURL<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     String<span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> NAME_SEPARATOR<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>names <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> names<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         Activate activate <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Activate<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>activate <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>             cachedActivates<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> activate<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// support com.alibaba.dubbo.common.extension.Activate</span>             com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>Activate oldActivate <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>Activate<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>oldActivate <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 cachedActivates<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> oldActivate<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>String n <span class="token operator">:</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cachedNames<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 cachedNames<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c <span class="token operator">=</span> extensionClasses<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 extensionClasses<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Duplicate extension "</span> <span class="token operator">+</span> type<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" name "</span> <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token string">" on "</span> <span class="token operator">+</span> c<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" and "</span> <span class="token operator">+</span> clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>先看第一个判断<code>clazz.isAnnotationPresent(Adaptive.class)</code>，如果扩展类包含<code>@Adaptive</code>注解，则将该扩展作为自定义适配扩展点，赋值给<code>cachedAdaptiveClass</code>，前面提到在<code>getExtensionClasses</code>方法中，如果<code>cachedAdaptiveClass</code>值不为null，则直接返回，<br>所以，当实现接口的类上有<code>@Adaptive</code>注解，则<code>getAdaptiveExtension();</code>返回的实例就是当前实例，即自定义适配扩展点。</p></li><li><p>再看第二个判断<code>isWrapperClass(clazz)</code>,判断当前这个扩展是不是一个wrapper，如果是，则将该扩展类放入到<code>cachedWrapperClasses</code>中，该变量在<code>getExtension</code>方法调用链<code>createExtension</code>方法中被使用，大概源码内容为，如果<code>cachedWrapperClasses</code>变量有值，则需要包装原始对象。</p></li><li><p>如果以上两个条件都不成立，则走else逻辑，在该逻辑中，首先判断当前扩展类中是否包含<code>@Activate</code>注解，如果包含，则put到<code>cachedActivates</code>中。<br>在判断<code>cachedNames</code>中是否包含当前扩展类的类对象，如果不存在，则将class放到<code>cachedNames</code>里面，最后循环将name作为key，class作为value放到<code>extensionClasses</code>中。</p></li></ol><p>我们在回过头来看，在<code>getAdaptiveExtensionClass</code>方法中，如果<code>cachedAdaptiveClass</code>为null，则会调用<code>createAdaptiveExtensionClass</code>方法，并且将该方法的返回值放入到<code>cachedAdaptiveClass</code>中，然后返回。<br>在<code>createAdaptiveExtensionClass</code>方法中，通过调用<code>createAdaptiveExtensionClassCode</code>方法返回一串代码，然后动态编译生成Class对象，然后返回。<br>那么在<code>createAdaptiveExtensionClassCode</code>（该方法主要是生成一个代理类）中，这串代码到底是什么，又是如何生成的呢？<br>首先，dubbo只会为该接口中带有<code>@Adaptive</code>注解的方法进行代理，如果该接口中没有带<code>@Adaptive</code>注解的方法，则会抛出异常，并且，Dubbo是一个基于URL驱动的RPC框架，方法中标注有<code>@Adaptive</code>注解的方法参数上必须<br>带有<code>java.net.URL</code>参数，否则，会抛出异常。<br>生成的代理类代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> xyz<span class="token punctuation">.</span>easyjava<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>spi<span class="token punctuation">.</span>achieve<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>ExtensionLoader<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Protocol</span>$Adaptive <span class="token keyword">implements</span> <span class="token class-name">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span>Protocol</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"method public abstract void org.apache.dubbo.rpc.Protocol.destroy() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getDefaultPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"method public abstract int org.apache.dubbo.rpc.Protocol.getDefaultPort() of interface org.apache.dubbo.rpc.Protocol is not adaptive method!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span>Exporter <span class="token function">export</span><span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span>Invoker arg0<span class="token punctuation">)</span> <span class="token keyword">throws</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span>RpcException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arg0 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"org.apache.dubbo.rpc.Invoker argument == null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arg0<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"org.apache.dubbo.rpc.Invoker argument getUrl() == null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>URL url <span class="token operator">=</span> arg0<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String extName <span class="token operator">=</span> <span class="token punctuation">(</span> url<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token string">"dubbo"</span> <span class="token operator">:</span> url<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>extName <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Fail to get extension(org.apache.dubbo.rpc.Protocol) name from url("</span> <span class="token operator">+</span> url<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">") use keys([protocol])"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span>Protocol extension <span class="token operator">=</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span>Protocol<span class="token punctuation">)</span>ExtensionLoader<span class="token punctuation">.</span><span class="token function">getExtensionLoader</span><span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span>Protocol<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExtension</span><span class="token punctuation">(</span>extName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> extension<span class="token punctuation">.</span><span class="token function">export</span><span class="token punctuation">(</span>arg0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span>Invoker <span class="token function">refer</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Class <span class="token class-name">arg0</span><span class="token punctuation">,</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>URL arg1<span class="token punctuation">)</span> <span class="token keyword">throws</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span>RpcException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arg1 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"url == null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>URL url <span class="token operator">=</span> arg1<span class="token punctuation">;</span>        String extName <span class="token operator">=</span> <span class="token punctuation">(</span> url<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token string">"dubbo"</span> <span class="token operator">:</span> url<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>extName <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Fail to get extension(org.apache.dubbo.rpc.Protocol) name from url("</span> <span class="token operator">+</span> url<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">") use keys([protocol])"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span>Protocol extension <span class="token operator">=</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span>Protocol<span class="token punctuation">)</span>ExtensionLoader<span class="token punctuation">.</span><span class="token function">getExtensionLoader</span><span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span>Protocol<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExtension</span><span class="token punctuation">(</span>extName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> extension<span class="token punctuation">.</span><span class="token function">refer</span><span class="token punctuation">(</span>arg0<span class="token punctuation">,</span> arg1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面生成的类来看，dubbo对扩展接口上带有<code>@Adaptive</code>注解的方法进行了代理，没有标注<code>@Adaptive</code>的方法，直接抛出<code>UnsupportedOperationException</code>异常。被代理的方法通过URL协议来获取一个扩展点。</p><p>接下来，分析<code>injectExtension()</code>方法，也就是Dubbo中的依赖注入，Duboo支持Spring的依赖注入以及Dubbo自己的SPI自适应扩展点。<br>在该方法中可以看出，当前自适应扩展点中是否包含一个setter方法，有且只有一个参数的public的方法，并且该方法没有标注<code>@DisableInject</code>注解，那么Dubbo会为该自适应扩展点依赖注入。<br>被注入的对象核心代码在<code>objectFactory.getExtension(pt, property)</code>通过<code>objectFactory</code>的<code>getExtension</code>方法获得被注入的对象，然后放到当前自适应扩展点，实现依赖注入。<br>那么<code>objectFactory</code>对象是什么，在什么时候被实例化的？<br>还记得在最开始通过<code>getExtensionLoader(IHelloService.class)</code>获得一个<code>ExtensionLoader</code>对象的时候，由于<code>ExtensionLoader</code>类的构造方法是私有化的，所以在<code>getExtensionLoader</code>方法中<br>创建了<code>ExtensionLoader</code>对象，然而就在这个私有化的构造方法中，有这样一句代码</p><pre class="line-numbers language-java"><code class="language-java">objectFactory <span class="token operator">=</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> ExtensionFactory<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">?</span> null <span class="token operator">:</span> ExtensionLoader<span class="token punctuation">.</span><span class="token function">getExtensionLoader</span><span class="token punctuation">(</span>ExtensionFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAdaptiveExtension</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这就是<code>objectFactory</code>对象实例化的地方。<br>这里有创建了一个<code>ExtensionFactory</code>类的<code>ExtensionLoader</code>对象，并且将这个对象缓存在了<code>EXTENSION_LOADERS</code>（所以，整个运行过程中<code>ExtensionFactory</code>只有一个，并且都是<code>AdaptiveExtensionFactory</code>），然后调用了该对象的<code>getAdaptiveExtension</code>方法，该方法前面已经分析过来，<br>返回一个自适应扩展点。然后我们看<code>ExtensionFactory</code>的实现类，有一个名为<code>AdaptiveExtensionFactory</code>的自适应扩展点（因为该类上面标注了<code>@Adaptive</code>注解），所以我们可以发现<code>objectFactory</code><br>对象的实例其实就是<code>AdaptiveExtensionFactory</code>类的实例对象。回到<code>injectExtension</code>方法的<code>objectFactory.getExtension(pt, property)</code>代码上，这里实际上调用的就是<code>AdaptiveExtensionFactory</code><br>里面的<code>getExtension</code>方法。该方法如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getExtension</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> type<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ExtensionFactory factory <span class="token operator">:</span> factories<span class="token punctuation">)</span> <span class="token punctuation">{</span>            T extension <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getExtension</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>extension <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> extension<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>factories</code>就是所有的<code>ExtensionFactory</code>类的扩展，从所有的扩展点中任意返回一个null的实例返回，dubbo默认有<code>SpringExtensionFactory</code>、<code>SPIExtensionFactory</code>两个，<code>SpringExtensionFactory</code>的实现<br>就是从Spring的IOC容器中拿到对象注入。如果被注入对象类上标注了<code>@SPI</code>注解，那么最终还是交给<code>SPIExtensionFactory</code>对象去处理，该类里面有是通过<code>ExtensionLoader</code>得到一个自适应扩展点。到此，Dubbo的依赖注入完成。<br>类图：<br><img src="/2019/11/21/Dubbo源码分析/ExtensionLoader.png" alt="ExtensionLoader"></p><h2 id="服务发布流程"><a href="#服务发布流程" class="headerlink" title="服务发布流程"></a>服务发布流程</h2><p>Dubbo是阿里巴巴依赖Spring开源的RPC框架，至于为什么要依赖Spring我们不去深究，大概是因为Spring优秀的IOC，又或者是AOP，介于Spring的高度抽象，灵活的设计模式，便于去扩展，所以，Dubbo基于Spring的扩展区实现<br>Dubbo基于Spring扩展的<code>NameSpaceHandler</code>，Spring容器在启动的时候会调用<code>DubboNamespaceHandler</code>的<code>init()</code>方法，该方法主要是解析Spring配置文件中的Dubbo扩展标签，将其转换成<code>BeanDefinition</code>，以便Spring容器进行管理。<br>Dubbo服务的发布流程是从ServiceBean开始的，因为该类实现了接口<code>InitializingBean</code>，该接口会在依赖注入完成过后调用<code>afterPropertiesSet</code>方法，而<code>afterPropertiesSet</code>方法就是Dubbo启动的关键。<br>首先在<code>afterPropertiesSet</code>方法中经过一些校验，在最后几行代码中，判断，是否支持SpringListener，如果不支持这调用<code>export</code>方法，如果支持，则会在Spring启动过程中执行<code>ServiceBean</code>中<code>onApplicationEvent</code>方法，总之都会调用到<code>export</code>方法，<br>在<code>export</code>方法中主要是调用<code>ServiceBean</code>父类<code>ServiceConfig</code>的<code>export</code>方法，在该方法中，首先也是一堆的校验，最后调用<code>doExport</code>方法，继续往下看，<code>doExportUrls()</code>方法中首先是将所有的注册中心配置拼装成一个URL集合，类似如下：<br><code>registry://localhost:2181/org.apache.dubbo.registry.RegistryService?application=easyjava-dubbo-provider&amp;dubbo=2.0.2&amp;pid=205792&amp;registry=zookeeper&amp;release=2.7.0&amp;timestamp=1574749134905</code>，然后用循环的方式调用<code>doExportUrlsFor1Protocol</code>，<br>该方法主要作用是将服务拼装成一个URL，如下：</p><pre><code>dubbo://10.98.217.74:20880/xyz.easyjava.dubbo.api.IHelloService?anyhost=true&amp;application=easyjava-dubbo-provider&amp;bean.name=xyz.easyjava.dubbo.api.IHelloService&amp;bind.ip=10.98.217.74&amp;bind.port=20880&amp;dubbo=2.0.2&amp;generic=false&amp;interface=xyz.easyjava.dubbo.api.IHelloService&amp;methods=sayHello&amp;pid=205792&amp;release=2.7.0&amp;side=provider&amp;timestamp=1574749545179</code></pre><p>最后将调用一下这句代码</p><pre class="line-numbers language-java"><code class="language-java">Invoker<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> invoker <span class="token operator">=</span> proxyFactory<span class="token punctuation">.</span><span class="token function">getInvoker</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> <span class="token punctuation">(</span>Class<span class="token punctuation">)</span> interfaceClass<span class="token punctuation">,</span> registryURL<span class="token punctuation">.</span><span class="token function">addParameterAndEncoded</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>EXPORT_KEY<span class="token punctuation">,</span> url<span class="token punctuation">.</span><span class="token function">toFullString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>DelegateProviderMetaDataInvoker wrapperInvoker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelegateProviderMetaDataInvoker</span><span class="token punctuation">(</span>invoker<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Exporter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> exporter <span class="token operator">=</span> protocol<span class="token punctuation">.</span><span class="token function">export</span><span class="token punctuation">(</span>wrapperInvoker<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>proxyFactory</code>是一个自适应扩展点，是<code>ServiceConfig</code>的成员变量<br><code>private static final ProxyFactory proxyFactory = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();</code><br><code>ProxyFactory</code>默认扩展点是<code>JavassistProxyFactory</code>，并且该扩展点有一个包装器<code>StubProxyFactoryWrapper</code>，所以，<code>proxyFactory</code>实际上是<code>StubProxyFactoryWrapper(JavassistProxyFactory())</code><br>调用<code>StubProxyFactoryWrapper(JavassistProxyFactory())</code>的<code>getInvoker</code>方法，实际上最终会调用到<code>JavassistProxyFactory</code>的<code>getInvoker</code>方法，传入三个参数，第一个<code>ref</code>是当前服务接口的实现类，<br>例如：<code>HelloServiceImpl</code>，第二个参数<code>(Class) interfaceClass</code>是当前服务接口的类对象，第三个参数是注册中心加上服务地址拼接成的一个注册中心地址，服务地址作为注册中心的<code>export</code>参数，如下：</p><pre><code>registry://localhost:2181/org.apache.dubbo.registry.RegistryService?application=easyjava-dubbo-provider&amp;dubbo=2.0.2&amp;export=dubbo%3A%2F%2F10.98.217.74%3A20880%2Fxyz.easyjava.dubbo.api.IHelloService%3Fanyhost%3Dtrue%26application%3Deasyjava-dubbo-provider%26bean.name%3Dxyz.easyjava.dubbo.api.IHelloService%26bind.ip%3D10.98.217.74%26bind.port%3D20880%26dubbo%3D2.0.2%26generic%3Dfalse%26interface%3Dxyz.easyjava.dubbo.api.IHelloService%26methods%3DsayHello%26pid%3D205792%26release%3D2.7.0%26side%3Dprovider%26timestamp%3D1574749545179&amp;pid=205792&amp;registry=zookeeper&amp;release=2.7.0&amp;timestamp=1574749134905</code></pre><p>在该方法中，主要做了两件事情：</p><ol><li>创建一个当前实例对象的<code>Wrapper</code>（代理对象），这里为什么需要有这样一层包装，我猜想的话应该是Dubbo的调用是通过URL进行的，我们可以方便的通过传入参数来决定调用哪个方法，我们通过<code>Arthas</code>来看一下<code>Wrapper</code>对象代码：</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>bytecode<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>bytecode<span class="token punctuation">.</span>ClassGenerator<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>bytecode<span class="token punctuation">.</span>NoSuchMethodException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>bytecode<span class="token punctuation">.</span>NoSuchPropertyException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>bytecode<span class="token punctuation">.</span>Wrapper<span class="token punctuation">;</span><span class="token keyword">import</span> xyz<span class="token punctuation">.</span>easyjava<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>service<span class="token punctuation">.</span>HelloServiceImpl<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Wrapper1</span><span class="token keyword">extends</span> <span class="token class-name">Wrapper</span><span class="token keyword">implements</span> <span class="token class-name">ClassGenerator<span class="token punctuation">.</span>DC</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> pns<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Map pts<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> mns<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> dmns<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Class<span class="token punctuation">[</span><span class="token punctuation">]</span> mts0<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getPropertyNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> pns<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasProperty</span><span class="token punctuation">(</span>String string<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> pts<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Class <span class="token class-name">getPropertyType</span><span class="token punctuation">(</span>String string<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>Class<span class="token punctuation">)</span>pts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getMethodNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mns<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getDeclaredMethodNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> dmns<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPropertyValue</span><span class="token punctuation">(</span>Object object<span class="token punctuation">,</span> String string<span class="token punctuation">,</span> Object object2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            HelloServiceImpl helloServiceImpl <span class="token operator">=</span> <span class="token punctuation">(</span>HelloServiceImpl<span class="token punctuation">)</span>object<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchPropertyException</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Not found property \""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\" field or setter method in class xyz.easyjava.dubbo.provider.service.HelloServiceImpl."</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">getPropertyValue</span><span class="token punctuation">(</span>Object object<span class="token punctuation">,</span> String string<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            HelloServiceImpl helloServiceImpl <span class="token operator">=</span> <span class="token punctuation">(</span>HelloServiceImpl<span class="token punctuation">)</span>object<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchPropertyException</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Not found property \""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\" field or setter method in class xyz.easyjava.dubbo.provider.service.HelloServiceImpl."</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Object <span class="token function">invokeMethod</span><span class="token punctuation">(</span>Object object<span class="token punctuation">,</span> String string<span class="token punctuation">,</span> Class<span class="token punctuation">[</span><span class="token punctuation">]</span> arrclass<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> arrobject<span class="token punctuation">)</span> <span class="token keyword">throws</span> InvocationTargetException <span class="token punctuation">{</span>        HelloServiceImpl helloServiceImpl<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            helloServiceImpl <span class="token operator">=</span> <span class="token punctuation">(</span>HelloServiceImpl<span class="token punctuation">)</span>object<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"sayHello"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arrclass<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> helloServiceImpl<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>arrobject<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">(</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Not found method \""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\" in class xyz.easyjava.dubbo.provider.service.HelloServiceImpl."</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>创建一个匿名AbstractProxyInvoker，且<code>doInvoke</code>方法实际上是调用的<code>Wrapper</code>代理对象的<code>invokeMethod</code>方法<br>最后，该方法会返回一个<code>AbstractProxyInvoker</code>，其中<code>doInvoke(T proxy, String methodName,Class&lt;?&gt;[] parameterTypes,Object[] arguments)</code>中会调用代理Wrapper类中<code>wrapper.invokeMethod(proxy, methodName, parameterTypes, arguments);</code>方法,<br>得到invoker过后，再次用<code>DelegateProviderMetaDataInvoker</code>包装一下，通过<code>protocol.export(wrapperInvoker);</code>传入<code>DelegateProviderMetaDataInvoker</code>实例对象，得到一个<code>exporter</code>，那么这里的<code>protocol</code>又是什么实现呢，<br><code>Protocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();</code>这里又是一个自适应扩展点，会生成一个<code>Protocol$Adaptive</code>，我们前面已经分析过了，<code>Protocol$Adaptive</code>会<br>通过当前协议动态获取一个扩展点，那么当前URL的协议是<code>registry</code>,所以，这里应该会调用到<code>RegistryProtocol</code>的<code>export</code>方法，在该方法中，会调用<code>getRegistryUrl()</code>方法，这个方法将注册中心协议从<code>registry</code>改为<br>URL中<code>registry</code>参数值作为协议头，如果不存在则默认使用dubbo注册中心。<br>拿到注册中心和服务发布URL过后，该方法核心代码是<code>final ExporterChangeableWrapper&lt;T&gt; exporter = doLocalExport(originInvoker, providerUrl);</code>，这句代码就是暴露服务的关键，服务暴露过后，该方法中还有一句核心代码<br><code>register(registryUrl, registeredProviderUrl);</code>，这句代码就是将服务地址注册到注册中心，我们一个一个的来分析，dubbo究竟是如何发布服务并且将服务URL注册到注册中心的。<br>首先是服务暴露，通过查看<code>doLocalExport</code>方法，该方法需要两个参数，当前<code>invoker</code>和<code>providerUrl</code>服务地址,该方法源码：<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> ExporterChangeableWrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">doLocalExport</span><span class="token punctuation">(</span><span class="token keyword">final</span> Invoker<span class="token operator">&lt;</span>T<span class="token operator">></span> originInvoker<span class="token punctuation">,</span> URL providerUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span> String key <span class="token operator">=</span> <span class="token function">getCacheKey</span><span class="token punctuation">(</span>originInvoker<span class="token punctuation">)</span><span class="token punctuation">;</span> ExporterChangeableWrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> exporter <span class="token operator">=</span> <span class="token punctuation">(</span>ExporterChangeableWrapper<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> bounds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>exporter <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>bounds<span class="token punctuation">)</span> <span class="token punctuation">{</span>         exporter <span class="token operator">=</span> <span class="token punctuation">(</span>ExporterChangeableWrapper<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> bounds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>exporter <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">final</span> Invoker<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> invokerDelegete <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvokerDelegate</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>originInvoker<span class="token punctuation">,</span> providerUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>             exporter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExporterChangeableWrapper</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span>Exporter<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> protocol<span class="token punctuation">.</span><span class="token function">export</span><span class="token punctuation">(</span>invokerDelegete<span class="token punctuation">)</span><span class="token punctuation">,</span> originInvoker<span class="token punctuation">)</span><span class="token punctuation">;</span>             bounds<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> exporter<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> exporter<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>我们可以看到<code>protocol.export(invokerDelegete)</code>，这里的<code>protocol</code>是什么取决于<code>invokerDelegete</code>中URL协议是什么，这里显然URL是服务地址，所以协议应该是dubbo，所以这里的<code>protocol</code>最终得到的就是<br><code>DubboProtocol</code>，查看<code>DubboProtocol</code>中的<code>export</code>方法，该方法中会调用<code>openServer(url);</code>，传入服务暴露地址，在<code>openServer(url);</code>方法中首先从缓存中获取一个<code>server</code>，如果缓存中没有，则创建一个，<br>那么我们看<code>server</code>是如何创建的，参看<code>createServer</code>方法，<pre class="line-numbers language-java"><code class="language-java">ExchangeServer server<span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span> server <span class="token operator">=</span> Exchangers<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> requestHandler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemotingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RpcException</span><span class="token punctuation">(</span><span class="token string">"Fail to start server(url: "</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">") "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>通过<code>Exchangers.bind(url, requestHandler);</code>得到一个<code>server</code>，该方法最终会调用到<code>HeaderExchanger</code>中的<code>bind</code>方法，到这里还没完，在<code>HeaderExchanger</code>的<code>bind</code>方法中创建一个<code>HeaderExchangeServer</code>对象，<br>该对象需要一个<code>Server</code>参数，这个<code>Server</code>从<code>Transporters.bind</code>中得来，这里又是一个自适应扩展点，但最终会调到<code>NettyTransporter</code>中的<code>bind</code>方法，最终在这里new了一个<code>NettyServer</code>，发布服务。<br>接下来分析服务注册，在<code>RegistryProtocol</code>的<code>export</code>方法中，有这样一句代码<code>final Registry registry = getRegistry(originInvoker);</code>，这句代码的作用就是活的一个注册中心，我们来分析一下<code>getRegistry</code>方法，<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> Registry <span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token keyword">final</span> Invoker<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> originInvoker<span class="token punctuation">)</span> <span class="token punctuation">{</span> URL registryUrl <span class="token operator">=</span> <span class="token function">getRegistryUrl</span><span class="token punctuation">(</span>originInvoker<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> registryFactory<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span>registryUrl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>从代码中可以看出，首先通过URL得到注册中心的协议地址，这个时候这里应该是<code>zookeeper://...</code>，然后通过<code>registryFactory</code>得到一个注册中心工厂对象，但是这里的<code>registryFactory</code>又是什么，改成员变量有一个setter方法，<br>可见，这里的<code>registryFactory</code>是依赖注入进来的，又是一个<code>RegistryFactory$Adaptive</code>，通过协议地址动态活的一个<code>RegistryFactory</code>，当前协议为zookeeper，所以这里的<code>registryFactory</code>就是<code>ZookeeperRegistryFactory</code><br>然后调用<code>ZookeeperRegistryFactory</code>的<code>getRegistry</code>方法，发现该类中并没有这个方法，所以会调用父类<code>AbstractRegistryFactory</code>的<code>getRegistry</code>方法，这是一个模板方法，具体实现由子类完成，在该方法中<code>registry = createRegistry(url);</code>就是<br>由子类<code>ZookeeperRegistryFactory</code>实现的，实现如下：<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Registry <span class="token function">createRegistry</span><span class="token punctuation">(</span>URL url<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ZookeeperRegistry</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> zookeeperTransporter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>回到<code>RegistryProtocol</code>的<code>export</code>方法中，得到一个<code>ZookeeperRegistry</code>注册中心过后，调用``方法，该方法实现如下：<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span>URL registryUrl<span class="token punctuation">,</span> URL registeredProviderUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span> Registry registry <span class="token operator">=</span> registryFactory<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span>registryUrl<span class="token punctuation">)</span><span class="token punctuation">;</span> registry<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>registeredProviderUrl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>得到一个注册中心，并且注册，这里得到的注册中心和<code>getRegistry</code>方法得到注册中心方法一样，得到的都是<code>ZookeeperRegistry</code>，然后看<code>ZookeeperRegistry</code>的<code>register</code>方法，同理，<code>ZookeeperRegistry</code>中没有<code>register</code>则调用<br>父类<code>FailbackRegistry</code>的<code>register</code>方法，并且传入服务暴露URL，改方法又是一个模板方法，最终会调用<code>doRegister</code>，而这个方法在子类<code>ZookeeperRegistry</code>中实现，该方法如下：<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doRegister</span><span class="token punctuation">(</span>URL url<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>     zkClient<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token function">toUrlPath</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span> url<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>DYNAMIC_KEY<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RpcException</span><span class="token punctuation">(</span><span class="token string">"Failed to register "</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">" to zookeeper "</span> <span class="token operator">+</span> <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>这里直接创建一个zookeeper节点，即服务注册，生成的path路径为：<pre><code>/dubbo/xyz.easyjava.dubbo.api.IHelloService/providers/dubbo%3A%2F%2F10.98.217.74%3A20880%2Fxyz.easyjava.dubbo.api.IHelloService%3Fanyhost%3Dtrue%26application%3Deasyjava-dubbo-provider%26bean.name%3Dxyz.easyjava.dubbo.api.IHelloService%26dubbo%3D2.0.2%26generic%3Dfalse%26interface%3Dxyz.easyjava.dubbo.api.IHelloService%26methods%3DsayHello%26pid%3D212032%26release%3D2.7.0%26side%3Dprovider%26timestamp%3D1574752829404</code></pre>以上就是服务注册已经服务暴露全过程。</li></ol><h2 id="服务引用初始化过程"><a href="#服务引用初始化过程" class="headerlink" title="服务引用初始化过程"></a>服务引用初始化过程</h2><p>Dubbo服务引用的时机有两个，第一个是Spring容器在调用<code>ReferenceBean</code>中<code>afterPropertiesSet</code>方法时，第二个是<code>ReferenceBean</code>对应的服务在被注入到其他对象中时，两者的区别在于第一种是饿汉式的，第二种是懒汉式的，<br>Dubbo默认是懒汉式的，我们可以通过配置<code>&lt;dubbo:reference init=&#39;true&#39;&gt;</code>来将其改为饿汉式。<br>不管服务引用是饿汉还是懒汉模式，Dubbo都会调用<code>ReferenceBean</code>的<code>getObject</code>方法，接下来我们就从<code>getObject</code>方法开始分析，在<code>get</code>方法中，如果<code>ReferenceBean</code>对应的服务引用对象<code>ref</code>已存在，则直接返回，<br>如果不存在，则先调用<code>init</code>方法，服务引用对象<code>ref</code>就是在这里面进行创建的。<code>init</code>方法中除了对配置解析拼接到map中以外，最重要的是<code>ref = createProxy(map);</code>方法，在<code>createProxy</code>方法中，<br>首先是判断是否是本地调用，如果是，则创建<code>InjvmProtocol</code>的<code>refer</code>方法创建<code>InjvmInvoker</code>，则读取直连配置或注册中心URL（这里需要注意的是，如果选择了服务直连的方式，注册中心将失效，该方式用于在开发阶段调试过后一定要记得将其关掉），<br>如果urls只要一个，则直接通过<code>refProtocol.refer()</code>调用，如果urls有多个，则循环调用<code>refprotocol.refer</code>并且将invoker放到<code>invokers</code>List中，最后调用<code>cluster.join(new StaticDirectory(invokers))</code>将多个<code>invoker</code>伪装成一个<code>invoker</code>,<br>并且传入一个<code>StaticDirectory</code>静态目录服务，因为这里要么是多个注册中心，要么是多个服务提供者，而这些<code>invoker</code>是不会动态变化的。这个时候的<code>cluster</code>是一个自适应扩展点<code>Cluster$Adaptive</code>，循环调用时需要注意，如果有多个注册中心，<br>则在URL中添加<code>cluster</code>参数，值为<code>registryaware</code>,同样调用<code>cluster.join(new StaticDirectory(u,invokers))</code>，不过这里在创建<code>StaticDirectory</code>静态目录服务的时候多传入了一个注册中心的URL。这里先不去深究。<br>接下来分析<code>invoker</code>的创建过程，<code>invoker</code>的创建是通过<code>protocol.refer</code>方法，<code>protocol</code>的实现有很多，常用的是<code>RegistryProtocol</code>（注册中心）和<code>DubboProtocol</code>（服务直连使用Dubbo协议），这里只分析这两种协议。</p><h3 id="DubboProtocol"><a href="#DubboProtocol" class="headerlink" title="DubboProtocol"></a>DubboProtocol</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">DubboProtocol</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Invoker<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">refer</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> serviceType<span class="token punctuation">,</span> URL url<span class="token punctuation">)</span> <span class="token keyword">throws</span> RpcException <span class="token punctuation">{</span>        <span class="token function">optimizeSerialization</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// create rpc invoker.</span>        DubboInvoker<span class="token operator">&lt;</span>T<span class="token operator">></span> invoker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DubboInvoker</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>serviceType<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token function">getClients</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span> invokers<span class="token punctuation">)</span><span class="token punctuation">;</span>        invokers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>invoker<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> invoker<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> ExchangeClient<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getClients</span><span class="token punctuation">(</span>URL url<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// whether to share connection</span>        <span class="token keyword">boolean</span> service_share_connect <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> connections <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>CONNECTIONS_KEY<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// if not configured, connection is shared, otherwise, one connection for one service</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>connections <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            service_share_connect <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            connections <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ExchangeClient<span class="token punctuation">[</span><span class="token punctuation">]</span> clients <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExchangeClient</span><span class="token punctuation">[</span>connections<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> clients<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>service_share_connect<span class="token punctuation">)</span> <span class="token punctuation">{</span>                clients<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getSharedClient</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                clients<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">initClient</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> clients<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DubboProtocol的<code>refer</code>方法很简单，直接创建一个<code>DubboInvoker</code>返回，但是这里值得注意的是<code>getClients(url)</code>方法，该方法中，首先会从url中读取参数<code>connections</code>，该参数在</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>helloService<span class="token punctuation">"</span></span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xyz.easyjava.dubbo.api.IHelloService<span class="token punctuation">"</span></span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dubbo://10.98.217.74:20880;dubbo://10.98.217.73:20880<span class="token punctuation">"</span></span> <span class="token attr-name">connections</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>中被指定，如果不指定，则默认为0，该值有三个，分别是：</p><ul><li>0：表示该服务使用JVM共享长连接（缺省）</li><li>1：表示该服务使用独立一条长连接</li><li>2：表示该服务使用独立两条长连接，这种方式一般使用于负载较大的服务。<br>所以，这里默认使用JVM共享长连接的方法，这个时候代码会执行<code>getSharedClient(url)</code>，该方法中首先从缓存中取，如果缓存未命中，则调用<code>initClient(url)</code>创建一个新的<code>ExchangeClient</code>，最后通过<code>ReferenceCountExchangeClient</code>包装过后放入到缓存最后返回，<br>再来看一下<code>initClient</code>方法，<code>initClient</code>方法首先判断客户端类型，默认为Netty，并且设置默认心跳间隔时间，最后判断是否延迟链接，如果是延迟连接，则创建<code>LazyConnectExchangeClient</code>，否则调用<code>Exchangers.connect(url, requestHandler)</code>,<br>延迟<code>LazyConnectExchangeClient</code>在发送请求之前调用<code>Exchangers.connect(url, requestHandler)</code>方法，所以，这里我们直接分析，实际上这里最终调用的是<code>HeaderExchanger.connect(URL url, ExchangeHandler handler)</code>，<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">HeaderExchanger</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//...</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> ExchangeClient <span class="token function">connect</span><span class="token punctuation">(</span>URL url<span class="token punctuation">,</span> ExchangeHandler handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemotingException <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HeaderExchangeClient</span><span class="token punctuation">(</span>Transporters<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DecodeHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HeaderExchangeHandler</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>经过深入分析，<code>Transporters.connect</code>最终调用的是<code>NettyTransporter.connect</code>，方法中直接创建一个<code>NettyClient</code>，最终在<code>NettyClient</code>中连接目标服务，并且保存着客户端和服务间的<code>channel</code>，建立长连接。</li></ul><h3 id="RegistryProtocol"><a href="#RegistryProtocol" class="headerlink" title="RegistryProtocol"></a>RegistryProtocol</h3><p>在<code>RegistryProtocol</code>的<code>refer</code>方法中，首先设置URL协议头，从<code>registry</code>改为<code>Zookeeper</code>，然后通过注册中心工厂得到一个注册中心对象，这里得到的是<code>ZookeeperRegistry</code>，最后通过<code>group</code>判断调用<code>doRefer</code>方法的<code>cluster</code>参数应该是哪一个。<br>这里并不影响主流程，我们接着看<code>doRefer</code>方法，方法代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">RegistryProtocol</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...</span>    <span class="token keyword">private</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Invoker<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">doRefer</span><span class="token punctuation">(</span>Cluster cluster<span class="token punctuation">,</span> Registry registry<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> type<span class="token punctuation">,</span> URL url<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RegistryDirectory<span class="token operator">&lt;</span>T<span class="token operator">></span> directory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegistryDirectory</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>        directory<span class="token punctuation">.</span><span class="token function">setRegistry</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>        directory<span class="token punctuation">.</span><span class="token function">setProtocol</span><span class="token punctuation">(</span>protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// all attributes of REFER_KEY</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> parameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span>directory<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        URL subscribeUrl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>CONSUMER_PROTOCOL<span class="token punctuation">,</span> parameters<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>REGISTER_IP_KEY<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> type<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ANY_VALUE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getServiceInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> url<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>REGISTER_KEY<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            registry<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token function">getRegisteredConsumerUrl</span><span class="token punctuation">(</span>subscribeUrl<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        directory<span class="token punctuation">.</span><span class="token function">buildRouterChain</span><span class="token punctuation">(</span>subscribeUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>        directory<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>subscribeUrl<span class="token punctuation">.</span><span class="token function">addParameter</span><span class="token punctuation">(</span>CATEGORY_KEY<span class="token punctuation">,</span>                PROVIDERS_CATEGORY <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> CONFIGURATORS_CATEGORY <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> ROUTERS_CATEGORY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Invoker invoker <span class="token operator">=</span> cluster<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>directory<span class="token punctuation">)</span><span class="token punctuation">;</span>        ProviderConsumerRegTable<span class="token punctuation">.</span><span class="token function">registerConsumer</span><span class="token punctuation">(</span>invoker<span class="token punctuation">,</span> url<span class="token punctuation">,</span> subscribeUrl<span class="token punctuation">,</span> directory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> invoker<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码首先创建注册中心目录服务，并且设置器注册中心对象<code>ZookeeperRegistry</code>和协议<code>Protocol$Adaptive</code>，然后组装消费者URL<code>subscribeUrl</code>，注册到注册中心，构建路由器链，订阅providers,routers,configurators.<br>最后执行<code>Invoker invoker = cluster.join(directory);</code>并返回<code>invoker</code>，首先来分析，服务订阅过程</p><pre class="line-numbers language-java"><code class="language-java">directory<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>subscribeUrl<span class="token punctuation">.</span><span class="token function">addParameter</span><span class="token punctuation">(</span>CATEGORY_KEY<span class="token punctuation">,</span>                PROVIDERS_CATEGORY <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> CONFIGURATORS_CATEGORY <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> ROUTERS_CATEGORY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>服务订阅过程从<code>directory.subscribe</code>开始，在<code>RegistryDirectory</code>中调用<code>registry.subscribe(url, this);</code>，这里的<code>registry</code>是在<code>doRefer</code>方法中注入的，实例为<code>ZookeeperRegistry</code>，在<code>ZookeeperRegistry</code>的<code>subscribe</code>方法中<br>需要两个参数，一个URL和一个Listener，而这里传了this，说明这里this实现了<code>NotifyListener</code>接口，所以，这里传入的是this，接下来看<code>ZookeeperRegistry</code>的<code>subscribe</code>方法，发现该类中并没有此方法，那么必然会调父类的<code>subscribe</code>方法，<br>这里又是一个模板方法，最终还是会调用子类的实现<code>doSubscribe</code>方法，该方法中主要注册<code>Zookeeper</code>监听，如果有如果有节点变动，则会通知到<code>ZookeeperRegistry</code>中<code>notify</code>方法，传入<code>listener</code>，该方法调用链为：</p><pre><code>ZookeeperRegistry.notify -&gt; ZookeeperRegistry.doNotify -&gt; AbstractRegistry.notify -&gt; listener.notify(categoryList)(RegistryDirectory.notify)</code></pre><p>categoryList：该参数为providers,routers,configurators节点下的所有URL地址。该方法中首先将注册中心读取到的URL转换成对象，比如Router,Configurator最后调用<code>refreshInvoker</code>，下面看一下<code>refreshInvoker</code>方法的实现：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">RegistryDirectory</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">refreshInvoker</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>URL<span class="token operator">></span> invokerUrls<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>invokerUrls<span class="token punctuation">,</span> <span class="token string">"invokerUrls should not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>invokerUrls<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> invokerUrls<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> Constants<span class="token punctuation">.</span>EMPTY_PROTOCOL<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>invokerUrls                <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>forbidden <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Forbid to access</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>invokers <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            routerChain<span class="token punctuation">.</span><span class="token function">setInvokers</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>invokers<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">destroyAllInvokers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Close all invokers</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>forbidden <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Allow to access</span>            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Invoker<span class="token operator">&lt;</span>T<span class="token operator">>></span> oldUrlInvokerMap <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>urlInvokerMap<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// local reference</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>invokerUrls <span class="token operator">==</span> Collections<span class="token punctuation">.</span>&lt;URL<span class="token operator">></span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                invokerUrls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>invokerUrls<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cachedInvokerUrls <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                invokerUrls<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cachedInvokerUrls<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>cachedInvokerUrls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>cachedInvokerUrls<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>invokerUrls<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Cached invoker urls, convenient for comparison</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>invokerUrls<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Invoker<span class="token operator">&lt;</span>T<span class="token operator">>></span> newUrlInvokerMap <span class="token operator">=</span> <span class="token function">toInvokers</span><span class="token punctuation">(</span>invokerUrls<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Translate url list to Invoker map</span>            <span class="token comment" spellcheck="true">// state change</span>            <span class="token comment" spellcheck="true">// If the calculation is wrong, it is not processed.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>newUrlInvokerMap <span class="token operator">==</span> null <span class="token operator">||</span> newUrlInvokerMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"urls to invokers error .invokerUrls.size :"</span> <span class="token operator">+</span> invokerUrls<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", invoker.size :0. urls :"</span> <span class="token operator">+</span> invokerUrls                        <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            List<span class="token operator">&lt;</span>Invoker<span class="token operator">&lt;</span>T<span class="token operator">>></span> newInvokers <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">unmodifiableList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>newUrlInvokerMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// pre-route and build cache, notice that route cache should build on original Invoker list.</span>            <span class="token comment" spellcheck="true">// toMergeMethodInvokerMap() will wrap some invokers having different groups, those wrapped invokers not should be routed.</span>            routerChain<span class="token punctuation">.</span><span class="token function">setInvokers</span><span class="token punctuation">(</span>newInvokers<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>invokers <span class="token operator">=</span> multiGroup <span class="token operator">?</span> <span class="token function">toMergeInvokerList</span><span class="token punctuation">(</span>newInvokers<span class="token punctuation">)</span> <span class="token operator">:</span> newInvokers<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>urlInvokerMap <span class="token operator">=</span> newUrlInvokerMap<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">destroyUnusedInvokers</span><span class="token punctuation">(</span>oldUrlInvokerMap<span class="token punctuation">,</span> newUrlInvokerMap<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Close the unused Invoker</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"destroyUnusedInvokers error. "</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先判断协议地址是否只有一个，并且协议为<code>empty</code>协议，如果是，销毁所有<code>invokers</code>，否则将URL列表转成<code>Invoker</code>（这里根据协议会创建<code>DubboInvoker</code>）列表得到<code>newUrlInvokerMap</code>，最后将赋值给<code>urlInvokerMap</code>，达到刷新<code>urlInvokerMap</code>的目的，<br>并且关闭关闭未使用的<code>Invoker</code>，回到<code>RegistryProtocol</code>的<code>doRefer</code>方法的<code>Invoker invoker = cluster.join(directory);</code>，这行代码将服务目录传入，其目的是做客户端负载均衡和服务容错，总之提供集群服务治理支持，这块后面单独分析。</p><h3 id="创建代理"><a href="#创建代理" class="headerlink" title="创建代理"></a>创建代理</h3><p>不管是<code>DubboProtocol</code>还是<code>RegistryProtocol</code>最后都会返回一个<code>Invoker</code>，这个<code>Invoker</code>就是调用服务的客户端，里面封装了和服务端的长连接。但是如果我们直接将<code>Invoker</code>对象拿到业务代码中调用，这样对于我们的业务来说侵入性太高，<br>所以Dubbo使用代理的方式实现业务的零侵入，回到<code>ReferenceConfig</code>的<code>createProxy</code>方法，在最后一行代码<code>return (T) proxyFactory.getProxy(invoker);</code>返回一个代理对象，这里的<code>proxyFactory</code>是一个<code>JavassistProxyFactory</code>,<br>这里首先会调用父类<code>AbstractProxyFactory</code>的<code>getProxy</code>方法，然后调用<code>JavassistProxyFactory</code>的<code>getProxy</code>方法，代理类就是在该方法中被生成的，接下来看下生成的代理类：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>bytecode<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span>service<span class="token punctuation">.</span>EchoService<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationHandler<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>bytecode<span class="token punctuation">.</span>ClassGenerator<span class="token punctuation">;</span><span class="token keyword">import</span> xyz<span class="token punctuation">.</span>easyjava<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>api<span class="token punctuation">.</span>IHelloService<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">proxy0</span><span class="token keyword">implements</span> <span class="token class-name">ClassGenerator<span class="token punctuation">.</span>DC</span><span class="token punctuation">,</span>EchoService<span class="token punctuation">,</span>IHelloService <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods<span class="token punctuation">;</span>    <span class="token keyword">private</span> InvocationHandler handler<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span>String string<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> arrobject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>string<span class="token punctuation">}</span><span class="token punctuation">;</span>        Object object <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handler<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> methods<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arrobject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>object<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object $<span class="token function">echo</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> arrobject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>object<span class="token punctuation">}</span><span class="token punctuation">;</span>        Object object2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handler<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> methods<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arrobject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> object2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">proxy0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">proxy0</span><span class="token punctuation">(</span>InvocationHandler invocationHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> invocationHandler<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该代理类在创建实例的时候传入了一个<code>InvokerInvocationHandler(invoker)</code>，所以，服务调用时其实最终会调用到<code>InvokerInvocationHandler</code>的<code>invoke</code>方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InvokerInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>InvokerInvocationHandler<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Invoker<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> invoker<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">InvokerInvocationHandler</span><span class="token punctuation">(</span>Invoker<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>invoker <span class="token operator">=</span> handler<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        String methodName <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterTypes <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>invoker<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"toString"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> parameterTypes<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> invoker<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"hashCode"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> parameterTypes<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> invoker<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"equals"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> parameterTypes<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> invoker<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> invoker<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token function">createInvocation</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">recreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> RpcInvocation <span class="token function">createInvocation</span><span class="token punctuation">(</span>Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RpcInvocation invocation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RpcInvocation</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>RpcUtils<span class="token punctuation">.</span><span class="token function">hasFutureReturnType</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            invocation<span class="token punctuation">.</span><span class="token function">setAttachment</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>FUTURE_RETURNTYPE_KEY<span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            invocation<span class="token punctuation">.</span><span class="token function">setAttachment</span><span class="token punctuation">(</span>Constants<span class="token punctuation">.</span>ASYNC_KEY<span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> invocation<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="服务目录"><a href="#服务目录" class="headerlink" title="服务目录"></a>服务目录</h2><p>服务目录在前面将<code>RegistryProtocol</code>引入的时候已经讲过了，其主要作用是列出所有<code>invoker</code>，下面来看一下依赖关系：<br><img src="/2019/11/21/Dubbo源码分析/DirectoryDependency.png" alt="Directory依赖关系"><br>由上图可见，<code>AbstractDirectory</code>里面实现了list服务列举方法，该方法肯定是一个模板方法，具体实现由子类提供，接下里分析它的两个实现<code>StaticDirectory</code>和<code>RegistryDirectory</code>，顾名思义，<code>StaticDirectory</code>是静态目录服务，<br>即<code>invokers</code>是固定不变的，该目录适用于注册中心，比如有三个注册中心，那么这三个注册中心在运行过程中是不会动态改变的。<code>RegistryDirectory</code>是动态的，具体的<code>invokers</code>会根据服务注册中心的变动而变动。<br><code>StaticDirectory</code>实现很简单，这里不做过多分析，重点分析<code>RegistryDirectory</code>，<code>RegistryDirectory</code>实现了<code>NotifyListener</code>接口，改接口只有一个方法<code>notify</code>，该方法会在<code>ZookeeperRegistry</code>的<code>doSubscribe</code>（即服务订阅）时被注册，<br>在<code>zookeeper</code>注册中心的服务节点变动时异步通知调用，得到更新过后的URL过后，会调用<code>refreshInvoker</code>方法刷新<code>Invoker</code>列表，改方法在服务引入时分析过了，主要就是将URL列表转换成<code>Invoker</code>列表，放到一个MAP中来达到更新<code>invoker</code>的目的。<br>总结：服务目录可以看成是一个<code>List&lt;Invoker&gt;</code>。</p><h2 id="服务路由"><a href="#服务路由" class="headerlink" title="服务路由"></a>服务路由</h2><p>服务路由的作用是根据用户配置的路由规则来筛选服务提供者。比如有这样一条规则：</p><pre><code>host = 10.20.153.10 =&gt; host = 10.20.153.11</code></pre><p>该条规则表示 IP 为 10.20.153.10 的服务消费者只可调用 IP 为 10.20.153.11 机器上的服务，不可调用其他机器上的服务</p><h2 id="服务集群"><a href="#服务集群" class="headerlink" title="服务集群"></a>服务集群</h2><p>集群的工作可以分为两个阶段，第一：服务消费者初始化时创建<code>ClusterInvoker</code>对象，其目的是将<code>Directory</code>包装，伪装成一个<code>invoker</code>返回，第二：服务调用时，这个时候主要是调用<code>AbstractClusterInvoker</code>的<code>invoke</code>方法，该方法又是一个模板方法，<br>最终会调用具体实现类的<code>doInvoke</code>方法，在<code>doInvoke</code>方法中，封装了一些集群容错的机制，就拿缺省的<code>FailoverClusterInvoker</code>来分析，该方式在调用时出现错误，如果是业务异常，则直接抛出，如果不是业务异常，记录异常，然后重试，<br>重试次数可以在<code>retries</code>属性中指定，默认两次，不算第一次。</p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>负载均衡是在服务调用过程中被确定的，具体在<code>invoker.invoke</code>方法中被初始化，这里的负载均衡器为<code>LoadBalance$Adaptive</code>，具体使用某个负载均衡器取决于用户配置，默认使用随机算法，这里不深入分析负载均衡算法。</p><h2 id="服务调用过程"><a href="#服务调用过程" class="headerlink" title="服务调用过程"></a>服务调用过程</h2><p>服务调用过程分为两个部分</p><ul><li>消费端发送请求</li><li>服务端接受请求处理<h3 id="消费端发送请求"><a href="#消费端发送请求" class="headerlink" title="消费端发送请求"></a>消费端发送请求</h3>在分析服务调用之前，先来看一下服务请求发送流程图<br><img src="/2019/11/21/Dubbo源码分析/send-request-process.jpg" alt="服务调用请求发送流程图"><br>在前面服务引入创建代理时讲到，客户端是通过代理对象调用发送网络请求的，而代理对象是调用<code>InvokerInvocationHandler</code>的<code>invoke</code>方法，所以，服务调用过程理应从这里开始。<br>该方法中，首先会封装请求参数<code>Invocation</code>对象，然后调用<code>invoker</code>的<code>invoke</code>方法，这里前面分析得出这里的<code>invoker</code>应该是<code>MockClusterInvoker</code>，这里不分析Dubbo的<code>Mock</code>机制，直接调用<code>FailoverClusterInvoker</code>的<code>invoker</code>方法，<br>改方法在父类<code>AbstractClusterInvoker</code>中，在该方法中，主要是初始化了负载均衡器<code>RandomLoadBalance</code>，然后调用<code>FailoverClusterInvoker</code>的<code>doInvoke</code>方法，在该方法中，首先通过负载均衡器拿到一个<code>invoker</code>，这里的<code>invoker</code>是我们在目录服务中<code>RegistryDirectory</code>回调<br><code>notify</code>通知中创建的，这里创建的是<code>DubboInvoker</code>，所以这里调用<code>AbstractInvoker</code>中的<code>invoke</code>方法，然后该方法会调用<code>DubboInvoker</code>的<code>doInvoke</code>方法，当然，这中间会调用一些<code>Filter</code>这里不展开分析。<br>在<code>doInvoke</code>方法中，会拿到<code>ReferenceCountExchangeClient</code>，然后调用<code>request</code>方法，这里的调用链比较长，如下：<pre><code>ReferenceCountExchangeClient.request -&gt; HeaderExchangeClient.request -&gt; HeaderExchangeChannel.request -&gt; HeaderExchangeClient.send -&gt; HeaderExchangeChannel.send -&gt; NettyChannel.send -&gt; NioSocketChannel.writeAndFlush</code></pre>由上面调用链可以看出，最终会通过Netty的channel调用writeAndFlush发送数据，最后将结果返回。当然这里面的数据编解码序列化在这里不展开。</li></ul><h3 id="服务端接受请求处理"><a href="#服务端接受请求处理" class="headerlink" title="服务端接受请求处理"></a>服务端接受请求处理</h3><p>服务端接受请求的入口在<code>NettyServerHandler</code>类中的<code>channelRead</code>方法，先来看一下调用链</p><pre><code>NettyServerHandler.channelRead -&gt; AbstractPeer.received -&gt; MultiMessageHandler.received -&gt; HeartbeatHandler.received -&gt; AllChannelHandler.received(该方法中会创建一个线程去执行) -&gt; ChannelEventRunnable.run-&gt; DecodeHandler.received -&gt; HeaderExchangeHandler.received -&gt; HeaderExchangeHandler.handleRequest -&gt; DubboProtocol$1.reply(这里的DubboProtocol$1是ExchangeHandlerAdapter的子类，定义在DubboProtocol中的匿名内部类，该方法中通过channel和invocation获取invoker对象)-&gt; DelegateProviderMetaDataInvoker.invoke -&gt; Wrapper1.invokeMethod -&gt; HelloServiceImpl.sayHello</code></pre><p>代码分析到这里，整个服务请求接受处理差不多就调用完了。</p>]]></content>
      
      
      <categories>
          
          <category> Dubbo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring事务的传播性及隔离级别</title>
      <link href="/2019/11/14/Spring%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%BC%A0%E6%92%AD%E6%80%A7%E5%8F%8A%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
      <url>/2019/11/14/Spring%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%BC%A0%E6%92%AD%E6%80%A7%E5%8F%8A%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>开发中我们对事务并不陌生，但大多数开发者对事务的传播性以及Spring的事务传播性模棱两可，今天就来梳理一下</p><h2 id="什么是事务？"><a href="#什么是事务？" class="headerlink" title="什么是事务？"></a>什么是事务？</h2><p>保证业务（一系列对数据库增删改操作）的原子性，原子：表示不可分割，要么存在要么不存在，是一个最小单位。那么事务就是一批操作视为一个原子操作，要么成功要么失败。</p><h2 id="事务的ACID特性"><a href="#事务的ACID特性" class="headerlink" title="事务的ACID特性"></a>事务的ACID特性</h2><ul><li>A(Atomic)：原子性，当前事务操作是一个最小单位，不可拆分。</li><li>C(Consistency)：一致性，不论事务执行成功还是失败，数据库中的数据始终是一致的。</li><li>I(Isolation)：隔离性，多个事务操作同一笔数据时，各个事务处于一个被隔离的空间，是独立的。</li><li>D(Durability)：持久性，一旦事务提交，修改的数据是永久性的。</li></ul><h2 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h2><ul><li>脏读：一个事务读到另一个事务未提交的更新数据，而另一个事务最终回滚，我们称这类数据为脏数据，这种现象称为脏读。</li><li>不可重复读：事务T1多次读取同一数据，而事务多T2次对这一数据进行更新，导致T1每次读取的数据不一样。</li><li>幻读：事务T1执行一次查询，然后事务T2插入或者删除一条数据，恰好T2这条操作的数据刚好满足T1的检索条件。这时事务T1再执行一次查询，此时得到的数据和第一次查询的数据不一致，这种现象称为幻读。<br>数据库事务隔离级别（4种），Spring除了有数据库的4种还有一种默认。</li><li>ISOLATION_DEFAULT：默认使用数据库的事务隔离级别。</li><li>ISOLATION_READ_UNCOMMITTED：读未提交，可以读到未提交的数据，该级别可能会出现脏读、不可重复读、幻读等问题。</li><li>ISOLATION_READ_COMMITTED：读已提交，只能读到已提交的数据，该级别可以有效避免脏读，但可能会出现不可重复读、幻读的问题。Oracle，SQL Server默认使用此级别。</li><li>ISOLATION_REPEATABLE_READ：可重复读，该方式专门为不可重复读这一现象定制，改级别可以避免脏读和不可重复读，但可能会出现幻读。MySQL默认使用此级别。</li><li>ISOLATION_SERIALIZABLE：可串行化，将事务按照顺序执行，即多个事务不能同时执行，该级别为最高级别，性能上有较大影响，但能避免脏读、不可重复读、幻读等问题。</li></ul><h2 id="Spring事务的传播性"><a href="#Spring事务的传播性" class="headerlink" title="Spring事务的传播性"></a>Spring事务的传播性</h2><p>事务的传播特性的产生，当多个业务嵌套调用时事务的执行策略，是Spring利用其底层资源特性来实现的。<br>Spring为我们提供了以下其中事务的传播性</p><ol><li>PROPAGATION_REQUIRED：必须使用事务，如果当前业务存在一个事务，则加入，如果不存在，则创建一个事务，默认使用此种方式。</li><li>PROPAGATION_SUPPORTS：支持事务，如果父业务存在事务，则加入，如果不存在，则不使用事务。</li><li>PROPAGATION_MANDATORY：强制使用事务，如果父业务不存在事务，则抛出异常。</li><li>PROPAGATION_REQUIRES_NEW：如果当前存在事务，则挂起该事务新建一个事务，如果不存在事务，则同PROPAGATION_REQUIRED</li><li>PROPAGATION_NOT_SUPPORTED：不支持事务，如果当前存在事务，则挂起，自己不使用事务去执行数据库操作。</li><li>PROPAGATION_NEVER：不使用事务，如果当前存在事务，则抛出异常。</li><li>PROPAGATION_NESTED：嵌套事务，如果当前存在事务，则开启一个子事务，但是父事务可以控制子事务是否提交和回滚，子事务的回滚父事务可以选择回滚或者提交。如果当前不存在事务，则同PROPAGATION_REQUIRED</li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事务 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下MySQL安装</title>
      <link href="/2019/11/10/Linux%E4%B8%8BMySQL%E5%AE%89%E8%A3%85/"/>
      <url>/2019/11/10/Linux%E4%B8%8BMySQL%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>Linux CentOS 7 x64<br>mysql-5.7.27 <a href="http://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.16-1.el7.x86_64.rpm-bundle.tar" target="_blank" rel="noopener">下载</a></p><h2 id="卸载MariaDB"><a href="#卸载MariaDB" class="headerlink" title="卸载MariaDB"></a>卸载MariaDB</h2><pre class="line-numbers language-shell"><code class="language-shell">[root@MiWiFi-R3L-srv downloads]# rpm -qa|grep mariadbmariadb-libs-5.5.52-1.el7.x86_64[root@MiWiFi-R3L-srv downloads]# rpm -e mariadb-libs-5.5.52-1.el7.x86_64 --nodeps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><p>解压MySQL</p><pre class="line-numbers language-shell"><code class="language-shell">[root@MiWiFi-R3L-srv developer]# tar -xvf ../downloads/mysql-5.7.27-1.el7.x86_64.rpm-bundle.tar -C /env/developer/mysqlmysql-community-libs-5.7.27-1.el7.x86_64.rpmmysql-community-embedded-devel-5.7.27-1.el7.x86_64.rpmmysql-community-libs-compat-5.7.27-1.el7.x86_64.rpmmysql-community-devel-5.7.27-1.el7.x86_64.rpmmysql-community-embedded-compat-5.7.27-1.el7.x86_64.rpmmysql-community-common-5.7.27-1.el7.x86_64.rpmmysql-community-client-5.7.27-1.el7.x86_64.rpmmysql-community-server-5.7.27-1.el7.x86_64.rpmmysql-community-test-5.7.27-1.el7.x86_64.rpmmysql-community-embedded-5.7.27-1.el7.x86_64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装顺序一定是<code>common</code>、<code>libs</code>、<code>client</code>、<code>server</code>，接下来，开始吧。</p><pre class="line-numbers language-shell"><code class="language-shell">[root@MiWiFi-R3L-srv mysql]# rpm -ivh mysql-community-common-5.7.27-1.el7.x86_64.rpm警告：mysql-community-common-5.7.27-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY准备中...                          ################################# [100%]正在升级/安装...   1:mysql-community-common-5.7.27-1.e################################# [100%][root@MiWiFi-R3L-srv mysql]# rpm -ivh mysql-community-libs-5.7.27-1.el7.x86_64.rpm警告：mysql-community-libs-5.7.27-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY准备中...                          ################################# [100%]正在升级/安装...   1:mysql-community-libs-5.7.27-1.el7################################# [100%][root@MiWiFi-R3L-srv mysql]# rpm -ivh mysql-community-client-5.7.27-1.el7.x86_64.rpm警告：mysql-community-client-5.7.27-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY准备中...                          ################################# [100%]正在升级/安装...   1:mysql-community-client-5.7.27-1.e################################# [100%]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在安装server的时候，报错如下：</p><pre class="line-numbers language-shell"><code class="language-shell">[root@MiWiFi-R3L-srv mysql]# rpm -ivh mysql-community-server-5.7.27-1.el7.x86_64.rpm警告：mysql-community-server-5.7.27-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY错误：依赖检测失败：    /usr/bin/perl 被 mysql-community-server-5.7.27-1.el7.x86_64 需要    net-tools 被 mysql-community-server-5.7.27-1.el7.x86_64 需要    perl(Getopt::Long) 被 mysql-community-server-5.7.27-1.el7.x86_64 需要    perl(strict) 被 mysql-community-server-5.7.27-1.el7.x86_64 需要<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可见server安装需要依赖perl、net-tools，我们使用<code>yum -y install perl</code>、<code>yum -y install net-tools</code>安装完成后，我们再执行</p><pre class="line-numbers language-shell"><code class="language-shell">[root@MiWiFi-R3L-srv mysql]# rpm -ivh mysql-community-server-5.7.27-1.el7.x86_64.rpm警告：mysql-community-server-5.7.27-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY准备中...                          ################################# [100%]正在升级/安装...   1:mysql-community-server-5.7.27-1.e################################# [100%]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到此，MySQL已经安装完成</p><h2 id="配置MySQL"><a href="#配置MySQL" class="headerlink" title="配置MySQL"></a>配置MySQL</h2><p>执行<code>mysqld --initialize --user=mysql</code>，其中<code>--initialize</code>参数表示以安全模式初始化，则会在日志文件中生成一个密码，用户在登录数据库过后需要将其修改为自己的密码，相反<br><code>--initialize-insecure</code>表示非安全模式，则不会生成临时密码。<code>--user=mysql</code>是为了保证数据库目录为与文件的所有者为mysql登陆用户，如果是root身份运行mysql服务，则需要，如果是以mysql身份运行，则可以去掉–user选项。</p><pre class="line-numbers language-shell"><code class="language-shell">[root@MiWiFi-R3L-srv /]# cat /var/log/mysqld.log 2019-11-10T11:08:27.878852Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).2019-11-10T11:08:29.654413Z 0 [Warning] InnoDB: New log files created, LSN=457902019-11-10T11:08:29.914439Z 0 [Warning] InnoDB: Creating foreign key constraint system tables.2019-11-10T11:08:30.008176Z 0 [Warning] No existing UUID has been found, so we assume that this is the first time that this server has been started. Generating a new UUID: 6d3a480f-03aa-11ea-a2ef-00e0b41ce34d.2019-11-10T11:08:30.012039Z 0 [Warning] Gtid table is not ready to be used. Table 'mysql.gtid_executed' cannot be opened.2019-11-10T11:08:30.014895Z 1 [Note] A temporary password is generated for root@localhost: eFZcxogD#6.i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="启动MySQL"><a href="#启动MySQL" class="headerlink" title="启动MySQL"></a>启动MySQL</h2><p>现在启动mysql数据库<code>systemctl start mysqld.service</code>，也可以将MySQL设置为开机自动启动<code>systemctl enable mysqld.service</code>,然后连接到MySQL修改密码<code>mysql -uroot -p</code><br>这里必须修改密码，否则将无法使用</p><pre class="line-numbers language-shell"><code class="language-shell">mysql> show database;ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'database' at line 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>更改密码</p><pre class="line-numbers language-shell"><code class="language-shell">mysql> ALTER USER 'root'@'localhost' IDENTIFIED BY 'cjwan1314+';Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="开启防火墙"><a href="#开启防火墙" class="headerlink" title="开启防火墙"></a>开启防火墙</h2><p>查询端口是否开放<code>firewall-cmd --query-port=3306/tcp</code><br>开放端口<code>firewall-cmd --zone=public --add-port=3306/tcp --permanent</code><br>重启防火墙<code>systemctl restart firewalld.service</code></p><p>MySQL安装到此完毕！！</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux硬盘分区删除、创建、格式化、磁盘挂载</title>
      <link href="/2019/11/10/Linux%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E5%88%A0%E9%99%A4%E3%80%81%E5%88%9B%E5%BB%BA%E3%80%81%E6%A0%BC%E5%BC%8F%E5%8C%96%E3%80%81%E7%A3%81%E7%9B%98%E6%8C%82%E8%BD%BD/"/>
      <url>/2019/11/10/Linux%E7%A1%AC%E7%9B%98%E5%88%86%E5%8C%BA%E5%88%A0%E9%99%A4%E3%80%81%E5%88%9B%E5%BB%BA%E3%80%81%E6%A0%BC%E5%BC%8F%E5%8C%96%E3%80%81%E7%A3%81%E7%9B%98%E6%8C%82%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p>Linux作为日常应用服务器，它的稳定性直接决定着业务的可靠性。今天探讨的是Linux磁盘的扩容。磁盘扩容大致有以下几个步骤：插入磁盘，建立分区，格式化分区，磁盘挂载</p><h2 id="建立分区"><a href="#建立分区" class="headerlink" title="建立分区"></a>建立分区</h2><p>输入<code>fdisk -l</code>，该命令可以看到当前系统有哪些磁盘，这些磁盘的容量，分区，磁盘的逻辑名称。</p><pre class="line-numbers language-shell"><code class="language-shell">[root@MiWiFi-R3L-srv env]# fdisk -l磁盘 /dev/sdb：160.0 GB, 160041885696 字节，312581808 个扇区Units = 扇区 of 1 * 512 = 512 bytes扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：512 字节 / 512 字节磁盘标签类型：dos磁盘标识符：0x8e502bee   设备 Boot      Start         End      Blocks   Id  System/dev/sdb1            2048   312581807   156289880   83  LinuxWARNING: fdisk GPT support is currently new, and therefore in an experimental phase. Use at your own discretion.磁盘 /dev/sda：16.0 GB, 16013942784 字节，31277232 个扇区Units = 扇区 of 1 * 512 = 512 bytes扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：512 字节 / 512 字节磁盘标签类型：gpt#         Start          End    Size  Type            Name 1         2048       411647    200M  EFI System      EFI System Partition 2       411648      2508799      1G  Microsoft basic  3      2508800     31277055   13.7G  Linux LVM       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到需要分区的磁盘名称过后，输入<code>fdisk /dev/sdb</code>，该命令可以查询有创建分区等等</p><pre class="line-numbers language-shell"><code class="language-shell">[root@MiWiFi-R3L-srv env]# fdisk /dev/sdb欢迎使用 fdisk (util-linux 2.23.2)。更改将停留在内存中，直到您决定将更改写入磁盘。使用写入命令前请三思。命令(输入 m 获取帮助)：m命令操作   a   toggle a bootable flag   b   edit bsd disklabel   c   toggle the dos compatibility flag   d   delete a partition   g   create a new empty GPT partition table   G   create an IRIX (SGI) partition table   l   list known partition types   m   print this menu   n   add a new partition   o   create a new empty DOS partition table   p   print the partition table   q   quit without saving changes   s   create a new empty Sun disklabel   t   change a partition's system id   u   change display/entry units   v   verify the partition table   w   write table to disk and exit   x   extra functionality (experts only)命令(输入 m 获取帮助)：p磁盘 /dev/sdb：160.0 GB, 160041885696 字节，312581808 个扇区Units = 扇区 of 1 * 512 = 512 bytes扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：512 字节 / 512 字节磁盘标签类型：dos磁盘标识符：0x8e502bee   设备 Boot      Start         End      Blocks   Id  System/dev/sdb1            2048   312581807   156289880   83  Linux命令(输入 m 获取帮助)：nPartition type:   p   primary (1 primary, 0 extended, 3 free)   e   extendedSelect (default p): p分区号 (2-4，默认 2)：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在该命令中，输入m查看帮助，n：创建，在创建模式下输入p，表示创建新分区，然后输入分区编号和起始大小，w保存当前分区。</p><h2 id="格式化分区"><a href="#格式化分区" class="headerlink" title="格式化分区"></a>格式化分区</h2><p>输入<code>mkfs.ext4 /dev/sdb1</code>，这里的ext4表示文件系统格式。注意：只有格式化了的分区，才会生成磁盘UUID</p><h2 id="挂载磁盘分区"><a href="#挂载磁盘分区" class="headerlink" title="挂载磁盘分区"></a>挂载磁盘分区</h2><p>有的同学误认为（我之前是这样认为的）将磁盘插入服务器过后，分好区并格式化过后就可以了，其实这个时候并没有真正被使用。我们还需要将某个磁盘分区挂载到某个文件夹<br>输入命令<code>mount /dev/sdb1 /env</code>，表示将/dev/sdb1挂载到/env目录，这个时候我们使用<code>df</code>就可以看到/dev/sdb1被挂载到/env目录了</p><pre class="line-numbers language-shell"><code class="language-shell">[root@MiWiFi-R3L-srv env]# df文件系统                1K-块   已用      可用 已用% 挂载点/dev/mapper/cl-root  12806144 969624  11836520    8% /devtmpfs              1874080      0   1874080    0% /devtmpfs                 1885416      0   1885416    0% /dev/shmtmpfs                 1885416   8716   1876700    1% /runtmpfs                 1885416      0   1885416    0% /sys/fs/cgroup/dev/sda2             1038336 134652    903684   13% /boot/dev/sda1              204580   9672    194908    5% /boot/efi/dev/sdb1           153704800  61464 145812460    1% /envtmpfs                  377084      0    377084    0% /run/user/0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>OK，大功告成，但是当服务器重启过后，挂载点将会消失。怎么办呢，我们可以将其设置为开机自动挂载<br>首先查看磁盘分区的UUID<code>blkid</code>，将看到如下信息</p><pre class="line-numbers language-shell"><code class="language-shell">[root@MiWiFi-R3L-srv env]# blkid/dev/mapper/cl-root: UUID="0ebb80a1-9ec8-41c4-86dc-45ae67c55de9" TYPE="xfs" /dev/sda3: UUID="d7HW9s-WSz0-Bjuz-CLIo-3l6A-HZvX-aeLQ59" TYPE="LVM2_member" PARTUUID="bfa0e4d2-8885-47e9-bf84-30349637ecc3" /dev/sda2: UUID="4cd8b6a8-8e73-4ec4-9b92-ff481c2e86d2" TYPE="xfs" PARTUUID="f3757ea1-b200-4b58-b090-b80b3fd0a64b" /dev/sda1: SEC_TYPE="msdos" UUID="BA05-713D" TYPE="vfat" PARTLABEL="EFI System Partition" PARTUUID="54e1380d-0f9a-4951-a82a-03bdfb51baea" /dev/mapper/cl-swap: UUID="4140b465-c638-4008-83c2-80c58e4340e3" TYPE="swap" /dev/sdb1: UUID="a1d5ba39-8bb7-4e26-9946-22dc5368ac85" TYPE="ext4" <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>/dev/sdb1: UUID=”a1d5ba39-8bb7-4e26-9946-22dc5368ac85” TYPE=”ext4”，其中<code>a1d5ba39-8bb7-4e26-9946-22dc5368ac85</code>就是磁盘的UUID，复制一下，在<code>/etc/fstab</code>文件中添加记录</p><pre class="line-numbers language-shell"><code class="language-shell">UUID=a1d5ba39-8bb7-4e26-9946-22dc5368ac85 /env  ext4    defaults        1 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>reboot重启，完成。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 分区 </tag>
            
            <tag> 磁盘挂载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper基本使用及原理分析</title>
      <link href="/2019/11/08/Zookeeper%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
      <url>/2019/11/08/Zookeeper%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>Zookeeper相信大家都不陌生，应用场景也颇为广泛，注册中心、配置中心、分布式锁这些场景都有它的身影。</p><h2 id="Zookeeper是什么"><a href="#Zookeeper是什么" class="headerlink" title="Zookeeper是什么"></a>Zookeeper是什么</h2><p>Zookeeper是一个分布式协调服务，由雅虎创建，最初的目标是解决分布式服务有序性问题，例如分布式锁，虽然分布式服务协调的问题解决了，单Zookeeper本身的单点问题出现了，所以就有了Zookeeper集群来达到Zookeeper本省的高可用性，<br>那么Zookeeper集群节点间的数据同步该如何解决呢？</p><h2 id="Zookeeper安装"><a href="#Zookeeper安装" class="headerlink" title="Zookeeper安装"></a>Zookeeper安装</h2><h3 id="单机模式"><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h3><ol><li>Zookeeper<a href="https://www-eu.apache.org/dist/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz" target="_blank" rel="noopener">下载</a></li><li>解压<code>tar -zxvf zookeeper-3.4.14.tar.gz</code></li><li>将config文件夹下的zoo_simple.conf修改为zoo.conf</li><li>启动Zookeeper <code>sh bin/zkServer.sh start</code></li></ol><h3 id="集群模式"><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h3><ol><li>在Zookeeper工作目录（zoo.conf配置文件汇总的dataDir指定的目录）下创建myid文件，配置当前集群id</li><li>在zoo.conf配置文件中加入server.id=ip port1 port2，其中id为Zookeeper id，ip为Zookeeper IP，port1为数据同步通信所使用的端口，port2为leader选举所使用的端口，例如：<code>server.1 192.168.3.207 2888 3888</code><br>注意：第一次启动一个节点时，会报错，原因是没有其他的节点存在</li></ol><h2 id="Zookeeper配置项解释"><a href="#Zookeeper配置项解释" class="headerlink" title="Zookeeper配置项解释"></a>Zookeeper配置项解释</h2><ul><li>tickTime：Zookeeper服务器和客户端之间的心跳间隔，单位毫秒</li><li>initTime：集群模式下服务器接受客户端（这里的客户端并不是客户端连接Zookeeper的客户端，而是follower节点和leader节点中的follower节点）连接的最长心跳次数</li><li>dataDir：Zookeeper的数据存储目录</li><li>clientPort：对外暴露的客户端连接端口，默认是2181</li><li>syncLimit：leader节点和follower节点之间的数据同步超时时间长度，最长不能超过多少个心跳次数</li><li>server：集群模式下所有节点信息配置</li></ul><h3 id="节点属性"><a href="#节点属性" class="headerlink" title="节点属性"></a>节点属性</h3><p>通过get命令可以看到Zookeeper的节点属性</p><pre class="line-numbers language-shell"><code class="language-shell">[zk: localhost:2181(CONNECTED) 2] get /zookeepercZxid = 0x0ctime = Thu Jan 01 08:00:00 CST 1970mZxid = 0x0mtime = Thu Jan 01 08:00:00 CST 1970pZxid = 0x0cversion = -1dataVersion = 0aclVersion = 0ephemeralOwner = 0x0dataLength = 0numChildren = 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Zxid"><a href="#Zxid" class="headerlink" title="Zxid"></a>Zxid</h4><ul><li>cZxid：该节点创建时间所对应的格式时间戳</li><li>mZxid：该节点修改时间所对应的格式时间戳，若该节点没有经过修改，则mZxid和cZxid对应。</li><li>pZxid：该节点和该节点的子节点（不包含孙子节点）的创建和删除时间所对应的格式时间戳<br>Zxid是一个64位的数字，高32位标注epoch，低32位自增（每一个事务操作递增）</li></ul><h4 id="version版本号"><a href="#version版本号" class="headerlink" title="version版本号"></a>version版本号</h4><ul><li>cversion：子节点版本号</li><li>dataVersion：节点数据版本号</li><li>aclVersion：节点所拥有的权限版本号</li></ul><h4 id="time时间"><a href="#time时间" class="headerlink" title="time时间"></a>time时间</h4><ul><li>ctime：当前节点创建时间</li><li>mtime：当前节点修改时间</li></ul><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li>ephemeralOwner：临时节点sessionId，如果该节点是临时节点，则该值为客户端和服务器之间的会话ID，如果该节点不是临时节点，该值为0</li><li>dataLength：当前节点数据长度</li><li>numChildren：子节点数量</li></ul><h2 id="Zookeeper节点特性"><a href="#Zookeeper节点特性" class="headerlink" title="Zookeeper节点特性"></a>Zookeeper节点特性</h2><ul><li>持久化节点</li><li>临时节点</li><li>有序节点（有序节点可以是持久化的也可以是临时的）</li><li>同级节点下名称必须统一</li><li>临时节点下不允许有子节点</li></ul><h2 id="集群模式下的数据同步"><a href="#集群模式下的数据同步" class="headerlink" title="集群模式下的数据同步"></a>集群模式下的数据同步</h2><p>Zookeeper集群中各个节点都是可以接受客户端请求的，Zookeeper会在每次事务请求提交完毕过后将数据同步到所有follower或者observer节点上，当客户端发送一个读的请求时，Zookeeper直接从当前节点返回数据给客户端。<br>当客户端发送的是写请求时，Zookeeper会将写的请求转发给leader节点，进行事务性操作，完成后将数据同步到所有follower和observer节点上。</p><h3 id="集群角色"><a href="#集群角色" class="headerlink" title="集群角色"></a>集群角色</h3><ul><li>leader：整个集群中唯一调度和处理者，保证集群事务处理顺序性。</li><li>follower：处理客户端非事务请求和转发事务请求，参与事务请求投票，参与leader选举投票</li><li>observer：可提升集群性能，不参与任何形式的投票（包括事务请求和leader选举投票）</li></ul><h2 id="Zookeeper改进版2PC提交"><a href="#Zookeeper改进版2PC提交" class="headerlink" title="Zookeeper改进版2PC提交"></a>Zookeeper改进版2PC提交</h2><h3 id="2PC"><a href="#2PC" class="headerlink" title="2PC"></a>2PC</h3><p>在分布式系统中，处理分布式事务有很多种方式，最常见的就是两阶段提交，那么什么是两阶段提交呢？其实两阶段提交就是将一个事务性操作拆分成两个阶段<br>提交事务请求和执行事务提交</p><ul><li>提交事务请求：TM（事务管理器）将事务操作转发给当前业务的所有事务参与者，然后等待其相应，AP（事务参与者）在收到请求过后去执行事务操作，并将Undo和Redo写入到事务日志中，最后反馈给TM是否能执行该事务。</li><li>执行事务提交：TM收到各个事务参与者的返回过后，通过反馈来决定提交或者回滚事务，如果所有参与者返回的ACK为可执行，则提交该事务，如果有一个参与者返回ACK为不能执行，则回滚该事务。</li></ul><h2 id="ZAB协议"><a href="#ZAB协议" class="headerlink" title="ZAB协议"></a>ZAB协议</h2><p>ZAB(Zookeeper Atomic Broadcast，Zookeeper原子广播)协议是Zookeeper专门设计用于处理崩溃恢复的原子广播协议，在Zookeeper中，主要依赖ZAB来实现数据一致性问题。<br>ZAB协议包含两种基本模式：</p><ul><li>崩溃恢复</li><li>原子广播<br>当整个的leader节点出现宕机或者说集群启动的时候，Zookeeper会进入崩溃恢复模式，在重新选举出新的leader过后，有超过半数以上的节点完成数据通过过后，Zookeeper会进入原子广播模式进行数据同步。</li></ul><h3 id="崩溃恢复原理"><a href="#崩溃恢复原理" class="headerlink" title="崩溃恢复原理"></a>崩溃恢复原理</h3><p>集群中一旦leader几点出现宕机或者由于网络原因leader节点和其他follower节点失去联系已经超过半数以上，那么Zookeeper会认为该leader已经不合法了，就会重新选举出一个新的leader，<br>为了使leader挂了过后系统能过正常工作，ZAB协议需要解决一下两个问题</p><ol><li>已经处理的消息不能丢失<br>当leader在收到所有follower的事务反馈ACK后发送commit指令时宕机，假如向follower1发送commit成功过后宕机，这个时候follower1已经执行了该事务请求，而follower2并没有收到，这个时候ZAB需要重新选举新的leader<br>并且保证该事务请求需要被所有节点所执行。</li><li>被丢弃的消息不能再次出现<br>当leader在收到客户端的事务请求生成proposal过后出现宕机，这个时候这个事务性消息并没有被广播出去，所有的follower节点均没有收到来自leader的事务请求，这个时候ZAB需要保证新选举的leader需要将该事务请求要被丢弃，<br>就算是原来的leader重启注册完成过后也需要将该proposal丢弃，这样就能和集群保持数据一致。<br>针对以上两个要求，我作出如下假设：<br>如果ZAB的leader选举算法能够保证leader在出现宕机过后选举出目前ZXID最大的follower节点作为leader节点，那么应该就能保证之前已经处理的消息不被丢失，同时，由于每次leader选举，epoch会在原来的基础上自增1（epoch += 1）<br>这样就算旧的leader重启它也不会再被选举成为leader。新的leader会将所有的旧的epoch没有被commit的消息全部清除掉。</li></ol><h3 id="原子广播原理"><a href="#原子广播原理" class="headerlink" title="原子广播原理"></a>原子广播原理</h3><p>当leader在收到消息过后，会给当前消息赋予一个全局唯一的64位自增id(zxid)，后续通过zxid可以实现因果有序的特征。然后将消息广播给所有follower节点，follower将消息写入到磁盘过后给leader返回一个ACK，<br>当集群节点中超过半数以上的节点返回ACK过后，leader会像所有节点发送commit请求。</p><h2 id="Leader选举"><a href="#Leader选举" class="headerlink" title="Leader选举"></a>Leader选举</h2><p>Zookeeper选举方式有多种，默认是fast选举，leader选举有两个场景</p><ul><li>集群启动时</li><li>leader出现宕机时</li></ul><h3 id="服务启动时的leader选举"><a href="#服务启动时的leader选举" class="headerlink" title="服务启动时的leader选举"></a>服务启动时的leader选举</h3><ol><li>集群各个节点在启动时，所有节点状态都为LOOKING（节点状态有4中，分别是LOOKING，LEADING，FOLLOWING，OBSERVER）</li><li>每个server发出一个投票给集群中的其他节点，例如当前有三个节点，各个节点的基本信息如下：<ul><li>server1:zxid=0,myid=1</li><li>server2:zxid=0,myid=2</li><li>server3:zxid=0,myid=3<br>server1将投票信息（01）发送给其他两个节点</li></ul></li><li>各个节点在收到投票过后，首先进行校验，如状态校验等</li><li>各个节点将自己投票和别人的投票进行PK<ul><li>首先进行zxid比较，zxid最大的将作为当前集群中的leader</li><li>如果zxid一样，则进行myid比较，myid最大的将作为leader<br>对于server1而言，当前自己的投票为01，收到的投票为02，这个时候server1将更新自己的投票数据为02，而对于server2而言，自己的投票为02，收到的投票为01，这个时候server2不需要更新自己的投票。</li></ul></li><li>统计投票，每次投票过后，都会统计投票，只要超过半数以上的节点投票一致，则被投票对象将被选举成为leader</li><li>最后改变节点状态，leader节点状态为LEADING，其他节点均为FOLLOWING</li></ol><h3 id="运行时Leader选举"><a href="#运行时Leader选举" class="headerlink" title="运行时Leader选举"></a>运行时Leader选举</h3><p>当集群中的leader宕机或不可用时，这个时候集群已经不能对外提供服务，而是进入新一轮的leader选举，运行时Leader选举和服务启动时的Leader选举过程基本一致，首先会将epoch自增1，然后将所有节点的状态改为LOOKING，进行新一轮的leader选举。</p>]]></content>
      
      
      <categories>
          
          <category> Zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring原理分析</title>
      <link href="/2019/11/05/Spring%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
      <url>/2019/11/05/Spring%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>提到Spring，脑海中的第一概念就是IOC（控制反转）、DI（依赖注入）、AOP（面向切面编程），但是在日常编码中，一般的同学都并没有深入了解过这几个概念的实现原理，那么今天就通过分析源码的方式来了解一下。</p><h2 id="Spring-IOC实现思路"><a href="#Spring-IOC实现思路" class="headerlink" title="Spring IOC实现思路"></a>Spring IOC实现思路</h2><h3 id="什么是IOC"><a href="#什么是IOC" class="headerlink" title="什么是IOC"></a>什么是IOC</h3><p>将创建对象的控制权交给Spring管理就叫控制反转，说的有点抽象，其实就是让Spring为我们创建管理对象，Spring实现IOC的大致思路如下：</p><ul><li>加载配置文件</li><li>解析配置文件</li><li>注册BeanDefinition</li></ul><h3 id="加载配置文件"><a href="#加载配置文件" class="headerlink" title="加载配置文件"></a>加载配置文件</h3><p>将我们编写的xml配置文件通过类加载、文件、URL等机制加载到内存中</p><h3 id="解析配置文件"><a href="#解析配置文件" class="headerlink" title="解析配置文件"></a>解析配置文件</h3><p>将加载到内存中的配置文件解析成程序能够理解的对象，这里指的是BeanDefinition，Spring支持多种配置文件格式，例如：XML、Properties</p><h3 id="注册BeanDefinition"><a href="#注册BeanDefinition" class="headerlink" title="注册BeanDefinition"></a>注册BeanDefinition</h3><p>将各个BeanDefinition对象注册到IOC容器中，Spring中核心容器是一个Map，使用beanName作为key，BeanDefinition作为value存储</p><h2 id="DI基本概念"><a href="#DI基本概念" class="headerlink" title="DI基本概念"></a>DI基本概念</h2><h3 id="什么是DI"><a href="#什么是DI" class="headerlink" title="什么是DI"></a>什么是DI</h3><p>从容器中获得某个对象时，当前对象依赖的所有对象一并赋值给当前对象这叫依赖注入</p><p>Spring中依赖注入是从getBean开始的，getBean方法大致作用在于将BeanDefinition配置描述对象实例化，然后将依赖的对象递归创建，然后自动注入</p><h3 id="循环注入"><a href="#循环注入" class="headerlink" title="循环注入"></a>循环注入</h3><p>Spring中依赖注入常见循环注入问题，那么什么是循环注入呢？例如：对象A依赖对象B，对象B依赖对象C，对象C依赖对象A，这样就陷入了死循环。那么循环注入该如何避免，Spring中是如何处理循环注入的呢。<br>首先，循环注入常见于两种情况</p><ul><li>构造函数循环注入</li><li>setter方法循环注入</li></ul><h4 id="构造函数循环注入"><a href="#构造函数循环注入" class="headerlink" title="构造函数循环注入"></a>构造函数循环注入</h4><p>这种方式Spring会抛出<code>BeanCurrentlyInCreationException</code>异常，原因是，当创建对象A的时候，发现构造函数需要依赖B，这个时候A还没有被创建完成，Spring将正在创建中的A对象放到一个正在创建的<code>prototypesCurrentlyInCreation</code>(<code>prototypesCurrentlyInCreation</code>是一个<code>NamedThreadLocal</code>)中，然后继续创建对象B，<br>以此类推，当创建对象C的时候，C对象依赖对象A，这个时候又去创建A，发现<code>prototypesCurrentlyInCreation</code>中存在对象A，这个时候Spring就会抛出<code>BeanCurrentlyInCreationException</code>异常。那么为什么Spring要设计一个正在创建的<code>prototypesCurrentlyInCreation</code>，试想一下，<br>如果Spring不做任何措施，只是单纯的递归创建对象并且自动注入依赖对象，当C对象创建的时候，去注入对象A，这个时候A对象其实并没有完成创建，然后继续创建对象A，如此就陷入了死循环，最终对导致内存溢出。对象在创建完成后从<code>prototypesCurrentlyInCreation</code>中删除。</p><h4 id="setter方法循环注入"><a href="#setter方法循环注入" class="headerlink" title="setter方法循环注入"></a>setter方法循环注入</h4><p>此种方式可以正常完成依赖注入，因为这种方式是先创建对象，再注入依赖对象，拿之前的例子来说，首先创建对象A，发现对象A依赖对象B，这个时候创建对象B，继而创建对象C，在创建完对象C过后，发现对象C依赖对象A，<br>这个时候将已经创建的对象A注入给对象C，所以，这种方式的循环注入并不会出现问题。</p><h2 id="SpringMVC实现原理"><a href="#SpringMVC实现原理" class="headerlink" title="SpringMVC实现原理"></a>SpringMVC实现原理</h2><p>SpringMVC的实现原理可以分为三个阶段，分别是：</p><ul><li>配置阶段</li><li>初始化阶段</li><li>请求执行阶段</li></ul><h3 id="配置阶段"><a href="#配置阶段" class="headerlink" title="配置阶段"></a>配置阶段</h3><p>该阶段主要是配置SpringMVC的核心Servlet以及指定Spring的配置文件位置，配置监听等。</p><h3 id="初始化阶段"><a href="#初始化阶段" class="headerlink" title="初始化阶段"></a>初始化阶段</h3><p>初始化SpringMVC九大组件</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initMultipartResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initLocaleResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initThemeResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initHandlerMappings</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initHandlerAdapters</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initHandlerExceptionResolvers</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initRequestToViewNameTranslator</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initViewResolvers</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initFlashMapManager</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上组件的作用分别是<br><code>MultipartResolver</code>：文件处理器<br><code>LocaleResolver</code>：语言处理器，用于国际化<br><code>ThemeResolver</code>：主题处理器<br><code>HandlerMappings</code>：SpringMVC核心请求处理器，简称处理器映射器<br><code>HandlerAdapters</code>：处理器适配器，用于适配处理器参数，从request中获取参数，自动转型并适配形式参数<br><code>HandlerExceptionResolvers</code>：异常处理器<br><code>RequestToViewNameTranslator</code>：视图名称翻译器<br><code>ViewResolvers</code>：页面渲染处理器<br><code>FlashMapManager</code>：参数传递管理器</p><p>以上最核心的是<code>HandlerMappings</code>、<code>HandlerAdapters</code>、<code>ViewResolvers</code>，<code>HandlerMapping</code>用于管理URI对应的处理器Method，<code>HandlerAdapters</code>用于适配处理器参数，<code>ViewResolvers</code>用于试图渲染</p><h3 id="请求执行阶段"><a href="#请求执行阶段" class="headerlink" title="请求执行阶段"></a>请求执行阶段</h3><p>当SpringMVC应用启动完毕，用户像服务器发送一个请求，首先会通过用户请求的URI进行匹配<code>HandlerMapping</code>，得到<code>HandlerMapping</code>过后，进行参数封装，最后执行方法，最后通过返回的<code>ModelAndView</code>交给<code>ViewResolvers</code>渲染试图</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>SpringMVC的运行流程大致是，配置核心入口DispatcherServlet，初始化<code>HandlerMappings</code>、<code>HandlerAdapters</code>、<code>ViewResolvers</code>，当用户请求时，通过用户请求的URI查找处理器，封装请求参数，执行返回结果，渲染试图。</p><h2 id="Spring-AOP实现原理"><a href="#Spring-AOP实现原理" class="headerlink" title="Spring AOP实现原理"></a>Spring AOP实现原理</h2><p>Spring中AOP分为两个阶段，第一个阶段为加载和解析配置阶段，第二个阶段为创建代理对象阶段</p><h3 id="加载解析配置阶段"><a href="#加载解析配置阶段" class="headerlink" title="加载解析配置阶段"></a>加载解析配置阶段</h3><p>该阶段主要对AOP的配置进行提起加载解析，在IOC的解析成<code>BeanDefinition</code>的时候进行，其实Spring所有的配置加载都在这一阶段完成，在解析XML配置文件的时候，Spring默认只解析Bean Namespace，当Spring发现配置文件中有引入其他Spring扩展Namespace的时候，<br>Spring会根据配置文件的NamespaceURI进行确定使用哪一个NamespaceHandler来解析当前配置文件中的扩展配置，最后都将封装成一个<code>BeanDefinition</code>然后注册到IOC容器中。值得注意的是，在解析AOP配置的过程中，<br>Spring向容器注册了一个<code>AspectJAwareAdvisorAutoProxyCreator</code>，改类用于创建代理对象。</p><h3 id="创建代理对象阶段"><a href="#创建代理对象阶段" class="headerlink" title="创建代理对象阶段"></a>创建代理对象阶段</h3><p>Spring中不管是创建对象还是依赖注入都是从getBean开始的，通过探究里面真正干活的是<code>AbstractAutowireCapableBeanFactory</code>中的<code>createBean</code>，该方法最终会调到<code>initializeBean</code>，该方法又会调用<code>applyBeanPostProcessorsAfterInitialization</code>方法，<br>在该方法中，会循环调用之前初始化时注册到容器中的所有<code>BeanPostProcessor</code>的<code>postProcessAfterInitialization</code>方法，而AOP在初始化的时候，注册了一个<code>AspectJAwareAdvisorAutoProxyCreator</code>，该类是<code>BeanPostProcessor</code>的子类，所以最终创建代理类的是<br><code>AspectJAwareAdvisorAutoProxyCreator</code>的父类AbstractAutoProxyCreator的<code>postProcessAfterInitialization</code>方法，在该方法中调用<code>wrapIfNecessary</code>判断是否需要被代理（里面的判断逻辑就是切入点表达式，满足条件的表示该方法被代理），<br>并且应该使用哪种代理方式取决于目标对象是代理接口还是代理类，如果是代理接口则使用JDK动态代理，代理类则使用CGLIB动态代理。代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultAopProxyFactory</span> <span class="token keyword">implements</span> <span class="token class-name">AopProxyFactory</span><span class="token punctuation">,</span> Serializable <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> AopProxy <span class="token function">createAopProxy</span><span class="token punctuation">(</span>AdvisedSupport config<span class="token punctuation">)</span> <span class="token keyword">throws</span> AopConfigException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">isOptimize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> config<span class="token punctuation">.</span><span class="token function">isProxyTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">hasNoUserSuppliedProxyInterfaces</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>targetClass <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AopConfigException</span><span class="token punctuation">(</span><span class="token string">"TargetSource cannot determine target class: "</span> <span class="token operator">+</span>                        <span class="token string">"Either an interface or a target is required for proxy creation."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>targetClass<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> Proxy<span class="token punctuation">.</span><span class="token function">isProxyClass</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdkDynamicAopProxy</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ObjenesisCglibAopProxy</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdkDynamicAopProxy</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis中调用存储过程</title>
      <link href="/2019/10/12/Mybatis%E4%B8%AD%E8%B0%83%E7%94%A8%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
      <url>/2019/10/12/Mybatis%E4%B8%AD%E8%B0%83%E7%94%A8%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>很多人对Mybatis调用存储过程模棱两可，不知道该怎么配置，本篇将接受Mybatis如何调用Oracle存储过程（带有入参和出参）</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>需要注意的是调用存储过程的方法应当是select标签，statementType=CALLABLE，这里的parameterType建议必须填写，以免出现问题。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span> <span class="token attr-name">statementType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CALLABLE<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.juncheng.entity.TestEntity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {CALL TEST(#{aa,mode=IN},#{bb,mode=OUT,jdbcType=CURSOR,resultMap=emp},#{cc})}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>参数的mode标识当前参数是入参还是出参，入参使用IN，出参使用OUT，如果即是入参也是出参，可以不用填写</p><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>大多数情况下，调用一个存储过程过后，会有返回值，并且这个返回值可能是查询列表，通过OUT参数输出，这个时候存储过程的参数类型应该是游标（SYS_REFCURSOR）类型，在Mybatis中<br>参数的jdbcType=CURSOR，并且需要指定该列表的映射实体resultMap=emp，resultMap代码如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.juncheng.entity.EmpEntity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>EMPNO<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>empno<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ENAME<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ename<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JOB<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>job<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MGR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mgr<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HIREDATE<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hiredate<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TIMESTAMP<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SAL<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sal<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>COMM<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>comm<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DEPTNO<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptno<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>OUT参数并不是直接通过Mapper接口返回值返回，而是set到参数对象对应的属性中，一般调用存储过程是没有返回值的，所有的OUT参数都返回到Mapper接口的参数中。代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TestMapper</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>TestEntity entity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestEntity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer aa<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>EmpEntity<span class="token operator">></span> bb<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer cc<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//setter getter...</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmpEntity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer empno<span class="token punctuation">;</span>    <span class="token keyword">private</span> String ename<span class="token punctuation">;</span>    <span class="token keyword">private</span> String job<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer mgr<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date hiredate<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer sal<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer comm<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer deptno<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//setter getter...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mybatis-conf.xml</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置数据库连接信息 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>oracle.jdbc.driver.OracleDriver<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:oracle:thin:@127.0.0.1:1521:ORCL<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scott<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scott<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com/juncheng/mapper/TestMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试用例，主入口</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisOracleTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String resource <span class="token operator">=</span> <span class="token string">"mybatis-conf.xml"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.流形式读取mybatis配置文件</span>        InputStream stream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.通过配置文件创建SqlSessionFactory</span>        SqlSessionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>        SqlSession sqlSession <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//以下是测试</span>        TestMapper testMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>TestMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TestEntity entity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        entity<span class="token punctuation">.</span><span class="token function">setAa</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        entity<span class="token punctuation">.</span><span class="token function">setCc</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        testMapper<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> 存储过程 </tag>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker入门及实战</title>
      <link href="/2019/10/11/Docker%E5%85%A5%E9%97%A8%E5%8F%8A%E5%AE%9E%E6%88%98/"/>
      <url>/2019/10/11/Docker%E5%85%A5%E9%97%A8%E5%8F%8A%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<p>我们常常在部署项目的过程中遇到一些莫名其妙的问题，为什么在本地就能跑的项目放到服务器上就跑不起来，<br>这里面的原因有很多，或许是环境的差异导致的，也或许是一些中间件版本不一致导致的，<br>总之，程序本身是没有问题的，这些问题或许在今天能得以解决。</p><h2 id="Docker是什么"><a href="#Docker是什么" class="headerlink" title="Docker是什么"></a>Docker是什么</h2><p>Docker是一个虚拟化的容器，可以看成是一个虚拟化的服务器，但他和服务器的区别是，<br>容器中实际上并没有服务器操作系统，它其实是调用的宿主机的系统内核。</p><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><p>这里使用yum安装Docker，默认yum远程仓库中没有docker，所以需要添加repository，添加repository需要用到yum-config-manager，但是在使用yum-config-manager时报找不到该命令，所以需要安装yum-utils<br>步骤如下：</p><ol><li>安装yum-utils<pre class="line-numbers language-shell"><code class="language-shell">yum install -y yum-utils device-mapper-persistent-data lvm2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>添加docker yum源<pre class="line-numbers language-shell"><code class="language-shell">yum-config-manager \ --add-repo \ https://download.docker.com/linux/centos/docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>安装Docker CE和客户端<pre class="line-numbers language-shell"><code class="language-shell">yum install docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>启动Docker<pre class="line-numbers language-shell"><code class="language-shell">systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring中常见的设计模式</title>
      <link href="/2019/09/20/Spring%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/09/20/Spring%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>Spring作为Java必选框架，必然有它吸引人之处，不光是实现逻辑的便利性上，还体现在代码质量。可以说，Spring是一个很讲究的框架，似乎不能容忍任何的设计不合理或者追求极致。<br>今天我们就来探讨一下Spring中常用的设计模式</p><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>概述：只关心产品生产，不做三无产品，spring中常见于BeanFactory，工厂模式也可分为以下几种：</p><ol><li>简单工厂：用户需要告诉工厂需要什么产品，由工厂生产</li><li>工厂方法：用户根据自己的需求选择相应的工厂</li><li>抽象工厂：工厂给出一系列产品族供用户选择</li></ol><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>概述：一个类在程序的生命周期中只会产生一个实例<br>前提：私有化构造方法</p><ol><li>饿汉式：不管是否有调用，都会创建一个实例，该方式是线程安全的</li><li>懒汉式：当用到实例时，会判断是否已存在该类的实例，如果存在，则直接返回，如果不存在，则创建返回，该方式是线程非安全的，使用时需要考虑线程安全问题，所以效率上会有所差异</li><li>注册登记式：在需要单例的类中定义一个map，每次获取实例时在map中get，如果存在，则直接返回，如果不存在，像map中put一个实例，最后返回，spring中单例bean通过该方式实现</li><li>枚举式：隶属于注册登记式</li><li>序列化和反序列化：通过java的对象序列化实现，类需要实现Seriablizable接口，重写readResovle方法</li></ol><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p>概述：将原有对象的属性复制到另一个新的对象中</p><ol><li>克隆：实现Cloneable接口，重写clone方法，该方式属于浅克隆（属性中如果包含其他对象，则拷贝其属性对象的引用）</li><li>序列化和反序列化：需要实现Seriablizable接口</li></ol><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>概述：为目标类创建一个代理对象，使其业务得到增强</p><ol><li>静态代理：一切都是已知的，代理对象须包含目标对象的引用</li><li>JDK动态代理：目标对象必须实现接口，生产的代理对象集成自目标对象的所有接口</li><li>CGLIB动态代理：通过继承的方式实现代理，CGLIB生产的代理对象继承自目标对象，无需实现任何接口</li><li>自定义实现动态代理</li></ol><p>动态代理的实现原理（JDK）：<br>      1. 获取目标对象实现的所有接口<br>      2. 动态生成代理java类（实现目标对象的所有接口，增强目标代理方法）<br>      3. 将.java文件编译成.class文件<br>      4. 将字节码文件加载到JVM中<br>      5. 返回代理对象</p><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p>概述：用户根据自己的业务逻辑在已存在的一系列算法中选择，切新增算法不会影响原有逻辑，如订单支付，用户可以选择使用支付宝或者微信支付，可以替换掉程序中的switch和if…else if…else…语法</p><h2 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h2><p>概述：流程固定，流程中的某一个环节用户可以自定义</p><ol><li>JDBC的固定流程如下<ol><li>加载驱动</li><li>建立连接</li><li>创建预编译sql语句</li><li>执行预编译sql语句</li><li>返回结果集</li><li>回收资源</li></ol></li></ol><p>以上流程是固定的，无论用户使用哪一种数据库，都会根据上面的步骤执行，但用户可以自定义其中某一个步骤，例如用户可以选择加载oracle驱动或者mysql驱动，结果返回由用户指定结果集接收</p><h2 id="委派模式"><a href="#委派模式" class="headerlink" title="委派模式"></a>委派模式</h2><p>概述：委派模式有些类似于静态代理模式和策略模式，属于静态代理和策略模式中一种特殊的模式</p><ol><li>例如老板需要做一个登录的功能，将需求告知给项目经理，项目经理对手上的员工擅长能力都非常了解，项目经理根据员工擅长的领域，选择决定让某一个人来完成这个功能。<ol><li>这其中项目经理就如同老板的中介，这点有点类似于代理模式中的代理对象，普通员工就是被代理对象，而代理模式中代理对象需要持有被代理对象的引用，而这里的项目经理也需要持有普通员工对象的引用。</li><li>项目经理根据员工的擅长领域来做决策，这点类似于策略模式</li></ol></li></ol><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p>概述：在不改变原有逻辑的情况下扩展（向下兼容），简而言之，将一个类的接口转换成客户端希望的另一个接口</p><h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><p>概述：包装者和被包装者都实现同一个接口，且包装者持有被包装者的引用，包装者是被包装者的一种增强，但本质也属于被包装者类型。例如InputStream和DataInputStream的关系</p><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>概述：被观察者在做完某件事情过后通知观察者，主要是为了解耦</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
